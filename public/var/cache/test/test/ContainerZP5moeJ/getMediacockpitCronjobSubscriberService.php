<?php

namespace ContainerZP5moeJ;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMediacockpitCronjobSubscriberService extends App_KernelTestDebugContainer
{
    /**
     * Gets the private 'AppBundle\EventSubscriber\Cronjob\MediacockpitCronjobSubscriber' shared autowired service.
     *
     * @return \AppBundle\EventSubscriber\Cronjob\MediacockpitCronjobSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Component/Interfaces/IsCronjobEventSubscriberInterface.php';
        include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/EventSubscriber/Cronjob/MediacockpitCronjobSubscriber.php';

        $a = ($container->privates['AppBundle\\Services\\System\\CronjobService'] ?? $container->getCronjobServiceService());

        if (isset($container->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'])) {
            return $container->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'];
        }
        $b = ($container->privates['AppBundle\\Services\\Vendor\\DoctrineService'] ?? $container->load('getDoctrineServiceService'));

        if (isset($container->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'])) {
            return $container->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'];
        }
        $c = ($container->services['doctrine.orm.default_entity_manager'] ?? $container->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($container->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'])) {
            return $container->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'];
        }
        $d = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());

        if (isset($container->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'])) {
            return $container->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'];
        }
        $e = ($container->privates['AppBundle\\Services\\Feature\\Connection\\MediacockpitService'] ?? $container->getMediacockpitServiceService());

        if (isset($container->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'])) {
            return $container->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'];
        }

        return $container->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'] = new \AppBundle\EventSubscriber\Cronjob\MediacockpitCronjobSubscriber(($container->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\AssetRepository'] ?? $container->getAssetRepositoryService()), ($container->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\AttributeRepository'] ?? $container->getAttributeRepositoryService()), ($container->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\AttributeStandardValueRepository'] ?? $container->load('getAttributeStandardValueRepositoryService')), ($container->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\CollectionRepository'] ?? $container->getCollectionRepositoryService()), ($container->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\ChoiceRepository'] ?? $container->getChoiceRepositoryService()), ($container->privates['AppBundle\\Repository\\ConnectionRepository'] ?? $container->getConnectionRepositoryService()), ($container->privates['AppBundle\\Repository\\File\\AttributeRepository'] ?? $container->getAttributeRepository2Service()), $a, $b, $c, $d, $e);
    }
}
