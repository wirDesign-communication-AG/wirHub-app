<?php

namespace ContainerZP5moeJ;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authenticator_AccessToken_MainService extends App_KernelTestDebugContainer
{
    /**
     * Gets the private 'security.authenticator.access_token.main' shared service.
     *
     * @return \Symfony\Component\Security\Http\Authenticator\AccessTokenAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Authenticator/AuthenticatorInterface.php';
        include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Authenticator/AccessTokenAuthenticator.php';
        include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/AccessToken/AccessTokenExtractorInterface.php';
        include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/AccessToken/QueryAccessTokenExtractor.php';

        $a = ($container->privates['AppBundle\\Security\\UserProvider'] ?? $container->load('getUserProviderService'));

        if (isset($container->privates['security.authenticator.access_token.main'])) {
            return $container->privates['security.authenticator.access_token.main'];
        }

        $container->privates['security.authenticator.access_token.main'] = $instance = new \Symfony\Component\Security\Http\Authenticator\AccessTokenAuthenticator(($container->privates['AppBundle\\Security\\AccessTokenHandler'] ?? $container->load('getAccessTokenHandlerService')), ($container->privates['security.access_token_extractor.query_string'] ??= new \Symfony\Component\Security\Http\AccessToken\QueryAccessTokenExtractor()), $a, NULL, NULL, NULL);

        if ($container->has('translator')) {
            $instance->setTranslator(($container->services['translator'] ?? $container->getTranslatorService()));
        }

        return $instance;
    }
}
