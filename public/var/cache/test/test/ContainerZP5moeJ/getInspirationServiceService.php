<?php

namespace ContainerZP5moeJ;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getInspirationServiceService extends App_KernelTestDebugContainer
{
    /**
     * Gets the private 'AppBundle\Services\Element\SmartBlock\InspirationService' shared autowired service.
     *
     * @return \AppBundle\Services\Element\SmartBlock\InspirationService
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Element/SmartBlock/InspirationService.php';

        return $container->privates['AppBundle\\Services\\Element\\SmartBlock\\InspirationService'] = new \AppBundle\Services\Element\SmartBlock\InspirationService(($container->services['doctrine.orm.default_entity_manager'] ?? $container->getDoctrine_Orm_DefaultEntityManagerService()), ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService()), ($container->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationRepository'] ?? $container->getInspirationRepositoryService()), ($container->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationCommentRepository'] ?? $container->load('getInspirationCommentRepositoryService')), ($container->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagRepository'] ?? $container->getInspirationTagRepositoryService()), ($container->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagTypeRepository'] ?? $container->getInspirationTagTypeRepositoryService()), ($container->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\EyeCatcherRepository'] ?? $container->getEyeCatcherRepositoryService()), ($container->privates['AppBundle\\Services\\Element\\ElementService'] ?? $container->getElementServiceService()), ($container->privates['AppBundle\\Services\\FileService'] ?? $container->getFileServiceService()), ($container->privates['AppBundle\\Services\\SnackbarService'] ?? $container->load('getSnackbarServiceService')), ($container->privates['AppBundle\\Services\\UserService'] ?? $container->getUserServiceService()));
    }
}
