<?php

namespace ContainerZP5moeJ;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class App_KernelTestDebugContainer extends Container
{
    protected $containerDir;
    protected $targetDir;
    protected $parameters = [];
    private $buildParameters;
    protected \Closure $getService;

    public function __construct(array $buildParameters = [], $containerDir = __DIR__)
    {
        $this->getService = $this->getService(...);
        $this->buildParameters = $buildParameters;
        $this->containerDir = $containerDir;
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'kernel' => true,
        ];
        $this->methodMap = [
            '.container.private.profiler' => 'get_Container_Private_ProfilerService',
            'Symfony\\Contracts\\HttpClient\\HttpClientInterface' => 'getHttpClientInterfaceService',
            'cache.app' => 'getCache_AppService',
            'cache.security_is_granted_attribute_expression_language' => 'getCache_SecurityIsGrantedAttributeExpressionLanguageService',
            'cache.system' => 'getCache_SystemService',
            'cache.validator_expression_language' => 'getCache_ValidatorExpressionLanguageService',
            'craue_formflow_util' => 'getCraueFormflowUtilService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'event_dispatcher' => 'getEventDispatcherService',
            'http_kernel' => 'getHttpKernelService',
            'jms_serializer.authorization_checker' => 'getJmsSerializer_AuthorizationCheckerService',
            'knp_menu.matcher' => 'getKnpMenu_MatcherService',
            'monolog.logger.deprecation' => 'getMonolog_Logger_DeprecationService',
            'request_stack' => 'getRequestStackService',
            'router' => 'getRouterService',
            'translator' => 'getTranslatorService',
            'profiler' => 'getProfilerService',
        ];
        $this->fileMap = [
            'AppBundle\\Controller\\Admin\\DefaultController' => 'getDefaultControllerService',
            'AppBundle\\Controller\\Admin\\SpaceController' => 'getSpaceControllerService',
            'AppBundle\\Controller\\Admin\\System\\CronjobController' => 'getCronjobControllerService',
            'AppBundle\\Controller\\Admin\\User\\DefaultController' => 'getDefaultController2Service',
            'AppBundle\\Controller\\Admin\\User\\ExportController' => 'getExportControllerService',
            'AppBundle\\Controller\\Admin\\User\\GroupController' => 'getGroupControllerService',
            'AppBundle\\Controller\\Admin\\User\\ImportController' => 'getImportControllerService',
            'AppBundle\\Controller\\Admin\\User\\ManageController' => 'getManageControllerService',
            'AppBundle\\Controller\\AjaxController' => 'getAjaxControllerService',
            'AppBundle\\Controller\\Asset\\FileController' => 'getFileControllerService',
            'AppBundle\\Controller\\Asset\\ScriptController' => 'getScriptControllerService',
            'AppBundle\\Controller\\Asset\\ThemeController' => 'getThemeControllerService',
            'AppBundle\\Controller\\CategoryController' => 'getCategoryControllerService',
            'AppBundle\\Controller\\Category\\ApprovalController' => 'getApprovalControllerService',
            'AppBundle\\Controller\\Category\\ExportController' => 'getExportController2Service',
            'AppBundle\\Controller\\Category\\TranslateController' => 'getTranslateControllerService',
            'AppBundle\\Controller\\Components\\MenuAsideController' => 'getMenuAsideControllerService',
            'AppBundle\\Controller\\DashboardController' => 'getDashboardControllerService',
            'AppBundle\\Controller\\DefaultController' => 'getDefaultController3Service',
            'AppBundle\\Controller\\DownloadController' => 'getDownloadControllerService',
            'AppBundle\\Controller\\ElementController' => 'getElementControllerService',
            'AppBundle\\Controller\\Element\\AjaxController' => 'getAjaxController2Service',
            'AppBundle\\Controller\\Element\\AliasController' => 'getAliasControllerService',
            'AppBundle\\Controller\\Element\\ClipboardController' => 'getClipboardControllerService',
            'AppBundle\\Controller\\Element\\CreateController' => 'getCreateControllerService',
            'AppBundle\\Controller\\Element\\EditController' => 'getEditControllerService',
            'AppBundle\\Controller\\Element\\FileController' => 'getFileController2Service',
            'AppBundle\\Controller\\Element\\HistoryController' => 'getHistoryControllerService',
            'AppBundle\\Controller\\Element\\ShareController' => 'getShareControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\AccordionController' => 'getAccordionControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\AnnotationController' => 'getAnnotationControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\AttachmentController' => 'getAttachmentControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\ChapterTeaserController' => 'getChapterTeaserControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\ColorsController' => 'getColorsControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\ColumnsController' => 'getColumnsControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\ContactController' => 'getContactControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\ContactPersonController' => 'getContactPersonControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\CtaController' => 'getCtaControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\DoDontController' => 'getDoDontControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\FileTransferController' => 'getFileTransferControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\FramingController' => 'getFramingControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\HeadlineController' => 'getHeadlineControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\HtmlController' => 'getHtmlControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\IconList\\BackendController' => 'getBackendControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\IconList\\CategoryController' => 'getCategoryController2Service',
            'AppBundle\\Controller\\Element\\SmartBlock\\IconList\\CollectionController' => 'getCollectionControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\IconList\\IconController' => 'getIconControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\IconList\\ListController' => 'getListControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\IconList\\TagController' => 'getTagControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\ImageController' => 'getImageControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\InspirationController' => 'getInspirationControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\MediaCockpit\\BackendController' => 'getBackendController2Service',
            'AppBundle\\Controller\\Element\\SmartBlock\\MediaCockpit\\FrontendController' => 'getFrontendControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\PatternController' => 'getPatternControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\QrGeneratorController' => 'getQrGeneratorControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\ScormController' => 'getScormControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\SliderController' => 'getSliderControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\SpacesController' => 'getSpacesControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\StageController' => 'getStageControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\TableController' => 'getTableControllerService',
            'AppBundle\\Controller\\Element\\SmartBlock\\VideoController' => 'getVideoControllerService',
            'AppBundle\\Controller\\Element\\SortController' => 'getSortControllerService',
            'AppBundle\\Controller\\Element\\ToolbarController' => 'getToolbarControllerService',
            'AppBundle\\Controller\\ErrorController' => 'getErrorControllerService',
            'AppBundle\\Controller\\Feature\\ConnectionController' => 'getConnectionControllerService',
            'AppBundle\\Controller\\Feature\\Connection\\MediaCockpitController' => 'getMediaCockpitControllerService',
            'AppBundle\\Controller\\Feature\\DownloadCenter\\CollectionController' => 'getCollectionController2Service',
            'AppBundle\\Controller\\Feature\\DownloadCenter\\DefaultController' => 'getDefaultController4Service',
            'AppBundle\\Controller\\Feature\\DownloadCenter\\EditController' => 'getEditController2Service',
            'AppBundle\\Controller\\Feature\\FormController' => 'getFormControllerService',
            'AppBundle\\Controller\\Feature\\MetricsController' => 'getMetricsControllerService',
            'AppBundle\\Controller\\Feature\\NewsController' => 'getNewsControllerService',
            'AppBundle\\Controller\\FileController' => 'getFileController3Service',
            'AppBundle\\Controller\\File\\ManageController' => 'getManageController2Service',
            'AppBundle\\Controller\\File\\TagController' => 'getTagController2Service',
            'AppBundle\\Controller\\File\\ThumbnailController' => 'getThumbnailControllerService',
            'AppBundle\\Controller\\File\\UploadController' => 'getUploadControllerService',
            'AppBundle\\Controller\\PluginController' => 'getPluginControllerService',
            'AppBundle\\Controller\\SearchController' => 'getSearchControllerService',
            'AppBundle\\Controller\\SettingsController' => 'getSettingsControllerService',
            'AppBundle\\Controller\\Settings\\Analytics\\DefaultController' => 'getDefaultController5Service',
            'AppBundle\\Controller\\Settings\\Analytics\\GraphLoginController' => 'getGraphLoginControllerService',
            'AppBundle\\Controller\\Settings\\CategoryController' => 'getCategoryController3Service',
            'AppBundle\\Controller\\Settings\\Category\\ApprovalController' => 'getApprovalController2Service',
            'AppBundle\\Controller\\Settings\\Category\\PublicController' => 'getPublicControllerService',
            'AppBundle\\Controller\\Settings\\ColorController' => 'getColorControllerService',
            'AppBundle\\Controller\\Settings\\Feature\\ApprovalController' => 'getApprovalController3Service',
            'AppBundle\\Controller\\Settings\\Feature\\ConnectionController' => 'getConnectionController2Service',
            'AppBundle\\Controller\\Settings\\Feature\\DefaultController' => 'getDefaultController6Service',
            'AppBundle\\Controller\\Settings\\Feature\\NewsCategoryController' => 'getNewsCategoryControllerService',
            'AppBundle\\Controller\\Settings\\Feature\\NewsController' => 'getNewsController2Service',
            'AppBundle\\Controller\\Settings\\Font\\AssetController' => 'getAssetControllerService',
            'AppBundle\\Controller\\Settings\\LocaleController' => 'getLocaleControllerService',
            'AppBundle\\Controller\\Settings\\PatternController' => 'getPatternController2Service',
            'AppBundle\\Controller\\Settings\\SmartTool\\FramingController' => 'getFramingController2Service',
            'AppBundle\\Controller\\Settings\\SmartTool\\Inspiration\\DefaultController' => 'getDefaultController7Service',
            'AppBundle\\Controller\\Settings\\SmartTool\\Inspiration\\EyeCatcherController' => 'getEyeCatcherControllerService',
            'AppBundle\\Controller\\Settings\\ThemeController' => 'getThemeController2Service',
            'AppBundle\\Controller\\Settings\\ToolInspirationController' => 'getToolInspirationControllerService',
            'AppBundle\\Controller\\SourceController' => 'getSourceControllerService',
            'AppBundle\\Controller\\UserController' => 'getUserControllerService',
            'AppBundle\\Controller\\User\\BookmarkController' => 'getBookmarkControllerService',
            'AppBundle\\Controller\\User\\PasswordResetController' => 'getPasswordResetControllerService',
            'AppBundle\\Controller\\User\\SecurityController' => 'getSecurityControllerService',
            'Doctrine\\Bundle\\DoctrineBundle\\Controller\\ProfilerController' => 'getProfilerControllerService',
            'HWI\\Bundle\\OAuthBundle\\Controller\\ConnectController' => 'getConnectControllerService',
            'HWI\\Bundle\\OAuthBundle\\Controller\\LoginController' => 'getLoginControllerService',
            'HWI\\Bundle\\OAuthBundle\\Controller\\RedirectToServiceController' => 'getRedirectToServiceControllerService',
            'Liip\\TestFixturesBundle\\Services\\DatabaseBackup\\MongodbDatabaseBackup' => 'getMongodbDatabaseBackupService',
            'Liip\\TestFixturesBundle\\Services\\DatabaseBackup\\MysqlDatabaseBackup' => 'getMysqlDatabaseBackupService',
            'Liip\\TestFixturesBundle\\Services\\DatabaseBackup\\SqliteDatabaseBackup' => 'getSqliteDatabaseBackupService',
            'Liip\\TestFixturesBundle\\Services\\DatabaseToolCollection' => 'getDatabaseToolCollectionService',
            'Liip\\TestFixturesBundle\\Services\\FixturesLoaderFactory' => 'getFixturesLoaderFactoryService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController' => 'getRedirectControllerService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController' => 'getTemplateControllerService',
            'cache.app_clearer' => 'getCache_AppClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.system_clearer' => 'getCache_SystemClearerService',
            'cache_warmer' => 'getCacheWarmerService',
            'console.command_loader' => 'getConsole_CommandLoaderService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'container.get_routing_condition_service' => 'getContainer_GetRoutingConditionServiceService',
            'craue.form.flow.storage' => 'getCraue_Form_Flow_StorageService',
            'error_controller' => 'getErrorController2Service',
            'httplug.client' => 'getHttplug_ClientService',
            'httplug.message_factory' => 'getHttplug_MessageFactoryService',
            'httplug.psr17_request_factory' => 'getHttplug_Psr17RequestFactoryService',
            'httplug.psr17_response_factory' => 'getHttplug_Psr17ResponseFactoryService',
            'httplug.psr17_server_request_factory' => 'getHttplug_Psr17ServerRequestFactoryService',
            'httplug.psr17_stream_factory' => 'getHttplug_Psr17StreamFactoryService',
            'httplug.psr17_uploaded_file_factory' => 'getHttplug_Psr17UploadedFileFactoryService',
            'httplug.psr17_uri_factory' => 'getHttplug_Psr17UriFactoryService',
            'httplug.psr18_client' => 'getHttplug_Psr18ClientService',
            'httplug.stream_factory' => 'getHttplug_StreamFactoryService',
            'httplug.uri_factory' => 'getHttplug_UriFactoryService',
            'hwi_oauth.resource_ownermap.main' => 'getHwiOauth_ResourceOwnermap_MainService',
            'hwi_oauth.user_checker' => 'getHwiOauth_UserCheckerService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.deserialization_context_factory' => 'getJmsSerializer_DeserializationContextFactoryService',
            'jms_serializer.metadata_driver' => 'getJmsSerializer_MetadataDriverService',
            'jms_serializer.serialization_context_factory' => 'getJmsSerializer_SerializationContextFactoryService',
            'knp_menu.factory' => 'getKnpMenu_FactoryService',
            'knp_paginator' => 'getKnpPaginatorService',
            'routing.loader' => 'getRouting_LoaderService',
            'services_resetter' => 'getServicesResetterService',
            'test.client' => 'getTest_ClientService',
            'test.private_services_locator' => 'getTest_PrivateServicesLocatorService',
            'test.service_container' => 'getTest_ServiceContainerService',
            'web_profiler.controller.exception_panel' => 'getWebProfiler_Controller_ExceptionPanelService',
            'web_profiler.controller.profiler' => 'getWebProfiler_Controller_ProfilerService',
            'web_profiler.controller.router' => 'getWebProfiler_Controller_RouterService',
        ];
        $this->aliases = [
            'App\\Kernel' => 'kernel',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
        ];

        $this->privates['service_container'] = function () {
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/HttpKernelInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/KernelInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/RebootableInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/TerminableInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Kernel.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/framework-bundle/Kernel/MicroKernelTrait.php';
            include_once \dirname(__DIR__, 6).'/src/Kernel.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/event-dispatcher/EventSubscriberInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/ResponseListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/LocaleListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/ValidateRequestListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/DisallowRobotsIndexingListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/ErrorListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/CacheAttributeListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBagInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBag.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ParameterBag/FrozenParameterBag.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/container/src/ContainerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBagInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBag.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/runtime/RunnerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/runtime/Runner/Symfony/HttpKernelRunner.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/runtime/Runner/Symfony/ResponseRunner.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/runtime/RuntimeInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/runtime/GenericRuntime.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/runtime/SymfonyRuntime.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/HttpKernel.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-foundation/RequestStack.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-foundation/UrlHelper.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/config/ConfigCacheFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/config/ResourceCheckerConfigCacheFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/LocaleAwareListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/cache/src/CacheItemPoolInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Adapter/AdapterInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache-contracts/CacheInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/PruneableInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/service-contracts/ResetInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/ResettableInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Adapter/TraceableAdapter.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Marshaller/MarshallerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Marshaller/DefaultMarshaller.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation-contracts/TranslatorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation-contracts/LocaleAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation-contracts/TranslatorTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/IdentityTranslator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/AbstractSessionListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/SessionListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/service-contracts/ServiceProviderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/service-contracts/ServiceLocatorTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/dependency-injection/ServiceLocator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/asset/Packages.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/asset/Context/ContextInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/asset/Context/RequestStackContext.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/asset/VersionStrategy/VersionStrategyInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/asset/VersionStrategy/EmptyVersionStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/asset/PackageInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/asset/Package.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/asset/PathPackage.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/mailer/EventListener/MessageLoggerListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/TranslatorBagInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/Translator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/CacheWarmer/WarmableInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/framework-bundle/Translation/Translator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/Formatter/MessageFormatterInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/Formatter/IntlFormatterInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/Formatter/MessageFormatter.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/DebugHandlersListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Debug/FileLinkFormatter.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/stopwatch/Stopwatch.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ControllerResolverInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/TraceableControllerResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ArgumentResolverInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/TraceableArgumentResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Log/DebugLoggerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/monolog-bridge/Processor/CompatibilityProcessor.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/monolog-bridge/Processor/DebugProcessor.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/RequestContext.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/expression-language/ExpressionFunctionProviderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/Matcher/ExpressionLanguageProvider.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/RouterListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/Reader.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/AnnotationReader.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/PsrCachedReader.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache-contracts/CacheTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Traits/ContractsTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Traits/ProxyTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Adapter/PhpArrayAdapter.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyTypeExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyDescriptionExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyAccessExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyListExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyInitializableExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/property-info/PropertyInfoExtractor.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Extension/ExtensionInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Extension/AbstractExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/CsrfExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/ResolvedFormTypeFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/Extension/DataCollector/Proxy/ResolvedTypeFactoryDataCollectorProxy.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/ResolvedFormTypeFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/FormRegistryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/FormRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/FormFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/FormFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/FormExtensionInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/Extension/DependencyInjection/DependencyInjectionExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/ValidatorBuilder.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Validation.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/ConstraintValidatorFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/ContainerConstraintValidatorFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Mapping/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Mapping/Loader/AutoMappingTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Mapping/Loader/PropertyInfoLoader.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Profiler/ProfilerStorageInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Profiler/FileProfilerStorage.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/EventListener/ProfilerListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/DataCollectorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/DataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/LateDataCollectorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/ConfigDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/RequestDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/AjaxDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/ExceptionDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/EventDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/LoggerDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/TimeDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/MemoryDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/DataCollector/RouterDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/framework-bundle/DataCollector/RouterDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/DataCollector/CacheDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/Extension/DataCollector/FormDataExtractorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/Extension/DataCollector/FormDataExtractor.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/Extension/DataCollector/FormDataCollectorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/form/Extension/DataCollector/FormDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Mapping/Factory/MetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Validator/ValidatorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/Validator/TraceableValidator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/DataCollector/ValidatorDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/DataCollector/TranslationDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/mailer/DataCollector/MessageDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-client/HttpClientTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-client/DataCollector/HttpClientDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/doctrine-bridge/DataCollector/DoctrineDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/DataCollector/DoctrineDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/ConnectionFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/ConnectionRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/ManagerRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/AbstractManagerRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/doctrine-bridge/ManagerRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Registry.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Twig/DoctrineExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Schema/SchemaManagerFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Schema/LegacySchemaManagerFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Configuration.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Driver/Middleware.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Logging/Middleware.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Middleware/ConnectionNameAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Middleware/DebugMiddleware.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/event-manager/src/EventManager.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/doctrine-bridge/ContainerAwareEventManager.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/dbal/src/Connection.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/doctrine-bridge/Middleware/Debug/DebugDataHolder.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Middleware/BacktraceDebugDataHolder.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Repository/RepositoryFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Repository/ContainerRepositoryFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/validator/ObjectInitializerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/doctrine-bridge/Validator/DoctrineInitializer.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/NamingStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/UnderscoreNamingStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/QuoteStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Internal/SQLResultCasing.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/DefaultQuoteStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Configuration.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/MappingDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/Driver/CompatibilityAnnotationDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/ColocatedMappingDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/Driver/AttributeDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/log/src/LoggerAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/log/src/LoggerAwareTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Adapter/ArrayAdapter.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/EntityListenerResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Mapping/EntityListenerServiceResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Mapping/ContainerEntityListenerResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/ManagerConfigurator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/doctrine-bridge/Validator/DoctrineLoader.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authentication/Token/Storage/TokenStorageInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/service-contracts/ServiceSubscriberInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authentication/Token/Storage/UsageTrackingTokenStorage.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authentication/Token/Storage/TokenStorage.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/AuthorizationCheckerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Security.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-bundle/Security.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authentication/AuthenticationTrustResolverInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authentication/AuthenticationTrustResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Role/RoleHierarchyInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Role/RoleHierarchy.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Impersonate/ImpersonateUrlGenerator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/FirewallMapInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-bundle/Security/FirewallMap.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Logout/LogoutUrlGenerator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/EventListener/IsGrantedAttributeListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/expression-language/ExpressionLanguage.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/password-hasher/Hasher/PasswordHasherFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/password-hasher/Hasher/PasswordHasherFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/password-hasher/Hasher/UserPasswordHasherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/password-hasher/Hasher/UserPasswordHasher.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/LogoutUrlExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/SecurityExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-bundle/DataCollector/SecurityDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/AccessDecisionManagerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/TraceableAccessDecisionManager.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Firewall.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-bundle/EventListener/FirewallListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-bundle/Debug/TraceableFirewallListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/event-dispatcher/src/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/event-dispatcher-contracts/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/event-dispatcher/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/event-dispatcher/EventDispatcher.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Firewall/FirewallListenerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Firewall/AbstractListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-http/Firewall/ContextListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Cache/CacheInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Cache/FilesystemCache.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Extension/CoreExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Extension/EscaperExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Extension/OptimizerExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Extension/StagingExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/ExtensionSet.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Template.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/TemplateWrapper.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Environment.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/AppVariable.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Loader/FilesystemLoader.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Extension/ProfilerExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/ProfilerExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Profiler/Profile.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/DataCollector/TwigDataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/TranslationExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/AssetExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/CodeExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/RoutingExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/YamlExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/StopwatchExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/ExpressionExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/HttpKernelExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/HttpFoundationExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Extension/DebugExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bundle/DependencyInjection/Configurator/EnvironmentConfigurator.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/RuntimeLoader/RuntimeLoaderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/RuntimeLoader/ContainerRuntimeLoader.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/SerializerExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Extension/FormExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/extra-bundle/MissingExtensionSuggestor.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/intl-extra/IntlExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/string-extra/StringExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/psr/log/src/LoggerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/ResettableInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Logger.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/monolog-bridge/Logger.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ActivationStrategyInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/monolog-bridge/Handler/FingersCrossed/HttpCodeActivationStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ErrorLevelActivationStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/HandlerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/Handler.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Processor/ProcessorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Processor/PsrLogMessageProcessor.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/event-manager/src/EventSubscriber.php';
            include_once \dirname(__DIR__, 6).'/vendor/gedmo/doctrine-extensions/src/Mapping/MappedEventSubscriber.php';
            include_once \dirname(__DIR__, 6).'/vendor/gedmo/doctrine-extensions/src/Loggable/LoggableListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/stof/doctrine-extensions-bundle/src/EventListener/LoggerListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/EventListener/ControllerListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/EventListener/ParamConverterListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/ParamConverterManager.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/ParamConverterInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/DoctrineParamConverter.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/DateTimeParamConverter.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/Templating/TemplateGuesser.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/EventListener/TemplateListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/EventListener/HttpCacheListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/EventListener/SecurityListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/ExpressionLanguage.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/Security/ExpressionLanguage.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/EventListener/IsGrantedListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/Request/ArgumentNameConverter.php';
            include_once \dirname(__DIR__, 6).'/vendor/php-http/httplug-bundle/src/Discovery/ConfiguredClientsStrategyListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/php-http/httplug-bundle/src/Collector/PluginClientFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/php-http/message/src/Formatter.php';
            include_once \dirname(__DIR__, 6).'/vendor/php-http/message/src/Formatter/FullHttpMessageFormatter.php';
            include_once \dirname(__DIR__, 6).'/vendor/php-http/httplug-bundle/src/Collector/Formatter.php';
            include_once \dirname(__DIR__, 6).'/vendor/php-http/message/src/Formatter/CurlCommandFormatter.php';
            include_once \dirname(__DIR__, 6).'/vendor/php-http/httplug-bundle/src/Collector/Collector.php';
            include_once \dirname(__DIR__, 6).'/vendor/php-http/httplug-bundle/src/Collector/Twig/HttpMessageMarkupExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/php-http/httplug-bundle/src/Collector/PluginClientFactoryListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/src/Subscriber/SlidingPaginationSubscriber.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/src/Helper/Processor.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/src/Twig/Extension/PaginationExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-menu/src/Knp/Menu/Twig/Helper.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-menu/src/Knp/Menu/Matcher/MatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-menu/src/Knp/Menu/Matcher/Matcher.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-menu/src/Knp/Menu/Provider/MenuProviderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-menu/src/Knp/Menu/Provider/ChainProvider.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-menu/src/Knp/Menu/Renderer/RendererProviderInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-menu/src/Knp/Menu/Renderer/PsrProvider.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-menu/src/Knp/Menu/Util/MenuManipulator.php';
            include_once \dirname(__DIR__, 6).'/vendor/knplabs/knp-menu/src/Knp/Menu/Twig/MenuExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/Driver/DriverInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/Driver/LazyLoadingDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/Cache/CacheInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/Cache/ClearableCacheInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/Cache/FileCache.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer/src/Twig/SerializerBaseExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer/src/Twig/SerializerRuntimeExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer-bundle/Debug/DataCollector.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer/src/EventDispatcher/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer/src/EventDispatcher/EventDispatcher.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer/src/EventDispatcher/LazyEventDispatcher.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer-bundle/Debug/TraceableEventDispatcher.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer-bundle/Debug/RunsListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/MetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/AdvancedMetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer-bundle/Debug/TraceableMetadataFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer/src/Handler/HandlerRegistryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer-bundle/Debug/TraceableHandlerRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/Driver/FileLocatorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/Driver/AdvancedFileLocatorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer-bundle/Debug/TraceableFileLocator.php';
            include_once \dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Twig/Extension/OAuthExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Twig/Extension/FormFlowExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Util/FormFlowUtil.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/EventListener/SaveLastVisitedListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/EventSubscriber/AccessTokenEventSubscriber.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/EventSubscriber/FirewallEventSubscriber.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/EventSubscriber/LocaleEventSubscriber.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/ObjectRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/collections/src/Selectable.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Repository/ServiceEntityRepositoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/var-exporter/Internal/LazyObjectTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/var-exporter/LazyGhostTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Repository/LazyServiceEntityRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Repository/ServiceEntityRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Category/NotNewAnymoreRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Component/Interfaces/HasUserGroupRepositoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Domain/Interfaces/EntityRepository/SluggableEntityRepositoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/CategoryRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Domain/Interfaces/File/IsFilePositionRepositoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/ChainFilePositionRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Component/MenuAside/CustomLinkRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/ConfigRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Connection/Mediacockpit/AssetRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Domain/Interfaces/EntityRepository/CachedEntityRepositoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Connection/Mediacockpit/AttributeRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Connection/Mediacockpit/CollectionRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/ConnectionRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/DashboardRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Component/Repository/AbstractCommentRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Element/ElementCommentRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Element/ElementFileRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/ElementRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/File/AttributeRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/FileRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/LogRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Metrics/CategoryByUserRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Metrics/CategoryGlobalRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Setting/ColorRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Setting/Feature/NewsCategoryRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Setting/Feature/NewsRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Setting/FontRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Setting/LocaleRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Setting/SourceRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/Setting/ThemeRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/AnnotationRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/Attribute/AttributeRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/Attribute/ChoiceRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/Attribute/ColorRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/Attribute/TureOrFalseRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/Attribute/UserRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Domain/Interfaces/HasOneElementRepositoryInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/ChapterTeaserItemRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/DoDontRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/IconCategoryRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/IconCollectionRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/IconDownloadRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/IconList/IconFileRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/IconList/IconRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/IconTagRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/Slider/SlideRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/SpacesSpaceRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartBlock/Table/TableRowRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartTool/Framing/FramingMediaRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartTool/Inspiration/EyeCatcherRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartTool/Inspiration/InspirationFileRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartTool/Inspiration/InspirationRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartTool/Inspiration/InspirationTagRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SmartTool/Inspiration/InspirationTagTypeRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/SpaceRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/System/CronjobRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/TranslationRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/User/BookmarkRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/User/GroupRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/User/SettingsRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/UserRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/myHub/FileTransferRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Repository/myHub/QrCodeRepository.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/RequestContextAwareInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/Matcher/UrlMatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/Generator/UrlGeneratorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/RouterInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Router/PersistentQueryRouter.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Router/QueryFilterListener.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/CategoryService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Element/ElementService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Element/SmartBlock/HtmlService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Element/SmartBlock/IconListService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Domain/Traits/SerializerTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Feature/Connection/MediacockpitService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/File/PathService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/FileService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Setting/LocaleService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/SpaceService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/System/CronjobService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Component/Traits/HasTranslatorTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Twig/ActivityTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Twig/ConfigTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Twig/DashboardTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Twig/HelperTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Twig/LocaleTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Twig/LogTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Twig/NewsTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Twig/VendorTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/User/CommentService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/User/SettingsService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/UserService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/Vendor/AmazonWebServicesService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Services/myHub/QrCodeService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/CategoryTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/CommentTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Component/MenuAsideTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/CoreTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/CustomerTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/DashboardTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/AttributeTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/FileTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/AccordionTwigService.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/AliasTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/AnnotationTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/AttachmentTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/ChapterTeaserTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/ColorsTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/ColumnsTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/DoDontTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/FileTransferTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/GalleryTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/HtmlTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/IconListTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/MediacockpitTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/PatternTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/QrGeneratorTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/SliderTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/SpacesTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlock/TableTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartBlockTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartTool/FramingTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/SmartTool/InspirationTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Element/TranslationTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/ElementTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/Feature/ConnectionTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/FileTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/HelpTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/MenuTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/MetricsTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/PhpTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/RoutingTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/SettingTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/SpaceTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/StringTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/twig/twig/src/Extension/GlobalsInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/SystemTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/UploadTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/User/BookmarkTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/User/ImportTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/UserTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Twig/VendorTwigExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/web-profiler-bundle/Twig/WebProfilerExtension.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/var-dumper/Dumper/DataDumperInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/var-dumper/Cloner/DumperInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/var-dumper/Dumper/AbstractDumper.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/var-dumper/Dumper/CliDumper.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/var-dumper/Dumper/HtmlDumper.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-client-contracts/HttpClientInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-client/TraceableHttpClient.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-client/HttpClient.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Mapping/MappingDriver.php';
            include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/MappingDriverChain.php';
            include_once \dirname(__DIR__, 6).'/vendor/monolog/monolog/src/Monolog/Handler/NullHandler.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ContainerControllerResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/framework-bundle/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Controller/ArgumentResolver.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/AccessDecisionManager.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/Strategy/AccessDecisionStrategyInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/Strategy/AffirmativeStrategy.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/MetadataFactory.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer/src/Handler/HandlerRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/serializer/src/Handler/LazyHandlerRegistry.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/Driver/TraceableFileLocatorInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/jms/metadata/src/Driver/FileLocator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Traits/AbstractAdapterTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Adapter/AbstractAdapter.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Traits/FilesystemCommonTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Traits/FilesystemTrait.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/cache/Adapter/FilesystemAdapter.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/translation/DataCollectorTranslator.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/Matcher/RequestMatcherInterface.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/routing/Router.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/framework-bundle/Routing/Router.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/security-core/Authorization/AuthorizationChecker.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/event-dispatcher/Debug/TraceableEventDispatcher.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Debug/TraceableEventDispatcher.php';
            include_once \dirname(__DIR__, 6).'/vendor/symfony/http-kernel/Profiler/Profiler.php';
        };
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function load($file, $lazyLoad = true)
    {
        if (class_exists($class = __NAMESPACE__.'\\'.$file, false)) {
            return $class::do($this, $lazyLoad);
        }

        if ('.' === $file[-4]) {
            $class = substr($class, 0, -4);
        } else {
            $file .= '.php';
        }

        $service = require $this->containerDir.\DIRECTORY_SEPARATOR.$file;

        return class_exists($class, false) ? $class::do($this, $lazyLoad) : $service;
    }

    protected function createProxy($class, \Closure $factory)
    {
        class_exists($class, false) || require __DIR__.'/'.$class.'.php';

        return $factory();
    }

    /**
     * Gets the public '.container.private.profiler' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Profiler\Profiler
     */
    protected function get_Container_Private_ProfilerService()
    {
        $this->services['.container.private.profiler'] = $instance = new \Symfony\Component\HttpKernel\Profiler\Profiler(($this->privates['profiler.storage'] ??= new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage(('file:'.$this->targetDir.''.'/profiler'))), ($this->privates['monolog.logger.profiler'] ?? $this->getMonolog_Logger_ProfilerService()), false);

        $instance->add(($this->privates['data_collector.request'] ?? $this->getDataCollector_RequestService()));
        $instance->add(($this->privates['data_collector.time'] ?? $this->getDataCollector_TimeService()));
        $instance->add(($this->privates['data_collector.memory'] ??= new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector()));
        $instance->add(($this->privates['data_collector.validator'] ?? $this->getDataCollector_ValidatorService()));
        $instance->add(($this->privates['data_collector.ajax'] ??= new \Symfony\Component\HttpKernel\DataCollector\AjaxDataCollector()));
        $instance->add(($this->privates['data_collector.form'] ?? $this->getDataCollector_FormService()));
        $instance->add(($this->privates['data_collector.exception'] ??= new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector()));
        $instance->add(($this->privates['data_collector.logger'] ?? $this->getDataCollector_LoggerService()));
        $instance->add(($this->privates['data_collector.events'] ?? $this->getDataCollector_EventsService()));
        $instance->add(($this->privates['data_collector.router'] ??= new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector()));
        $instance->add(($this->privates['data_collector.cache'] ?? $this->getDataCollector_CacheService()));
        $instance->add(($this->privates['data_collector.translation'] ?? $this->getDataCollector_TranslationService()));
        $instance->add(($this->privates['data_collector.security'] ?? $this->getDataCollector_SecurityService()));
        $instance->add(($this->privates['data_collector.twig'] ?? $this->getDataCollector_TwigService()));
        $instance->add(($this->privates['data_collector.http_client'] ?? $this->getDataCollector_HttpClientService()));
        $instance->add(($this->privates['data_collector.doctrine'] ?? $this->getDataCollector_DoctrineService()));
        $instance->add(($this->privates['httplug.collector.collector'] ??= new \Http\HttplugBundle\Collector\Collector(0)));
        $instance->add(($this->privates['mailer.data_collector'] ?? $this->getMailer_DataCollectorService()));
        $instance->add(($this->privates['data_collector.jms_serializer'] ?? $this->getDataCollector_JmsSerializerService()));
        $instance->add(($this->privates['data_collector.config'] ?? $this->getDataCollector_ConfigService()));

        return $instance;
    }

    /**
     * Gets the public 'Symfony\Contracts\HttpClient\HttpClientInterface' shared service.
     *
     * @return \Symfony\Component\HttpClient\TraceableHttpClient
     */
    protected function getHttpClientInterfaceService()
    {
        $a = \Symfony\Component\HttpClient\HttpClient::create([], 6);
        $a->setLogger(($this->privates['monolog.logger.http_client'] ?? $this->getMonolog_Logger_HttpClientService()));

        return $this->services['Symfony\\Contracts\\HttpClient\\HttpClientInterface'] = new \Symfony\Component\HttpClient\TraceableHttpClient($a, ($this->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the public 'cache.app' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_AppService()
    {
        return $this->services['cache.app'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(($this->privates['cache.app.recorder_inner'] ?? $this->getCache_App_RecorderInnerService()));
    }

    /**
     * Gets the public 'cache.security_is_granted_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_SecurityIsGrantedAttributeExpressionLanguageService()
    {
        return $this->services['cache.security_is_granted_attribute_expression_language'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(($this->privates['cache.security_is_granted_attribute_expression_language.recorder_inner'] ?? $this->getCache_SecurityIsGrantedAttributeExpressionLanguage_RecorderInnerService()));
    }

    /**
     * Gets the public 'cache.system' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_SystemService()
    {
        return $this->services['cache.system'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(($this->privates['cache.system.recorder_inner'] ?? $this->getCache_System_RecorderInnerService()));
    }

    /**
     * Gets the public 'cache.validator_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_ValidatorExpressionLanguageService()
    {
        return $this->services['cache.validator_expression_language'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(($this->privates['cache.validator_expression_language.recorder_inner'] ?? $this->getCache_ValidatorExpressionLanguage_RecorderInnerService()));
    }

    /**
     * Gets the public 'craue_formflow_util' shared service.
     *
     * @return \Craue\FormFlowBundle\Util\FormFlowUtil
     */
    protected function getCraueFormflowUtilService()
    {
        return $this->services['craue_formflow_util'] = new \Craue\FormFlowBundle\Util\FormFlowUtil();
    }

    /**
     * Gets the public 'doctrine' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, $this->parameters['doctrine.connections'], $this->parameters['doctrine.entity_managers'], 'default', 'default');
    }

    /**
     * Gets the public 'doctrine.dbal.default_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        return $this->services['doctrine.dbal.default_connection'] = ($this->privates['doctrine.dbal.connection_factory'] ??= new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory([]))->createConnection(['url' => $this->getEnv('resolve:DATABASE_URL'), 'dbname_suffix' => '_test'.$this->getEnv('string:default::TEST_TOKEN'), 'driver' => 'pdo_mysql', 'host' => 'localhost', 'port' => NULL, 'user' => 'root', 'password' => NULL, 'driverOptions' => [], 'defaultTableOptions' => []], ($this->privates['doctrine.dbal.default_connection.configuration'] ?? $this->getDoctrine_Dbal_DefaultConnection_ConfigurationService()), ($this->privates['doctrine.dbal.default_connection.event_manager'] ?? $this->getDoctrine_Dbal_DefaultConnection_EventManagerService()), []);
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    protected function getDoctrine_Orm_DefaultEntityManagerService($lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $this->services['doctrine.orm.default_entity_manager'] = $this->createProxy('EntityManagerGhostA473c99', fn () => \EntityManagerGhostA473c99::createLazyGhost($this->getDoctrine_Orm_DefaultEntityManagerService(...)));
        }

        include_once \dirname(__DIR__, 6).'/vendor/doctrine/common/src/Proxy/Autoloader.php';
        include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/Proxy/Autoloader.php';
        include_once \dirname(__DIR__, 6).'/vendor/doctrine/persistence/src/Persistence/ObjectManager.php';
        include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManagerInterface.php';
        include_once \dirname(__DIR__, 6).'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php';

        $instance = ($lazyLoad->__construct(($this->services['doctrine.dbal.default_connection'] ?? $this->getDoctrine_Dbal_DefaultConnectionService()), ($this->privates['doctrine.orm.default_configuration'] ?? $this->getDoctrine_Orm_DefaultConfigurationService())) && false ?: $lazyLoad);

        ($this->privates['doctrine.orm.default_manager_configurator'] ??= new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'event_dispatcher' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher
     */
    protected function getEventDispatcherService()
    {
        $this->services['event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher(($this->privates['debug.event_dispatcher.inner'] ??= new \Symfony\Component\EventDispatcher\EventDispatcher()), ($this->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)), ($this->privates['monolog.logger.event'] ?? $this->getMonolog_Logger_EventService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));

        $instance->addListener('kernel.controller', [0 => #[\Closure(name: 'data_collector.router', class: 'Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RouterDataCollector')] function () {
            return ($this->privates['data_collector.router'] ??= new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [0 => #[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] function () {
            return ($this->privates['security.listener.user_provider'] ?? $this->load('getSecurity_Listener_UserProviderService'));
        }, 1 => 'checkPassport'], 1024);
        $instance->addListener('kernel.response', [0 => #[\Closure(name: 'security.context_listener.0', class: 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener')] function () {
            return ($this->privates['security.context_listener.0'] ?? $this->getSecurity_ContextListener_0Service());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'knp_paginator.subscriber.sliding_pagination', class: 'Knp\\Bundle\\PaginatorBundle\\Subscriber\\SlidingPaginationSubscriber')] function () {
            return ($this->privates['knp_paginator.subscriber.sliding_pagination'] ?? $this->getKnpPaginator_Subscriber_SlidingPaginationService());
        }, 1 => 'onKernelRequest'], 0);
        $instance->addListener('flow.previous_step_invalid', [0 => #[\Closure(name: 'craue.form.flow.event_listener.previous_step_invalid', class: 'Craue\\FormFlowBundle\\EventListener\\PreviousStepInvalidEventListener')] function () {
            return ($this->privates['craue.form.flow.event_listener.previous_step_invalid'] ?? $this->load('getCraue_Form_Flow_EventListener_PreviousStepInvalidService'));
        }, 1 => 'onPreviousStepInvalid'], 0);
        $instance->addListener('flow.flow_expired', [0 => #[\Closure(name: 'craue.form.flow.event_listener.flow_expired', class: 'Craue\\FormFlowBundle\\EventListener\\FlowExpiredEventListener')] function () {
            return ($this->privates['craue.form.flow.event_listener.flow_expired'] ?? $this->load('getCraue_Form_Flow_EventListener_FlowExpiredService'));
        }, 1 => 'onFlowExpired'], 0);
        $instance->addListener('kernel.response', [0 => #[\Closure(name: 'response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener')] function () {
            return ($this->privates['response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false));
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'setDefaultLocale'], 100);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'onKernelRequest'], 16);
        $instance->addListener('kernel.finish_request', [0 => #[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'validate_request_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener')] function () {
            return ($this->privates['validate_request_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener());
        }, 1 => 'onKernelRequest'], 256);
        $instance->addListener('kernel.response', [0 => #[\Closure(name: 'disallow_search_engine_index_response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DisallowRobotsIndexingListener')] function () {
            return ($this->privates['disallow_search_engine_index_response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener());
        }, 1 => 'onResponse'], -255);
        $instance->addListener('kernel.controller_arguments', [0 => #[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'onControllerArguments'], 0);
        $instance->addListener('kernel.exception', [0 => #[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'logKernelException'], 0);
        $instance->addListener('kernel.exception', [0 => #[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'onKernelException'], -128);
        $instance->addListener('kernel.response', [0 => #[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'removeCspHeader'], -128);
        $instance->addListener('kernel.controller_arguments', [0 => #[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] function () {
            return ($this->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener());
        }, 1 => 'onKernelControllerArguments'], 10);
        $instance->addListener('kernel.response', [0 => #[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] function () {
            return ($this->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener());
        }, 1 => 'onKernelResponse'], -10);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] function () {
            return ($this->privates['locale_aware_listener'] ?? $this->getLocaleAwareListenerService());
        }, 1 => 'onKernelRequest'], 15);
        $instance->addListener('kernel.finish_request', [0 => #[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] function () {
            return ($this->privates['locale_aware_listener'] ?? $this->getLocaleAwareListenerService());
        }, 1 => 'onKernelFinishRequest'], -15);
        $instance->addListener('console.error', [0 => #[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] function () {
            return ($this->privates['console.error_listener'] ?? $this->load('getConsole_ErrorListenerService'));
        }, 1 => 'onConsoleError'], -128);
        $instance->addListener('console.terminate', [0 => #[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] function () {
            return ($this->privates['console.error_listener'] ?? $this->load('getConsole_ErrorListenerService'));
        }, 1 => 'onConsoleTerminate'], -128);
        $instance->addListener('console.error', [0 => #[\Closure(name: 'console.suggest_missing_package_subscriber', class: 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SuggestMissingPackageSubscriber')] function () {
            return ($this->privates['console.suggest_missing_package_subscriber'] ??= new \Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber());
        }, 1 => 'onConsoleError'], 0);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'test.session.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] function () {
            return ($this->privates['test.session.listener'] ?? $this->getTest_Session_ListenerService());
        }, 1 => 'onKernelRequest'], 128);
        $instance->addListener('kernel.response', [0 => #[\Closure(name: 'test.session.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] function () {
            return ($this->privates['test.session.listener'] ?? $this->getTest_Session_ListenerService());
        }, 1 => 'onKernelResponse'], -1000);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [0 => #[\Closure(name: 'mailer.envelope_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\EnvelopeListener')] function () {
            return ($this->privates['mailer.envelope_listener'] ??= new \Symfony\Component\Mailer\EventListener\EnvelopeListener($this->getEnv('MAILER_SENDER'), []));
        }, 1 => 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [0 => #[\Closure(name: 'mailer.message_logger_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessageLoggerListener')] function () {
            return ($this->privates['mailer.message_logger_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessageLoggerListener());
        }, 1 => 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [0 => #[\Closure(name: 'mailer.messenger_transport_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessengerTransportListener')] function () {
            return ($this->privates['mailer.messenger_transport_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessengerTransportListener());
        }, 1 => 'onMessage'], 0);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] function () {
            return ($this->privates['debug.debug_handlers_listener'] ?? $this->getDebug_DebugHandlersListenerService());
        }, 1 => 'configure'], 2048);
        $instance->addListener('console.command', [0 => #[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] function () {
            return ($this->privates['debug.debug_handlers_listener'] ?? $this->getDebug_DebugHandlersListenerService());
        }, 1 => 'configure'], 2048);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelRequest'], 32);
        $instance->addListener('kernel.finish_request', [0 => #[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.exception', [0 => #[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelException'], -64);
        $instance->addListener('kernel.response', [0 => #[\Closure(name: 'profiler_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener')] function () {
            return ($this->privates['profiler_listener'] ?? $this->getProfilerListenerService());
        }, 1 => 'onKernelResponse'], -100);
        $instance->addListener('kernel.exception', [0 => #[\Closure(name: 'profiler_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener')] function () {
            return ($this->privates['profiler_listener'] ?? $this->getProfilerListenerService());
        }, 1 => 'onKernelException'], 0);
        $instance->addListener('kernel.terminate', [0 => #[\Closure(name: 'profiler_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener')] function () {
            return ($this->privates['profiler_listener'] ?? $this->getProfilerListenerService());
        }, 1 => 'onKernelTerminate'], -1024);
        $instance->addListener('kernel.controller', [0 => #[\Closure(name: 'data_collector.request', class: 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector')] function () {
            return ($this->privates['data_collector.request'] ?? $this->getDataCollector_RequestService());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.response', [0 => #[\Closure(name: 'data_collector.request', class: 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector')] function () {
            return ($this->privates['data_collector.request'] ?? $this->getDataCollector_RequestService());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.controller_arguments', [0 => #[\Closure(name: 'controller.is_granted_attribute_listener', class: 'Symfony\\Component\\Security\\Http\\EventListener\\IsGrantedAttributeListener')] function () {
            return ($this->privates['controller.is_granted_attribute_listener'] ?? $this->getController_IsGrantedAttributeListenerService());
        }, 1 => 'onKernelControllerArguments'], 20);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [0 => #[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] function () {
            return ($this->privates['security.listener.check_authenticator_credentials'] ?? $this->load('getSecurity_Listener_CheckAuthenticatorCredentialsService'));
        }, 1 => 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [0 => #[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] function () {
            return ($this->privates['security.listener.password_migrating'] ?? $this->load('getSecurity_Listener_PasswordMigratingService'));
        }, 1 => 'onLoginSuccess'], 0);
        $instance->addListener('debug.security.authorization.vote', [0 => #[\Closure(name: 'debug.security.voter.vote_listener', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\VoteListener')] function () {
            return ($this->privates['debug.security.voter.vote_listener'] ?? $this->load('getDebug_Security_Voter_VoteListenerService'));
        }, 1 => 'onVoterVote'], 0);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'debug.security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener')] function () {
            return ($this->privates['debug.security.firewall'] ?? $this->getDebug_Security_FirewallService());
        }, 1 => 'configureLogoutUrlGenerator'], 8);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'debug.security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener')] function () {
            return ($this->privates['debug.security.firewall'] ?? $this->getDebug_Security_FirewallService());
        }, 1 => 'onKernelRequest'], 8);
        $instance->addListener('kernel.finish_request', [0 => #[\Closure(name: 'debug.security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\Debug\\TraceableFirewallListener')] function () {
            return ($this->privates['debug.security.firewall'] ?? $this->getDebug_Security_FirewallService());
        }, 1 => 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.view', [0 => #[\Closure(name: 'controller.template_attribute_listener', class: 'Symfony\\Bridge\\Twig\\EventListener\\TemplateAttributeListener')] function () {
            return ($this->privates['controller.template_attribute_listener'] ?? $this->load('getController_TemplateAttributeListenerService'));
        }, 1 => 'onKernelView'], -128);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [0 => #[\Closure(name: 'twig.mailer.message_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessageListener')] function () {
            return ($this->privates['twig.mailer.message_listener'] ?? $this->load('getTwig_Mailer_MessageListenerService'));
        }, 1 => 'onMessage'], 0);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'stof_doctrine_extensions.event_listener.logger', class: 'Stof\\DoctrineExtensionsBundle\\EventListener\\LoggerListener')] function () {
            return ($this->privates['stof_doctrine_extensions.event_listener.logger'] ?? $this->getStofDoctrineExtensions_EventListener_LoggerService());
        }, 1 => 'onKernelRequest'], 0);
        $instance->addListener('kernel.controller', [0 => #[\Closure(name: 'sensio_framework_extra.controller.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener')] function () {
            return ($this->privates['sensio_framework_extra.controller.listener'] ?? $this->getSensioFrameworkExtra_Controller_ListenerService());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.controller', [0 => #[\Closure(name: 'sensio_framework_extra.converter.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener')] function () {
            return ($this->privates['sensio_framework_extra.converter.listener'] ?? $this->getSensioFrameworkExtra_Converter_ListenerService());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.controller', [0 => #[\Closure(name: 'sensio_framework_extra.view.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener')] function () {
            return ($this->privates['sensio_framework_extra.view.listener'] ?? $this->getSensioFrameworkExtra_View_ListenerService());
        }, 1 => 'onKernelController'], -128);
        $instance->addListener('kernel.view', [0 => #[\Closure(name: 'sensio_framework_extra.view.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener')] function () {
            return ($this->privates['sensio_framework_extra.view.listener'] ?? $this->getSensioFrameworkExtra_View_ListenerService());
        }, 1 => 'onKernelView'], 0);
        $instance->addListener('kernel.controller', [0 => #[\Closure(name: 'sensio_framework_extra.cache.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener')] function () {
            return ($this->privates['sensio_framework_extra.cache.listener'] ??= new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.response', [0 => #[\Closure(name: 'sensio_framework_extra.cache.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener')] function () {
            return ($this->privates['sensio_framework_extra.cache.listener'] ??= new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.controller_arguments', [0 => #[\Closure(name: 'sensio_framework_extra.security.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\SecurityListener')] function () {
            return ($this->privates['sensio_framework_extra.security.listener'] ?? $this->getSensioFrameworkExtra_Security_ListenerService());
        }, 1 => 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.controller_arguments', [0 => #[\Closure(name: 'framework_extra_bundle.event.is_granted', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener')] function () {
            return ($this->privates['framework_extra_bundle.event.is_granted'] ?? $this->getFrameworkExtraBundle_Event_IsGrantedService());
        }, 1 => 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'httplug.strategy_listener', class: 'Http\\HttplugBundle\\Discovery\\ConfiguredClientsStrategyListener')] function () {
            return ($this->privates['httplug.strategy_listener'] ??= new \Http\HttplugBundle\Discovery\ConfiguredClientsStrategyListener());
        }, 1 => 'onEvent'], 1024);
        $instance->addListener('console.command', [0 => #[\Closure(name: 'httplug.strategy_listener', class: 'Http\\HttplugBundle\\Discovery\\ConfiguredClientsStrategyListener')] function () {
            return ($this->privates['httplug.strategy_listener'] ??= new \Http\HttplugBundle\Discovery\ConfiguredClientsStrategyListener());
        }, 1 => 'onEvent'], 1024);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'Http\\HttplugBundle\\Collector\\PluginClientFactoryListener')] function () {
            return ($this->privates['Http\\HttplugBundle\\Collector\\PluginClientFactoryListener'] ?? $this->getPluginClientFactoryListenerService());
        }, 1 => 'onEvent'], 1024);
        $instance->addListener('console.command', [0 => #[\Closure(name: 'Http\\HttplugBundle\\Collector\\PluginClientFactoryListener')] function () {
            return ($this->privates['Http\\HttplugBundle\\Collector\\PluginClientFactoryListener'] ?? $this->getPluginClientFactoryListenerService());
        }, 1 => 'onEvent'], 1024);
        $instance->addListener('knp_pager.before', [0 => #[\Closure(name: 'knp_paginator.subscriber.paginate', class: 'Knp\\Component\\Pager\\Event\\Subscriber\\Paginate\\PaginationSubscriber')] function () {
            return ($this->privates['knp_paginator.subscriber.paginate'] ??= new \Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber());
        }, 1 => 'before'], 0);
        $instance->addListener('knp_pager.pagination', [0 => #[\Closure(name: 'knp_paginator.subscriber.paginate', class: 'Knp\\Component\\Pager\\Event\\Subscriber\\Paginate\\PaginationSubscriber')] function () {
            return ($this->privates['knp_paginator.subscriber.paginate'] ??= new \Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber());
        }, 1 => 'pagination'], 0);
        $instance->addListener('knp_pager.before', [0 => #[\Closure(name: 'knp_paginator.subscriber.sortable', class: 'Knp\\Component\\Pager\\Event\\Subscriber\\Sortable\\SortableSubscriber')] function () {
            return ($this->privates['knp_paginator.subscriber.sortable'] ??= new \Knp\Component\Pager\Event\Subscriber\Sortable\SortableSubscriber());
        }, 1 => 'before'], 1);
        $instance->addListener('knp_pager.before', [0 => #[\Closure(name: 'knp_paginator.subscriber.filtration', class: 'Knp\\Component\\Pager\\Event\\Subscriber\\Filtration\\FiltrationSubscriber')] function () {
            return ($this->privates['knp_paginator.subscriber.filtration'] ??= new \Knp\Component\Pager\Event\Subscriber\Filtration\FiltrationSubscriber());
        }, 1 => 'before'], 1);
        $instance->addListener('knp_pager.pagination', [0 => #[\Closure(name: 'knp_paginator.subscriber.sliding_pagination', class: 'Knp\\Bundle\\PaginatorBundle\\Subscriber\\SlidingPaginationSubscriber')] function () {
            return ($this->privates['knp_paginator.subscriber.sliding_pagination'] ?? $this->getKnpPaginator_Subscriber_SlidingPaginationService());
        }, 1 => 'pagination'], 1);
        $instance->addListener('AppBundle\\Domain\\Events\\AssetEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\SystemEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\SystemEventSubscriber'] ??= new \AppBundle\EventSubscriber\SystemEventSubscriber());
        }, 1 => 'addAssets'], 0);
        $instance->addListener('kernel.response', [0 => #[\Closure(name: 'AppBundle\\EventListener\\SaveLastVisitedListener')] function () {
            return ($this->privates['AppBundle\\EventListener\\SaveLastVisitedListener'] ?? $this->getSaveLastVisitedListenerService());
        }, 1 => 'onResponse'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\AccessTokenEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\AccessTokenEventSubscriber'] ?? $this->getAccessTokenEventSubscriberService());
        }, 1 => 'removeCookie'], 0);
        $instance->addListener('kernel.response', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\AccessTokenEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\AccessTokenEventSubscriber'] ?? $this->getAccessTokenEventSubscriberService());
        }, 1 => 'setRememberCookie'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Category\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Category\\AliasAndDuplicateEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Category\\AliasAndDuplicateEventSubscriber'] ?? $this->load('getAliasAndDuplicateEventSubscriberService'));
        }, 1 => 'createElements'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Category\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Category\\ApprovalEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Category\\ApprovalEventSubscriber'] ?? $this->load('getApprovalEventSubscriberService'));
        }, 1 => 'setHiddenForEditors'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Category\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Category\\GroupInheritanceEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Category\\GroupInheritanceEventSubscriber'] ?? $this->load('getGroupInheritanceEventSubscriberService'));
        }, 1 => 'setGroup'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Category\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Category\\GroupInheritanceEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Category\\GroupInheritanceEventSubscriber'] ?? $this->load('getGroupInheritanceEventSubscriberService'));
        }, 1 => 'setGroup'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CleanUpEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Category\\MarkedAsNewEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Category\\MarkedAsNewEventSubscriber'] ?? $this->load('getMarkedAsNewEventSubscriberService'));
        }, 1 => 'handleCleanUp'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Category\\ViewEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Category\\MarkedAsNewEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Category\\MarkedAsNewEventSubscriber'] ?? $this->load('getMarkedAsNewEventSubscriberService'));
        }, 1 => 'handleView'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Category\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Category\\PositionGlobalEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Category\\PositionGlobalEventSubscriber'] ?? $this->load('getPositionGlobalEventSubscriberService'));
        }, 1 => 'update'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Category\\RestoreEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Category\\PositionGlobalEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Category\\PositionGlobalEventSubscriber'] ?? $this->load('getPositionGlobalEventSubscriberService'));
        }, 1 => 'update'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Category\\SortEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Category\\PositionGlobalEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Category\\PositionGlobalEventSubscriber'] ?? $this->load('getPositionGlobalEventSubscriberService'));
        }, 1 => 'update'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Category\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Category\\SecurityInheritanceEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Category\\SecurityInheritanceEventSubscriber'] ?? $this->load('getSecurityInheritanceEventSubscriberService'));
        }, 1 => 'setSecurity'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Category\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Category\\SecurityInheritanceEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Category\\SecurityInheritanceEventSubscriber'] ?? $this->load('getSecurityInheritanceEventSubscriberService'));
        }, 1 => 'setSecurity'], 0);
        $instance->addListener('AppBundle\\Component\\Events\\CommentCreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\CommentMailSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\CommentMailSubscriber'] ?? $this->load('getCommentMailSubscriberService'));
        }, 1 => 'onCreate'], 0);
        $instance->addListener('AppBundle\\Component\\Events\\CommentCreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\CommentMentionSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\CommentMentionSubscriber'] ?? $this->load('getCommentMentionSubscriberService'));
        }, 1 => 'onNewComment'], 0);
        $instance->addListener('knp_pager.items', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Connection\\MediacockpitEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Connection\\MediacockpitEventSubscriber'] ?? $this->load('getMediacockpitEventSubscriberService'));
        }, 1 => 'pagination'], 99);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Connection\\MediacockpitEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Connection\\MediacockpitEventSubscriber'] ?? $this->load('getMediacockpitEventSubscriberService'));
        }, 1 => 'updateIconList'], 1);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\AccessTokenCleanUpSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\AccessTokenCleanUpSubscriber'] ?? $this->load('getAccessTokenCleanUpSubscriberService'));
        }, 1 => 'onNightly'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\AwsS3CronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\AwsS3CronjobSubscriber'] ?? $this->load('getAwsS3CronjobSubscriberService'));
        }, 1 => 'moveFiles'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\AwsS3CronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\AwsS3CronjobSubscriber'] ?? $this->load('getAwsS3CronjobSubscriberService'));
        }, 1 => 'updatePublicUrls'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\CombinedCleanUpCronjobEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\CombinedCleanUpCronjobEventSubscriber'] ?? $this->load('getCombinedCleanUpCronjobEventSubscriberService'));
        }, 1 => 'onNightly'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\FileCleanUpCronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\FileCleanUpCronjobSubscriber'] ?? $this->load('getFileCleanUpCronjobSubscriberService'));
        }, 1 => 'onNightly'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\FileTransferCleanUpCronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\FileTransferCleanUpCronjobSubscriber'] ?? $this->load('getFileTransferCleanUpCronjobSubscriberService'));
        }, 1 => 'onNightly'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'] ?? $this->load('getMediacockpitCronjobSubscriberService'));
        }, 1 => 'cleanUp'], 99);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'] ?? $this->load('getMediacockpitCronjobSubscriberService'));
        }, 1 => 'updateAssets'], 30);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'] ?? $this->load('getMediacockpitCronjobSubscriberService'));
        }, 1 => 'updateAttributes'], 40);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'] ?? $this->load('getMediacockpitCronjobSubscriberService'));
        }, 1 => 'updateCollections'], 50);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'] ?? $this->load('getMediacockpitCronjobSubscriberService'));
        }, 1 => 'updateFiles'], 20);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\MediacockpitCronjobSubscriber'] ?? $this->load('getMediacockpitCronjobSubscriberService'));
        }, 1 => 'updateIconLibraries'], 10);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\MetricsCleanUpCronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\MetricsCleanUpCronjobSubscriber'] ?? $this->load('getMetricsCleanUpCronjobSubscriberService'));
        }, 1 => 'categoriesByUser'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\SearchedCleanUpCronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\SearchedCleanUpCronjobSubscriber'] ?? $this->load('getSearchedCleanUpCronjobSubscriberService'));
        }, 1 => 'onNightly'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\System\\CronjobEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Cronjob\\TmpCleanUpCronjobSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Cronjob\\TmpCleanUpCronjobSubscriber'] ?? $this->load('getTmpCleanUpCronjobSubscriberService'));
        }, 1 => 'onNightly'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\AccordionSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\AccordionSubscriber'] ?? $this->load('getAccordionSubscriberService'));
        }, 1 => 'setPosition'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\DeleteEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\AccordionSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\AccordionSubscriber'] ?? $this->load('getAccordionSubscriberService'));
        }, 1 => 'deleteChildren'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\AnnotationSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\AnnotationSubscriber'] ?? $this->load('getAnnotationSubscriberService'));
        }, 1 => 'saveAnnotations'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\AnnotationSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\AnnotationSubscriber'] ?? $this->load('getAnnotationSubscriberService'));
        }, 1 => 'saveAnnotations'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\PrepareEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\AnnotationSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\AnnotationSubscriber'] ?? $this->load('getAnnotationSubscriberService'));
        }, 1 => 'prepareElement'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\AnnotationSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\AnnotationSubscriber'] ?? $this->load('getAnnotationSubscriberService'));
        }, 1 => 'cloneElement'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\AttachmentSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\AttachmentSubscriber'] ??= new \AppBundle\EventSubscriber\Element\AttachmentSubscriber());
        }, 1 => 'setVersion'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\ChapterTeaserEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\ChapterTeaserEventSubscriber'] ?? $this->load('getChapterTeaserEventSubscriberService'));
        }, 1 => 'clone'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\ContactPersonSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\ContactPersonSubscriber'] ??= new \AppBundle\EventSubscriber\Element\ContactPersonSubscriber());
        }, 1 => 'updateHasAttribute'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\ContactPersonSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\ContactPersonSubscriber'] ??= new \AppBundle\EventSubscriber\Element\ContactPersonSubscriber());
        }, 1 => 'updateHasAttribute'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\DoDontSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\DoDontSubscriber'] ?? $this->load('getDoDontSubscriberService'));
        }, 1 => 'clone'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\BuildQuickEditFormEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\GallerySubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\GallerySubscriber'] ??= new \AppBundle\EventSubscriber\Element\GallerySubscriber());
        }, 1 => 'buildQuickEdit'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\IconListSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\IconListSubscriber'] ?? $this->load('getIconListSubscriberService'));
        }, 1 => 'clone'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\IconListSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\IconListSubscriber'] ?? $this->load('getIconListSubscriberService'));
        }, 1 => 'updateIcons'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\File\\UsageEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\IconListSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\IconListSubscriber'] ?? $this->load('getIconListSubscriberService'));
        }, 1 => 'countFileUsage'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\File\\DeleteEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\IconListSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\IconListSubscriber'] ?? $this->load('getIconListSubscriberService'));
        }, 1 => 'removeIcon'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\File\\DetachEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\IconListSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\IconListSubscriber'] ?? $this->load('getIconListSubscriberService'));
        }, 1 => 'removeIcon'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\ImageSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\ImageSubscriber'] ??= new \AppBundle\EventSubscriber\Element\ImageSubscriber());
        }, 1 => 'create'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\PrepareEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\NewsSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\NewsSubscriber'] ??= new \AppBundle\EventSubscriber\Element\NewsSubscriber());
        }, 1 => 'prepare'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\PrepareEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\NoteSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\NoteSubscriber'] ??= new \AppBundle\EventSubscriber\Element\NoteSubscriber());
        }, 1 => 'prepare'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\SliderSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\SliderSubscriber'] ?? $this->load('getSliderSubscriberService'));
        }, 1 => 'clone'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\SpacesEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\SpacesEventSubscriber'] ?? $this->load('getSpacesEventSubscriberService'));
        }, 1 => 'clone'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\BuildQuickEditFormEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\StageSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\StageSubscriber'] ??= new \AppBundle\EventSubscriber\Element\StageSubscriber());
        }, 1 => 'buildQuickEditDashboard'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\TableSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\TableSubscriber'] ?? $this->load('getTableSubscriberService'));
        }, 1 => 'clone'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\BuildQuickEditFormEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Element\\TextSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Element\\TextSubscriber'] ??= new \AppBundle\EventSubscriber\Element\TextSubscriber());
        }, 1 => 'buildQuickEdit'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\DeleteEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementAliasEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementAliasEventSubscriber'] ?? $this->load('getElementAliasEventSubscriberService'));
        }, 1 => 'delete'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementAliasEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementAliasEventSubscriber'] ?? $this->load('getElementAliasEventSubscriberService'));
        }, 1 => 'update'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\PrepareEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementAttributesEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementAttributesEventSubscriber'] ?? $this->load('getElementAttributesEventSubscriberService'));
        }, 1 => 'prepare'], 100);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementAttributesEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementAttributesEventSubscriber'] ?? $this->load('getElementAttributesEventSubscriberService'));
        }, 1 => 'createOrUpdate'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementAttributesEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementAttributesEventSubscriber'] ?? $this->load('getElementAttributesEventSubscriberService'));
        }, 1 => 'createOrUpdate'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementAttributesEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementAttributesEventSubscriber'] ?? $this->load('getElementAttributesEventSubscriberService'));
        }, 1 => 'clone'], 255);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'position'], 255);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'randomId'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\InsertEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'position'], 255);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\InsertEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'parent'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\PrepareEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'user'], 255);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\PrepareEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'parent'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'clonePrepare'], 255);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'cloneChildren'], 10);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'cloneTranslations'], 5);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'cloneFiles'], 5);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'randomId'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CloneEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementEventSubscriber'] ?? $this->load('getElementEventSubscriberService'));
        }, 1 => 'clonePersist'], -255);
        $instance->addListener('AppBundle\\Domain\\Events\\File\\DeleteEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementFileEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementFileEventSubscriber'] ?? $this->load('getElementFileEventSubscriberService'));
        }, 1 => 'deleteFile'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\File\\DetachEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementFileEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementFileEventSubscriber'] ?? $this->load('getElementFileEventSubscriberService'));
        }, 1 => 'detachFile'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementUploadEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementUploadEventSubscriber'] ?? $this->load('getElementUploadEventSubscriberService'));
        }, 1 => 'save'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\ElementUploadEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\ElementUploadEventSubscriber'] ?? $this->load('getElementUploadEventSubscriberService'));
        }, 1 => 'save'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\File\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\File\\AttributeEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\File\\AttributeEventSubscriber'] ??= new \AppBundle\EventSubscriber\File\AttributeEventSubscriber(\dirname(__DIR__, 6)));
        }, 1 => 'setFileSize'], 0);
        $instance->addListener('kernel.controller', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\FirewallEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\FirewallEventSubscriber'] ?? $this->getFirewallEventSubscriberService());
        }, 1 => 'handleRequest'], 1000);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\LocaleEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\LocaleEventSubscriber'] ?? $this->getLocaleEventSubscriberService());
        }, 1 => 'dotEnv'], 1024);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\LocaleEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\LocaleEventSubscriber'] ?? $this->getLocaleEventSubscriberService());
        }, 1 => 'override'], 20);
        $instance->addListener('AppBundle\\Domain\\Events\\Menu\\CategoryMenuEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Menu\\CategoryMenuSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Menu\\CategoryMenuSubscriber'] ?? $this->load('getCategoryMenuSubscriberService'));
        }, 1 => 'category'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Menu\\CategoryDefaultSpaceMenuEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Menu\\CategoryMenuSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Menu\\CategoryMenuSubscriber'] ?? $this->load('getCategoryMenuSubscriberService'));
        }, 1 => 'category'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Menu\\SettingsMenuEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Menu\\SettingsMenuEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Menu\\SettingsMenuEventSubscriber'] ?? $this->load('getSettingsMenuEventSubscriberService'));
        }, 1 => 'create'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Menu\\DefaultIndexMenuEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Menu\\SpacesMenuSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Menu\\SpacesMenuSubscriber'] ?? $this->load('getSpacesMenuSubscriberService'));
        }, 1 => 'addSpaces'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Space\\DeleteEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\SpaceEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\SpaceEventSubscriber'] ?? $this->load('getSpaceEventSubscriberService'));
        }, 1 => 'deleteCategories'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\File\\UsageEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\SpaceEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\SpaceEventSubscriber'] ?? $this->load('getSpaceEventSubscriberService'));
        }, 1 => 'getFileUsage'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Category\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\SpaceEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\SpaceEventSubscriber'] ?? $this->load('getSpaceEventSubscriberService'));
        }, 1 => 'updateCategory'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\Element\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\Tool\\InspirationSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\Tool\\InspirationSubscriber'] ?? $this->load('getInspirationSubscriberService'));
        }, 1 => 'update'], 0);
        $instance->addListener('security.authentication.success', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\UserSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'countAndRememberLastLogin'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\User\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\UserSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'invitationMail'], 1);
        $instance->addListener('AppBundle\\Domain\\Events\\User\\CreateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\UserSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'rolesAndGroups'], 0);
        $instance->addListener('security.interactive_login', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\UserSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'localeOnLogin'], 0);
        $instance->addListener('security.switch_user', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\UserSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'onSwitchUser'], 0);
        $instance->addListener('AppBundle\\Domain\\Events\\User\\UpdateEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\UserSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'rolesAndGroups'], 0);
        $instance->addListener('kernel.request', [0 => #[\Closure(name: 'AppBundle\\Router\\QueryFilterListener')] function () {
            return ($this->privates['AppBundle\\Router\\QueryFilterListener'] ??= new \AppBundle\Router\QueryFilterListener());
        }, 1 => 'onRequest'], -8);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [0 => #[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] function () {
            return ($this->privates['security.listener.csrf_protection'] ?? $this->load('getSecurity_Listener_CsrfProtectionService'));
        }, 1 => 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => #[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] function () {
            return ($this->privates['security.logout.listener.csrf_token_clearing'] ?? $this->load('getSecurity_Logout_Listener_CsrfTokenClearingService'));
        }, 1 => 'onLogout'], 0);

        return $instance;
    }

    /**
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected function getHttpKernelService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['http_kernel'])) {
            return $this->services['http_kernel'];
        }
        $b = ($this->privates['debug.argument_resolver'] ?? $this->getDebug_ArgumentResolverService());

        if (isset($this->services['http_kernel'])) {
            return $this->services['http_kernel'];
        }

        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel($a, ($this->privates['debug.controller_resolver'] ?? $this->getDebug_ControllerResolverService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $b, true);
    }

    /**
     * Gets the public 'jms_serializer.authorization_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker
     */
    protected function getJmsSerializer_AuthorizationCheckerService()
    {
        $a = ($this->privates['debug.security.access.decision_manager'] ?? $this->getDebug_Security_Access_DecisionManagerService());

        if (isset($this->services['jms_serializer.authorization_checker'])) {
            return $this->services['jms_serializer.authorization_checker'];
        }

        return $this->services['jms_serializer.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()), $a, false, false);
    }

    /**
     * Gets the public 'knp_menu.matcher' shared service.
     *
     * @return \Knp\Menu\Matcher\Matcher
     */
    protected function getKnpMenu_MatcherService()
    {
        return $this->services['knp_menu.matcher'] = new \Knp\Menu\Matcher\Matcher(new RewindableGenerator(function () {
            yield 0 => ($this->privates['knp_menu.voter.router'] ?? $this->load('getKnpMenu_Voter_RouterService'));
            yield 1 => ($this->privates['AppBundle\\Component\\Menu\\RouteVoter'] ?? $this->load('getRouteVoterService'));
        }, 2));
    }

    /**
     * Gets the public 'monolog.logger.deprecation' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_DeprecationService()
    {
        $this->services['monolog.logger.deprecation'] = $instance = new \Symfony\Bridge\Monolog\Logger('deprecation');

        $instance->pushProcessor(($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($instance);

        return $instance;
    }

    /**
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected function getRequestStackService()
    {
        return $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the public 'router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected function getRouterService()
    {
        $this->services['router'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'routing.loader' => ['services', 'routing.loader', 'getRouting_LoaderService', true],
        ], [
            'routing.loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]))->withContext('router.default', $this), 'kernel::loadRoutes', ['cache_dir' => $this->targetDir.'', 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\CompiledUrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\CompiledUrlGeneratorDumper', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableCompiledUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper', 'strict_requirements' => true, 'resource_type' => 'service'], ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService()), ($this->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this)), ($this->privates['monolog.logger.router'] ?? $this->getMonolog_Logger_RouterService()), $this->getEnv('string:APP_LOCALE'));

        $instance->setConfigCacheFactory(($this->privates['config_cache_factory'] ?? $this->getConfigCacheFactoryService()));
        $instance->addExpressionLanguageProvider(($this->privates['router.expression_language_provider'] ?? $this->getRouter_ExpressionLanguageProviderService()));

        return $instance;
    }

    /**
     * Gets the public 'translator' shared service.
     *
     * @return \Symfony\Component\Translation\DataCollectorTranslator
     */
    protected function getTranslatorService()
    {
        return $this->services['translator'] = new \Symfony\Component\Translation\DataCollectorTranslator(($this->privates['translator.default'] ?? $this->getTranslator_DefaultService()));
    }

    /**
     * Gets the private '.debug.hwi_oauth.http_client' shared service.
     *
     * @return \Symfony\Component\HttpClient\TraceableHttpClient
     */
    protected function get_Debug_HwiOauth_HttpClientService()
    {
        return $this->privates['.debug.hwi_oauth.http_client'] = new \Symfony\Component\HttpClient\TraceableHttpClient(\Symfony\Component\HttpClient\HttpClient::create(), ($this->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.doctrine.orm.default_metadata_driver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver
     */
    protected function get_Doctrine_Orm_DefaultMetadataDriverService()
    {
        $a = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();

        $b = ($this->privates['doctrine.orm.default_attribute_metadata_driver'] ??= new \Doctrine\ORM\Mapping\Driver\AttributeDriver([0 => (\dirname(__DIR__, 6).'/src/Entity'), 1 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Entity'), 2 => (\dirname(__DIR__, 6).'/vendor/gedmo/doctrine-extensions/src/Loggable/Entity')]));

        $a->addDriver($b, 'App\\Entity');
        $a->addDriver($b, 'AppBundle\\Entity');
        $a->addDriver($b, 'Gedmo\\Loggable\\Entity');

        return $this->privates['.doctrine.orm.default_metadata_driver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($a, ($this->privates['.service_locator.KLVvNIq'] ?? $this->get_ServiceLocator_KLVvNIqService()));
    }

    /**
     * Gets the private '.service_locator.KLVvNIq' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function get_ServiceLocator_KLVvNIqService()
    {
        return $this->privates['.service_locator.KLVvNIq'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ]);
    }

    /**
     * Gets the private '.service_locator.a1R7fuj' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function get_ServiceLocator_A1R7fujService()
    {
        return $this->privates['.service_locator.a1R7fuj'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'security.firewall.map.context.login' => ['privates', 'security.firewall.map.context.login', 'getSecurity_Firewall_Map_Context_LoginService', true],
            'security.firewall.map.context.main' => ['privates', 'security.firewall.map.context.main', 'getSecurity_Firewall_Map_Context_MainService', true],
            'security.firewall.map.context.public' => ['privates', 'security.firewall.map.context.public', 'getSecurity_Firewall_Map_Context_PublicService', true],
        ], [
            'security.firewall.map.context.login' => '?',
            'security.firewall.map.context.main' => '?',
            'security.firewall.map.context.public' => '?',
        ]);
    }

    /**
     * Gets the private 'AppBundle\EventListener\SaveLastVisitedListener' shared autowired service.
     *
     * @return \AppBundle\EventListener\SaveLastVisitedListener
     */
    protected function getSaveLastVisitedListenerService()
    {
        $a = ($this->privates['security.helper'] ?? $this->getSecurity_HelperService());

        if (isset($this->privates['AppBundle\\EventListener\\SaveLastVisitedListener'])) {
            return $this->privates['AppBundle\\EventListener\\SaveLastVisitedListener'];
        }
        $b = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->privates['AppBundle\\EventListener\\SaveLastVisitedListener'])) {
            return $this->privates['AppBundle\\EventListener\\SaveLastVisitedListener'];
        }

        return $this->privates['AppBundle\\EventListener\\SaveLastVisitedListener'] = new \AppBundle\EventListener\SaveLastVisitedListener($a, $b);
    }

    /**
     * Gets the private 'AppBundle\EventSubscriber\AccessTokenEventSubscriber' shared autowired service.
     *
     * @return \AppBundle\EventSubscriber\AccessTokenEventSubscriber
     */
    protected function getAccessTokenEventSubscriberService()
    {
        return $this->privates['AppBundle\\EventSubscriber\\AccessTokenEventSubscriber'] = new \AppBundle\EventSubscriber\AccessTokenEventSubscriber(($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()));
    }

    /**
     * Gets the private 'AppBundle\EventSubscriber\FirewallEventSubscriber' shared autowired service.
     *
     * @return \AppBundle\EventSubscriber\FirewallEventSubscriber
     */
    protected function getFirewallEventSubscriberService()
    {
        $a = ($this->privates['AppBundle\\Services\\SpaceService'] ?? $this->getSpaceServiceService());

        if (isset($this->privates['AppBundle\\EventSubscriber\\FirewallEventSubscriber'])) {
            return $this->privates['AppBundle\\EventSubscriber\\FirewallEventSubscriber'];
        }
        $b = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\EventSubscriber\\FirewallEventSubscriber'])) {
            return $this->privates['AppBundle\\EventSubscriber\\FirewallEventSubscriber'];
        }

        return $this->privates['AppBundle\\EventSubscriber\\FirewallEventSubscriber'] = new \AppBundle\EventSubscriber\FirewallEventSubscriber(($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()), $a, $b);
    }

    /**
     * Gets the private 'AppBundle\EventSubscriber\LocaleEventSubscriber' shared autowired service.
     *
     * @return \AppBundle\EventSubscriber\LocaleEventSubscriber
     */
    protected function getLocaleEventSubscriberService()
    {
        return $this->privates['AppBundle\\EventSubscriber\\LocaleEventSubscriber'] = new \AppBundle\EventSubscriber\LocaleEventSubscriber(($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\CategoryRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\CategoryRepository
     */
    protected function getCategoryRepositoryService()
    {
        $a = ($this->services['jms_serializer.authorization_checker'] ?? $this->getJmsSerializer_AuthorizationCheckerService());

        if (isset($this->privates['AppBundle\\Repository\\CategoryRepository'])) {
            return $this->privates['AppBundle\\Repository\\CategoryRepository'];
        }

        return $this->privates['AppBundle\\Repository\\CategoryRepository'] = new \AppBundle\Repository\CategoryRepository(($this->services['doctrine'] ?? $this->getDoctrineService()), $a);
    }

    /**
     * Gets the private 'AppBundle\Repository\Category\NotNewAnymoreRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Category\NotNewAnymoreRepository
     */
    protected function getNotNewAnymoreRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Category\\NotNewAnymoreRepository'] = new \AppBundle\Repository\Category\NotNewAnymoreRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\ChainFilePositionRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\ChainFilePositionRepository
     */
    protected function getChainFilePositionRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\ChainFilePositionRepository'] = new \AppBundle\Repository\ChainFilePositionRepository([0 => ($this->privates['AppBundle\\Repository\\Element\\ElementFileRepository'] ?? $this->getElementFileRepositoryService()), 1 => ($this->privates['AppBundle\\Repository\\SmartBlock\\IconList\\IconFileRepository'] ?? $this->getIconFileRepositoryService()), 2 => ($this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationFileRepository'] ?? $this->getInspirationFileRepositoryService())]);
    }

    /**
     * Gets the private 'AppBundle\Repository\Component\MenuAside\CustomLinkRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Component\MenuAside\CustomLinkRepository
     */
    protected function getCustomLinkRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Component\\MenuAside\\CustomLinkRepository'] = new \AppBundle\Repository\Component\MenuAside\CustomLinkRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\ConfigRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\ConfigRepository
     */
    protected function getConfigRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\ConfigRepository'] = new \AppBundle\Repository\ConfigRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\ConnectionRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\ConnectionRepository
     */
    protected function getConnectionRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\ConnectionRepository'] = new \AppBundle\Repository\ConnectionRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Connection\Mediacockpit\AssetRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Connection\Mediacockpit\AssetRepository
     */
    protected function getAssetRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\AssetRepository'] = new \AppBundle\Repository\Connection\Mediacockpit\AssetRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Connection\Mediacockpit\AttributeRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Connection\Mediacockpit\AttributeRepository
     */
    protected function getAttributeRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\AttributeRepository'] = new \AppBundle\Repository\Connection\Mediacockpit\AttributeRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Connection\Mediacockpit\CollectionRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Connection\Mediacockpit\CollectionRepository
     */
    protected function getCollectionRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\CollectionRepository'] = new \AppBundle\Repository\Connection\Mediacockpit\CollectionRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\DashboardRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\DashboardRepository
     */
    protected function getDashboardRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\DashboardRepository'] = new \AppBundle\Repository\DashboardRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\ElementRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\ElementRepository
     */
    protected function getElementRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\ElementRepository'] = new \AppBundle\Repository\ElementRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Element\ElementCommentRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Element\ElementCommentRepository
     */
    protected function getElementCommentRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Element\\ElementCommentRepository'] = new \AppBundle\Repository\Element\ElementCommentRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Element\ElementFileRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Element\ElementFileRepository
     */
    protected function getElementFileRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Element\\ElementFileRepository'] = new \AppBundle\Repository\Element\ElementFileRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\FileRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\FileRepository
     */
    protected function getFileRepositoryService()
    {
        $a = ($this->services['jms_serializer.authorization_checker'] ?? $this->getJmsSerializer_AuthorizationCheckerService());

        if (isset($this->privates['AppBundle\\Repository\\FileRepository'])) {
            return $this->privates['AppBundle\\Repository\\FileRepository'];
        }
        $b = ($this->privates['AppBundle\\Services\\SpaceService'] ?? $this->getSpaceServiceService());

        if (isset($this->privates['AppBundle\\Repository\\FileRepository'])) {
            return $this->privates['AppBundle\\Repository\\FileRepository'];
        }

        return $this->privates['AppBundle\\Repository\\FileRepository'] = new \AppBundle\Repository\FileRepository($a, $b, ($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\File\AttributeRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\File\AttributeRepository
     */
    protected function getAttributeRepository2Service()
    {
        return $this->privates['AppBundle\\Repository\\File\\AttributeRepository'] = new \AppBundle\Repository\File\AttributeRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\LogRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\LogRepository
     */
    protected function getLogRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\LogRepository'] = new \AppBundle\Repository\LogRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Metrics\CategoryByUserRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Metrics\CategoryByUserRepository
     */
    protected function getCategoryByUserRepositoryService()
    {
        $a = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Repository\\Metrics\\CategoryByUserRepository'])) {
            return $this->privates['AppBundle\\Repository\\Metrics\\CategoryByUserRepository'];
        }

        return $this->privates['AppBundle\\Repository\\Metrics\\CategoryByUserRepository'] = new \AppBundle\Repository\Metrics\CategoryByUserRepository(($this->services['doctrine'] ?? $this->getDoctrineService()), $a);
    }

    /**
     * Gets the private 'AppBundle\Repository\Metrics\CategoryGlobalRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Metrics\CategoryGlobalRepository
     */
    protected function getCategoryGlobalRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Metrics\\CategoryGlobalRepository'] = new \AppBundle\Repository\Metrics\CategoryGlobalRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Setting\ColorRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Setting\ColorRepository
     */
    protected function getColorRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Setting\\ColorRepository'] = new \AppBundle\Repository\Setting\ColorRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Setting\Feature\NewsCategoryRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Setting\Feature\NewsCategoryRepository
     */
    protected function getNewsCategoryRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Setting\\Feature\\NewsCategoryRepository'] = new \AppBundle\Repository\Setting\Feature\NewsCategoryRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Setting\Feature\NewsRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Setting\Feature\NewsRepository
     */
    protected function getNewsRepositoryService()
    {
        $a = ($this->privates['AppBundle\\Services\\SpaceService'] ?? $this->getSpaceServiceService());

        if (isset($this->privates['AppBundle\\Repository\\Setting\\Feature\\NewsRepository'])) {
            return $this->privates['AppBundle\\Repository\\Setting\\Feature\\NewsRepository'];
        }

        return $this->privates['AppBundle\\Repository\\Setting\\Feature\\NewsRepository'] = new \AppBundle\Repository\Setting\Feature\NewsRepository(($this->services['doctrine'] ?? $this->getDoctrineService()), $a);
    }

    /**
     * Gets the private 'AppBundle\Repository\Setting\FontRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Setting\FontRepository
     */
    protected function getFontRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Setting\\FontRepository'] = new \AppBundle\Repository\Setting\FontRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Setting\LocaleRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Setting\LocaleRepository
     */
    protected function getLocaleRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Setting\\LocaleRepository'] = new \AppBundle\Repository\Setting\LocaleRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Setting\SourceRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Setting\SourceRepository
     */
    protected function getSourceRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Setting\\SourceRepository'] = new \AppBundle\Repository\Setting\SourceRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\Setting\ThemeRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\Setting\ThemeRepository
     */
    protected function getThemeRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\Setting\\ThemeRepository'] = new \AppBundle\Repository\Setting\ThemeRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\AnnotationRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\AnnotationRepository
     */
    protected function getAnnotationRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\AnnotationRepository'] = new \AppBundle\Repository\SmartBlock\AnnotationRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\Attribute\ChoiceRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\Attribute\ChoiceRepository
     */
    protected function getChoiceRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\ChoiceRepository'] = new \AppBundle\Repository\SmartBlock\Attribute\ChoiceRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\Attribute\ColorRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\Attribute\ColorRepository
     */
    protected function getColorRepository2Service()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\ColorRepository'] = new \AppBundle\Repository\SmartBlock\Attribute\ColorRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\Attribute\TureOrFalseRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\Attribute\TureOrFalseRepository
     */
    protected function getTureOrFalseRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\TureOrFalseRepository'] = new \AppBundle\Repository\SmartBlock\Attribute\TureOrFalseRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\Attribute\UserRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\Attribute\UserRepository
     */
    protected function getUserRepository2Service()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\UserRepository'] = new \AppBundle\Repository\SmartBlock\Attribute\UserRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\ChapterTeaserItemRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\ChapterTeaserItemRepository
     */
    protected function getChapterTeaserItemRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\ChapterTeaserItemRepository'] = new \AppBundle\Repository\SmartBlock\ChapterTeaserItemRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\DoDontRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\DoDontRepository
     */
    protected function getDoDontRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\DoDontRepository'] = new \AppBundle\Repository\SmartBlock\DoDontRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\IconCategoryRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\IconCategoryRepository
     */
    protected function getIconCategoryRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\IconCategoryRepository'] = new \AppBundle\Repository\SmartBlock\IconCategoryRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\IconCollectionRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\IconCollectionRepository
     */
    protected function getIconCollectionRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\IconCollectionRepository'] = new \AppBundle\Repository\SmartBlock\IconCollectionRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\IconDownloadRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\IconDownloadRepository
     */
    protected function getIconDownloadRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\IconDownloadRepository'] = new \AppBundle\Repository\SmartBlock\IconDownloadRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\IconList\IconFileRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\IconList\IconFileRepository
     */
    protected function getIconFileRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\IconList\\IconFileRepository'] = new \AppBundle\Repository\SmartBlock\IconList\IconFileRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\IconList\IconRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\IconList\IconRepository
     */
    protected function getIconRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\IconList\\IconRepository'] = new \AppBundle\Repository\SmartBlock\IconList\IconRepository(($this->services['doctrine'] ?? $this->getDoctrineService()), ($this->privates['AppBundle\\Repository\\SmartBlock\\IconTagRepository'] ?? $this->getIconTagRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\IconTagRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\IconTagRepository
     */
    protected function getIconTagRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\IconTagRepository'] = new \AppBundle\Repository\SmartBlock\IconTagRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\Slider\SlideRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\Slider\SlideRepository
     */
    protected function getSlideRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\Slider\\SlideRepository'] = new \AppBundle\Repository\SmartBlock\Slider\SlideRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\SpacesSpaceRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\SpacesSpaceRepository
     */
    protected function getSpacesSpaceRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\SpacesSpaceRepository'] = new \AppBundle\Repository\SmartBlock\SpacesSpaceRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartBlock\Table\TableRowRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartBlock\Table\TableRowRepository
     */
    protected function getTableRowRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartBlock\\Table\\TableRowRepository'] = new \AppBundle\Repository\SmartBlock\Table\TableRowRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartTool\Framing\FramingMediaRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartTool\Framing\FramingMediaRepository
     */
    protected function getFramingMediaRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartTool\\Framing\\FramingMediaRepository'] = new \AppBundle\Repository\SmartTool\Framing\FramingMediaRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartTool\Inspiration\EyeCatcherRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartTool\Inspiration\EyeCatcherRepository
     */
    protected function getEyeCatcherRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\EyeCatcherRepository'] = new \AppBundle\Repository\SmartTool\Inspiration\EyeCatcherRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartTool\Inspiration\InspirationFileRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartTool\Inspiration\InspirationFileRepository
     */
    protected function getInspirationFileRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationFileRepository'] = new \AppBundle\Repository\SmartTool\Inspiration\InspirationFileRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartTool\Inspiration\InspirationRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartTool\Inspiration\InspirationRepository
     */
    protected function getInspirationRepositoryService()
    {
        $a = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationRepository'])) {
            return $this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationRepository'];
        }

        return $this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationRepository'] = new \AppBundle\Repository\SmartTool\Inspiration\InspirationRepository(($this->services['doctrine'] ?? $this->getDoctrineService()), $a);
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartTool\Inspiration\InspirationTagRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartTool\Inspiration\InspirationTagRepository
     */
    protected function getInspirationTagRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagRepository'] = new \AppBundle\Repository\SmartTool\Inspiration\InspirationTagRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SmartTool\Inspiration\InspirationTagTypeRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SmartTool\Inspiration\InspirationTagTypeRepository
     */
    protected function getInspirationTagTypeRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagTypeRepository'] = new \AppBundle\Repository\SmartTool\Inspiration\InspirationTagTypeRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\SpaceRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\SpaceRepository
     */
    protected function getSpaceRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\SpaceRepository'] = new \AppBundle\Repository\SpaceRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\System\CronjobRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\System\CronjobRepository
     */
    protected function getCronjobRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\System\\CronjobRepository'] = new \AppBundle\Repository\System\CronjobRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\TranslationRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\TranslationRepository
     */
    protected function getTranslationRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\TranslationRepository'] = new \AppBundle\Repository\TranslationRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\UserRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\UserRepository
     */
    protected function getUserRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\UserRepository'] = new \AppBundle\Repository\UserRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\User\BookmarkRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\User\BookmarkRepository
     */
    protected function getBookmarkRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\User\\BookmarkRepository'] = new \AppBundle\Repository\User\BookmarkRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\User\GroupRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\User\GroupRepository
     */
    protected function getGroupRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\User\\GroupRepository'] = new \AppBundle\Repository\User\GroupRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\User\SettingsRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\User\SettingsRepository
     */
    protected function getSettingsRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\User\\SettingsRepository'] = new \AppBundle\Repository\User\SettingsRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\myHub\FileTransferRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\myHub\FileTransferRepository
     */
    protected function getFileTransferRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\myHub\\FileTransferRepository'] = new \AppBundle\Repository\myHub\FileTransferRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Repository\myHub\QrCodeRepository' shared autowired service.
     *
     * @return \AppBundle\Repository\myHub\QrCodeRepository
     */
    protected function getQrCodeRepositoryService()
    {
        return $this->privates['AppBundle\\Repository\\myHub\\QrCodeRepository'] = new \AppBundle\Repository\myHub\QrCodeRepository(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'AppBundle\Router\PersistentQueryRouter' shared autowired service.
     *
     * @return \AppBundle\Router\PersistentQueryRouter
     */
    protected function getPersistentQueryRouterService()
    {
        return $this->privates['AppBundle\\Router\\PersistentQueryRouter'] = new \AppBundle\Router\PersistentQueryRouter(($this->services['router'] ?? $this->getRouterService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'AppBundle\Router\QueryFilterListener' shared autowired service.
     *
     * @return \AppBundle\Router\QueryFilterListener
     */
    protected function getQueryFilterListenerService()
    {
        return $this->privates['AppBundle\\Router\\QueryFilterListener'] = new \AppBundle\Router\QueryFilterListener();
    }

    /**
     * Gets the private 'AppBundle\Services\CategoryService' shared autowired service.
     *
     * @return \AppBundle\Services\CategoryService
     */
    protected function getCategoryServiceService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->privates['AppBundle\\Services\\CategoryService'])) {
            return $this->privates['AppBundle\\Services\\CategoryService'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['AppBundle\\Services\\CategoryService'])) {
            return $this->privates['AppBundle\\Services\\CategoryService'];
        }
        $c = ($this->privates['form.factory'] ?? $this->getForm_FactoryService());

        if (isset($this->privates['AppBundle\\Services\\CategoryService'])) {
            return $this->privates['AppBundle\\Services\\CategoryService'];
        }
        $d = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Services\\CategoryService'])) {
            return $this->privates['AppBundle\\Services\\CategoryService'];
        }

        return $this->privates['AppBundle\\Services\\CategoryService'] = new \AppBundle\Services\CategoryService(($this->privates['AppBundle\\Repository\\ElementRepository'] ?? $this->getElementRepositoryService()), ($this->privates['AppBundle\\Repository\\Category\\NotNewAnymoreRepository'] ?? $this->getNotNewAnymoreRepositoryService()), $a, $b, $c, ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()), $d);
    }

    /**
     * Gets the private 'AppBundle\Services\Element\ElementService' shared autowired service.
     *
     * @return \AppBundle\Services\Element\ElementService
     */
    protected function getElementServiceService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->privates['AppBundle\\Services\\Element\\ElementService'])) {
            return $this->privates['AppBundle\\Services\\Element\\ElementService'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['AppBundle\\Services\\Element\\ElementService'])) {
            return $this->privates['AppBundle\\Services\\Element\\ElementService'];
        }
        $c = ($this->privates['AppBundle\\Services\\SpaceService'] ?? $this->getSpaceServiceService());

        if (isset($this->privates['AppBundle\\Services\\Element\\ElementService'])) {
            return $this->privates['AppBundle\\Services\\Element\\ElementService'];
        }
        $d = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Services\\Element\\ElementService'])) {
            return $this->privates['AppBundle\\Services\\Element\\ElementService'];
        }

        return $this->privates['AppBundle\\Services\\Element\\ElementService'] = new \AppBundle\Services\Element\ElementService(\dirname(__DIR__, 6), $a, $b, ($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()), ($this->privates['AppBundle\\Repository\\ElementRepository'] ?? $this->getElementRepositoryService()), $c, $d);
    }

    /**
     * Gets the private 'AppBundle\Services\Element\SmartBlock\HtmlService' shared autowired service.
     *
     * @return \AppBundle\Services\Element\SmartBlock\HtmlService
     */
    protected function getHtmlServiceService()
    {
        return $this->privates['AppBundle\\Services\\Element\\SmartBlock\\HtmlService'] = new \AppBundle\Services\Element\SmartBlock\HtmlService();
    }

    /**
     * Gets the private 'AppBundle\Services\Element\SmartBlock\IconListService' shared autowired service.
     *
     * @return \AppBundle\Services\Element\SmartBlock\IconListService
     */
    protected function getIconListServiceService()
    {
        $a = ($this->privates['AppBundle\\Repository\\FileRepository'] ?? $this->getFileRepositoryService());

        if (isset($this->privates['AppBundle\\Services\\Element\\SmartBlock\\IconListService'])) {
            return $this->privates['AppBundle\\Services\\Element\\SmartBlock\\IconListService'];
        }
        $b = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->privates['AppBundle\\Services\\Element\\SmartBlock\\IconListService'])) {
            return $this->privates['AppBundle\\Services\\Element\\SmartBlock\\IconListService'];
        }

        return $this->privates['AppBundle\\Services\\Element\\SmartBlock\\IconListService'] = new \AppBundle\Services\Element\SmartBlock\IconListService(\dirname(__DIR__, 6), $a, ($this->privates['AppBundle\\Repository\\SmartBlock\\IconList\\IconRepository'] ?? $this->getIconRepositoryService()), $b, ($this->privates['AppBundle\\Repository\\SmartBlock\\IconCategoryRepository'] ?? $this->getIconCategoryRepositoryService()), ($this->privates['AppBundle\\Services\\Setting\\LocaleService'] ?? $this->getLocaleServiceService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($this->privates['AppBundle\\Repository\\SmartBlock\\IconDownloadRepository'] ?? $this->getIconDownloadRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Services\Feature\Connection\MediacockpitService' shared autowired service.
     *
     * @return \AppBundle\Services\Feature\Connection\MediacockpitService
     */
    protected function getMediacockpitServiceService()
    {
        $a = ($this->privates['AppBundle\\Repository\\FileRepository'] ?? $this->getFileRepositoryService());

        if (isset($this->privates['AppBundle\\Services\\Feature\\Connection\\MediacockpitService'])) {
            return $this->privates['AppBundle\\Services\\Feature\\Connection\\MediacockpitService'];
        }
        $b = ($this->privates['AppBundle\\Services\\FileService'] ?? $this->getFileServiceService());

        if (isset($this->privates['AppBundle\\Services\\Feature\\Connection\\MediacockpitService'])) {
            return $this->privates['AppBundle\\Services\\Feature\\Connection\\MediacockpitService'];
        }
        $c = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Services\\Feature\\Connection\\MediacockpitService'])) {
            return $this->privates['AppBundle\\Services\\Feature\\Connection\\MediacockpitService'];
        }

        return $this->privates['AppBundle\\Services\\Feature\\Connection\\MediacockpitService'] = new \AppBundle\Services\Feature\Connection\MediacockpitService(($this->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\AssetRepository'] ?? $this->getAssetRepositoryService()), ($this->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\AttributeRepository'] ?? $this->getAttributeRepositoryService()), ($this->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\ChoiceRepository'] ?? $this->getChoiceRepositoryService()), ($this->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\CollectionRepository'] ?? $this->getCollectionRepositoryService()), ($this->privates['AppBundle\\Repository\\ConnectionRepository'] ?? $this->getConnectionRepositoryService()), $a, ($this->privates['AppBundle\\Repository\\File\\AttributeRepository'] ?? $this->getAttributeRepository2Service()), $b, $c);
    }

    /**
     * Gets the private 'AppBundle\Services\FileService' shared autowired service.
     *
     * @return \AppBundle\Services\FileService
     */
    protected function getFileServiceService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->privates['AppBundle\\Services\\FileService'])) {
            return $this->privates['AppBundle\\Services\\FileService'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['AppBundle\\Services\\FileService'])) {
            return $this->privates['AppBundle\\Services\\FileService'];
        }
        $c = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Services\\FileService'])) {
            return $this->privates['AppBundle\\Services\\FileService'];
        }
        $d = ($this->privates['AppBundle\\Repository\\FileRepository'] ?? $this->getFileRepositoryService());

        if (isset($this->privates['AppBundle\\Services\\FileService'])) {
            return $this->privates['AppBundle\\Services\\FileService'];
        }

        return $this->privates['AppBundle\\Services\\FileService'] = new \AppBundle\Services\FileService(\dirname(__DIR__, 6), $a, $b, ($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()), $c, $d, ($this->privates['AppBundle\\Repository\\ChainFilePositionRepository'] ?? $this->getChainFilePositionRepositoryService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'AppBundle\Services\File\PathService' shared autowired service.
     *
     * @return \AppBundle\Services\File\PathService
     */
    protected function getPathServiceService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->privates['AppBundle\\Services\\File\\PathService'])) {
            return $this->privates['AppBundle\\Services\\File\\PathService'];
        }

        return $this->privates['AppBundle\\Services\\File\\PathService'] = new \AppBundle\Services\File\PathService(\dirname(__DIR__, 6), $a, ($this->privates['AppBundle\\Services\\Vendor\\AmazonWebServicesService'] ??= new \AppBundle\Services\Vendor\AmazonWebServicesService()));
    }

    /**
     * Gets the private 'AppBundle\Services\Setting\LocaleService' shared autowired service.
     *
     * @return \AppBundle\Services\Setting\LocaleService
     */
    protected function getLocaleServiceService()
    {
        return $this->privates['AppBundle\\Services\\Setting\\LocaleService'] = new \AppBundle\Services\Setting\LocaleService($this->getEnv('string:APP_LOCALE'), ($this->privates['AppBundle\\Repository\\Setting\\LocaleRepository'] ?? $this->getLocaleRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Services\SpaceService' shared autowired service.
     *
     * @return \AppBundle\Services\SpaceService
     */
    protected function getSpaceServiceService()
    {
        $a = ($this->services['jms_serializer.authorization_checker'] ?? $this->getJmsSerializer_AuthorizationCheckerService());

        if (isset($this->privates['AppBundle\\Services\\SpaceService'])) {
            return $this->privates['AppBundle\\Services\\SpaceService'];
        }

        return $this->privates['AppBundle\\Services\\SpaceService'] = new \AppBundle\Services\SpaceService(\dirname(__DIR__, 6), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a, ($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()), ($this->privates['AppBundle\\Repository\\SpaceRepository'] ?? $this->getSpaceRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Services\System\CronjobService' shared autowired service.
     *
     * @return \AppBundle\Services\System\CronjobService
     */
    protected function getCronjobServiceService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['AppBundle\\Services\\System\\CronjobService'])) {
            return $this->privates['AppBundle\\Services\\System\\CronjobService'];
        }

        return $this->privates['AppBundle\\Services\\System\\CronjobService'] = new \AppBundle\Services\System\CronjobService(($this->privates['AppBundle\\Repository\\System\\CronjobRepository'] ?? $this->getCronjobRepositoryService()), $a);
    }

    /**
     * Gets the private 'AppBundle\Services\Twig\ActivityTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Services\Twig\ActivityTwigExtension
     */
    protected function getActivityTwigExtensionService()
    {
        return $this->privates['AppBundle\\Services\\Twig\\ActivityTwigExtension'] = new \AppBundle\Services\Twig\ActivityTwigExtension(($this->services['translator'] ?? $this->getTranslatorService()));
    }

    /**
     * Gets the private 'AppBundle\Services\Twig\ConfigTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Services\Twig\ConfigTwigExtension
     */
    protected function getConfigTwigExtensionService()
    {
        return $this->privates['AppBundle\\Services\\Twig\\ConfigTwigExtension'] = new \AppBundle\Services\Twig\ConfigTwigExtension(($this->privates['AppBundle\\Repository\\ConfigRepository'] ?? $this->getConfigRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Services\Twig\DashboardTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Services\Twig\DashboardTwigExtension
     */
    protected function getDashboardTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\SpaceService'] ?? $this->getSpaceServiceService());

        if (isset($this->privates['AppBundle\\Services\\Twig\\DashboardTwigExtension'])) {
            return $this->privates['AppBundle\\Services\\Twig\\DashboardTwigExtension'];
        }

        return $this->privates['AppBundle\\Services\\Twig\\DashboardTwigExtension'] = new \AppBundle\Services\Twig\DashboardTwigExtension(($this->privates['AppBundle\\Repository\\DashboardRepository'] ?? $this->getDashboardRepositoryService()), ($this->privates['AppBundle\\Repository\\ElementRepository'] ?? $this->getElementRepositoryService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a);
    }

    /**
     * Gets the private 'AppBundle\Services\Twig\HelperTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Services\Twig\HelperTwigExtension
     */
    protected function getHelperTwigExtensionService()
    {
        return $this->privates['AppBundle\\Services\\Twig\\HelperTwigExtension'] = new \AppBundle\Services\Twig\HelperTwigExtension();
    }

    /**
     * Gets the private 'AppBundle\Services\Twig\LocaleTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Services\Twig\LocaleTwigExtension
     */
    protected function getLocaleTwigExtensionService()
    {
        return $this->privates['AppBundle\\Services\\Twig\\LocaleTwigExtension'] = new \AppBundle\Services\Twig\LocaleTwigExtension(($this->privates['AppBundle\\Services\\Setting\\LocaleService'] ?? $this->getLocaleServiceService()));
    }

    /**
     * Gets the private 'AppBundle\Services\Twig\LogTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Services\Twig\LogTwigExtension
     */
    protected function getLogTwigExtensionService()
    {
        return $this->privates['AppBundle\\Services\\Twig\\LogTwigExtension'] = new \AppBundle\Services\Twig\LogTwigExtension(($this->privates['AppBundle\\Repository\\LogRepository'] ?? $this->getLogRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Services\Twig\NewsTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Services\Twig\NewsTwigExtension
     */
    protected function getNewsTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Services\\Twig\\NewsTwigExtension'])) {
            return $this->privates['AppBundle\\Services\\Twig\\NewsTwigExtension'];
        }
        $b = ($this->privates['AppBundle\\Services\\User\\SettingsService'] ?? $this->getSettingsServiceService());

        if (isset($this->privates['AppBundle\\Services\\Twig\\NewsTwigExtension'])) {
            return $this->privates['AppBundle\\Services\\Twig\\NewsTwigExtension'];
        }

        return $this->privates['AppBundle\\Services\\Twig\\NewsTwigExtension'] = new \AppBundle\Services\Twig\NewsTwigExtension(($this->privates['AppBundle\\Repository\\Setting\\Feature\\NewsRepository'] ?? $this->getNewsRepositoryService()), $a, $b, ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'AppBundle\Services\Twig\VendorTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Services\Twig\VendorTwigExtension
     */
    protected function getVendorTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Services\\Twig\\VendorTwigExtension'])) {
            return $this->privates['AppBundle\\Services\\Twig\\VendorTwigExtension'];
        }

        return $this->privates['AppBundle\\Services\\Twig\\VendorTwigExtension'] = new \AppBundle\Services\Twig\VendorTwigExtension($a);
    }

    /**
     * Gets the private 'AppBundle\Services\UserService' shared autowired service.
     *
     * @return \AppBundle\Services\UserService
     */
    protected function getUserServiceService()
    {
        $a = ($this->services['jms_serializer.authorization_checker'] ?? $this->getJmsSerializer_AuthorizationCheckerService());

        if (isset($this->privates['AppBundle\\Services\\UserService'])) {
            return $this->privates['AppBundle\\Services\\UserService'];
        }
        $b = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->privates['AppBundle\\Services\\UserService'])) {
            return $this->privates['AppBundle\\Services\\UserService'];
        }
        $c = ($this->privates['AppBundle\\Services\\SpaceService'] ?? $this->getSpaceServiceService());

        if (isset($this->privates['AppBundle\\Services\\UserService'])) {
            return $this->privates['AppBundle\\Services\\UserService'];
        }

        return $this->privates['AppBundle\\Services\\UserService'] = new \AppBundle\Services\UserService($this->getEnv('string:APP_LOCALE'), $a, $b, ($this->privates['security.user_password_hasher'] ?? $this->getSecurity_UserPasswordHasherService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $c, ($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()));
    }

    /**
     * Gets the private 'AppBundle\Services\User\CommentService' shared autowired service.
     *
     * @return \AppBundle\Services\User\CommentService
     */
    protected function getCommentServiceService()
    {
        return $this->privates['AppBundle\\Services\\User\\CommentService'] = new \AppBundle\Services\User\CommentService(($this->privates['AppBundle\\Repository\\UserRepository'] ?? $this->getUserRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Services\User\SettingsService' shared autowired service.
     *
     * @return \AppBundle\Services\User\SettingsService
     */
    protected function getSettingsServiceService()
    {
        $a = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Services\\User\\SettingsService'])) {
            return $this->privates['AppBundle\\Services\\User\\SettingsService'];
        }
        $b = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->privates['AppBundle\\Services\\User\\SettingsService'])) {
            return $this->privates['AppBundle\\Services\\User\\SettingsService'];
        }

        return $this->privates['AppBundle\\Services\\User\\SettingsService'] = new \AppBundle\Services\User\SettingsService($a, ($this->privates['AppBundle\\Repository\\User\\SettingsRepository'] ?? $this->getSettingsRepositoryService()), ($this->privates['AppBundle\\Repository\\Setting\\Feature\\NewsCategoryRepository'] ?? $this->getNewsCategoryRepositoryService()), ($this->privates['AppBundle\\Repository\\SpaceRepository'] ?? $this->getSpaceRepositoryService()), $b);
    }

    /**
     * Gets the private 'AppBundle\Services\Vendor\AmazonWebServicesService' shared autowired service.
     *
     * @return \AppBundle\Services\Vendor\AmazonWebServicesService
     */
    protected function getAmazonWebServicesServiceService()
    {
        return $this->privates['AppBundle\\Services\\Vendor\\AmazonWebServicesService'] = new \AppBundle\Services\Vendor\AmazonWebServicesService();
    }

    /**
     * Gets the private 'AppBundle\Services\myHub\QrCodeService' shared autowired service.
     *
     * @return \AppBundle\Services\myHub\QrCodeService
     */
    protected function getQrCodeServiceService()
    {
        return $this->privates['AppBundle\\Services\\myHub\\QrCodeService'] = new \AppBundle\Services\myHub\QrCodeService(($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()), ($this->privates['AppBundle\\Repository\\myHub\\QrCodeRepository'] ?? $this->getQrCodeRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\CategoryTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\CategoryTwigExtension
     */
    protected function getCategoryTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Repository\\CategoryRepository'] ?? $this->getCategoryRepositoryService());

        if (isset($this->privates['AppBundle\\Twig\\CategoryTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\CategoryTwigExtension'];
        }
        $b = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Twig\\CategoryTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\CategoryTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\CategoryTwigExtension'] = new \AppBundle\Twig\CategoryTwigExtension(($this->privates['AppBundle\\Repository\\ElementRepository'] ?? $this->getElementRepositoryService()), $a, ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $b);
    }

    /**
     * Gets the private 'AppBundle\Twig\CommentTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\CommentTwigExtension
     */
    protected function getCommentTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\CommentTwigExtension'] = new \AppBundle\Twig\CommentTwigExtension(($this->privates['AppBundle\\Services\\User\\CommentService'] ?? $this->getCommentServiceService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Component\MenuAsideTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Component\MenuAsideTwigExtension
     */
    protected function getMenuAsideTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Component\\MenuAsideTwigExtension'] = new \AppBundle\Twig\Component\MenuAsideTwigExtension(($this->privates['AppBundle\\Repository\\Component\\MenuAside\\CustomLinkRepository'] ?? $this->getCustomLinkRepositoryService()), ($this->privates['AppBundle\\Services\\Setting\\LocaleService'] ?? $this->getLocaleServiceService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\CoreTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\CoreTwigExtension
     */
    protected function getCoreTwigExtensionService()
    {
        $a = ($this->privates['twig'] ?? $this->getTwigService());

        if (isset($this->privates['AppBundle\\Twig\\CoreTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\CoreTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\CoreTwigExtension'] = new \AppBundle\Twig\CoreTwigExtension(\dirname(__DIR__, 6), $a);
    }

    /**
     * Gets the private 'AppBundle\Twig\CustomerTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\CustomerTwigExtension
     */
    protected function getCustomerTwigExtensionService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['AppBundle\\Twig\\CustomerTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\CustomerTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\CustomerTwigExtension'] = new \AppBundle\Twig\CustomerTwigExtension($a);
    }

    /**
     * Gets the private 'AppBundle\Twig\DashboardTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\DashboardTwigExtension
     */
    protected function getDashboardTwigExtension2Service()
    {
        $a = ($this->privates['AppBundle\\Services\\SpaceService'] ?? $this->getSpaceServiceService());

        if (isset($this->privates['AppBundle\\Twig\\DashboardTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\DashboardTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\DashboardTwigExtension'] = new \AppBundle\Twig\DashboardTwigExtension($a);
    }

    /**
     * Gets the private 'AppBundle\Twig\ElementTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\ElementTwigExtension
     */
    protected function getElementTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Repository\\FileRepository'] ?? $this->getFileRepositoryService());

        if (isset($this->privates['AppBundle\\Twig\\ElementTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\ElementTwigExtension'];
        }
        $b = ($this->services['jms_serializer.authorization_checker'] ?? $this->getJmsSerializer_AuthorizationCheckerService());

        if (isset($this->privates['AppBundle\\Twig\\ElementTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\ElementTwigExtension'];
        }
        $c = ($this->privates['AppBundle\\Services\\Element\\ElementService'] ?? $this->getElementServiceService());

        if (isset($this->privates['AppBundle\\Twig\\ElementTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\ElementTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\ElementTwigExtension'] = new \AppBundle\Twig\ElementTwigExtension(($this->privates['AppBundle\\Repository\\ElementRepository'] ?? $this->getElementRepositoryService()), ($this->privates['AppBundle\\Repository\\Element\\ElementCommentRepository'] ?? $this->getElementCommentRepositoryService()), ($this->privates['AppBundle\\Repository\\Element\\ElementFileRepository'] ?? $this->getElementFileRepositoryService()), $a, ($this->privates['AppBundle\\Repository\\TranslationRepository'] ?? $this->getTranslationRepositoryService()), ($this->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\TureOrFalseRepository'] ?? $this->getTureOrFalseRepositoryService()), $b, $c, ($this->privates['AppBundle\\Services\\Setting\\LocaleService'] ?? $this->getLocaleServiceService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()), ($this->services['translator'] ?? $this->getTranslatorService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\AttributeTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\AttributeTwigExtension
     */
    protected function getAttributeTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\AttributeTwigExtension'] = new \AppBundle\Twig\Element\AttributeTwigExtension(($this->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\TureOrFalseRepository'] ?? $this->getTureOrFalseRepositoryService()), ($this->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\ChoiceRepository'] ?? $this->getChoiceRepositoryService()), ($this->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\ColorRepository'] ?? $this->getColorRepository2Service()), ($this->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\UserRepository'] ?? $this->getUserRepository2Service()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\FileTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\FileTwigExtension
     */
    protected function getFileTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Repository\\FileRepository'] ?? $this->getFileRepositoryService());

        if (isset($this->privates['AppBundle\\Twig\\Element\\FileTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\Element\\FileTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\Element\\FileTwigExtension'] = new \AppBundle\Twig\Element\FileTwigExtension(($this->privates['AppBundle\\Repository\\Element\\ElementFileRepository'] ?? $this->getElementFileRepositoryService()), $a);
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlockTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlockTwigExtension
     */
    protected function getSmartBlockTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\Element\\ElementService'] ?? $this->getElementServiceService());

        if (isset($this->privates['AppBundle\\Twig\\Element\\SmartBlockTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\Element\\SmartBlockTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\Element\\SmartBlockTwigExtension'] = new \AppBundle\Twig\Element\SmartBlockTwigExtension($a);
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\AccordionTwigService' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\AccordionTwigService
     */
    protected function getAccordionTwigServiceService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\AccordionTwigService'] = new \AppBundle\Twig\Element\SmartBlock\AccordionTwigService(($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\AliasTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\AliasTwigExtension
     */
    protected function getAliasTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\AliasTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\AliasTwigExtension(($this->privates['AppBundle\\Repository\\ElementRepository'] ?? $this->getElementRepositoryService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\AnnotationTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\AnnotationTwigExtension
     */
    protected function getAnnotationTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\AnnotationTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\AnnotationTwigExtension(($this->privates['AppBundle\\Repository\\SmartBlock\\AnnotationRepository'] ?? $this->getAnnotationRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\AttachmentTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\AttachmentTwigExtension
     */
    protected function getAttachmentTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\AttachmentTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\AttachmentTwigExtension();
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\ChapterTeaserTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\ChapterTeaserTwigExtension
     */
    protected function getChapterTeaserTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\ChapterTeaserTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\ChapterTeaserTwigExtension(($this->privates['AppBundle\\Repository\\SmartBlock\\ChapterTeaserItemRepository'] ?? $this->getChapterTeaserItemRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\ColorsTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\ColorsTwigExtension
     */
    protected function getColorsTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\ColorsTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\ColorsTwigExtension();
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\ColumnsTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\ColumnsTwigExtension
     */
    protected function getColumnsTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\ColumnsTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\ColumnsTwigExtension();
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\DoDontTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\DoDontTwigExtension
     */
    protected function getDoDontTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\DoDontTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\DoDontTwigExtension(($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()), ($this->privates['AppBundle\\Repository\\SmartBlock\\DoDontRepository'] ?? $this->getDoDontRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\FileTransferTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\FileTransferTwigExtension
     */
    protected function getFileTransferTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\FileTransferTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\FileTransferTwigExtension(($this->privates['AppBundle\\Repository\\myHub\\FileTransferRepository'] ?? $this->getFileTransferRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\GalleryTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\GalleryTwigExtension
     */
    protected function getGalleryTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Repository\\FileRepository'] ?? $this->getFileRepositoryService());

        if (isset($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\GalleryTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\GalleryTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\GalleryTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\GalleryTwigExtension(\dirname(__DIR__, 6), $a);
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\HtmlTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\HtmlTwigExtension
     */
    protected function getHtmlTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\HtmlTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\HtmlTwigExtension(($this->privates['AppBundle\\Services\\Element\\SmartBlock\\HtmlService'] ??= new \AppBundle\Services\Element\SmartBlock\HtmlService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\IconListTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\IconListTwigExtension
     */
    protected function getIconListTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\Element\\SmartBlock\\IconListService'] ?? $this->getIconListServiceService());

        if (isset($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\IconListTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\IconListTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\IconListTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\IconListTwigExtension(($this->privates['AppBundle\\Repository\\Setting\\ColorRepository'] ?? $this->getColorRepositoryService()), ($this->privates['AppBundle\\Repository\\SmartBlock\\IconList\\IconRepository'] ?? $this->getIconRepositoryService()), ($this->privates['AppBundle\\Repository\\SmartBlock\\IconCategoryRepository'] ?? $this->getIconCategoryRepositoryService()), ($this->privates['AppBundle\\Repository\\SmartBlock\\IconCollectionRepository'] ?? $this->getIconCollectionRepositoryService()), ($this->privates['AppBundle\\Repository\\SmartBlock\\IconTagRepository'] ?? $this->getIconTagRepositoryService()), $a);
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\MediacockpitTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\MediacockpitTwigExtension
     */
    protected function getMediacockpitTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\MediacockpitTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\MediacockpitTwigExtension(($this->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\AttributeRepository'] ?? $this->getAttributeRepositoryService()), ($this->privates['AppBundle\\Repository\\SmartBlock\\Attribute\\ChoiceRepository'] ?? $this->getChoiceRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\PatternTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\PatternTwigExtension
     */
    protected function getPatternTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\SpaceService'] ?? $this->getSpaceServiceService());

        if (isset($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\PatternTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\PatternTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\PatternTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\PatternTwigExtension(($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()), $a, ($this->privates['AppBundle\\Repository\\Setting\\FontRepository'] ?? $this->getFontRepositoryService()), ($this->privates['AppBundle\\Repository\\Setting\\SourceRepository'] ?? $this->getSourceRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\QrGeneratorTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\QrGeneratorTwigExtension
     */
    protected function getQrGeneratorTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\QrGeneratorTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\QrGeneratorTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\QrGeneratorTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\QrGeneratorTwigExtension(($this->privates['AppBundle\\Services\\myHub\\QrCodeService'] ?? $this->getQrCodeServiceService()), $a);
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\SliderTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\SliderTwigExtension
     */
    protected function getSliderTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\SliderTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\SliderTwigExtension(($this->privates['AppBundle\\Repository\\SmartBlock\\Slider\\SlideRepository'] ?? $this->getSlideRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\SpacesTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\SpacesTwigExtension
     */
    protected function getSpacesTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\SpacesTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\SpacesTwigExtension(($this->privates['AppBundle\\Repository\\SmartBlock\\SpacesSpaceRepository'] ?? $this->getSpacesSpaceRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartBlock\TableTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartBlock\TableTwigExtension
     */
    protected function getTableTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\SmartBlock\\TableTwigExtension'] = new \AppBundle\Twig\Element\SmartBlock\TableTwigExtension(($this->privates['AppBundle\\Repository\\SmartBlock\\Table\\TableRowRepository'] ?? $this->getTableRowRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartTool\FramingTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartTool\FramingTwigExtension
     */
    protected function getFramingTwigExtensionService()
    {
        $a = ($this->privates['form.factory'] ?? $this->getForm_FactoryService());

        if (isset($this->privates['AppBundle\\Twig\\Element\\SmartTool\\FramingTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\Element\\SmartTool\\FramingTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\Element\\SmartTool\\FramingTwigExtension'] = new \AppBundle\Twig\Element\SmartTool\FramingTwigExtension($a, ($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()), ($this->privates['AppBundle\\Repository\\SmartTool\\Framing\\FramingMediaRepository'] ?? $this->getFramingMediaRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\SmartTool\InspirationTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\SmartTool\InspirationTwigExtension
     */
    protected function getInspirationTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationRepository'] ?? $this->getInspirationRepositoryService());

        if (isset($this->privates['AppBundle\\Twig\\Element\\SmartTool\\InspirationTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\Element\\SmartTool\\InspirationTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\Element\\SmartTool\\InspirationTwigExtension'] = new \AppBundle\Twig\Element\SmartTool\InspirationTwigExtension($a, ($this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagRepository'] ?? $this->getInspirationTagRepositoryService()), ($this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagTypeRepository'] ?? $this->getInspirationTagTypeRepositoryService()), ($this->privates['AppBundle\\Repository\\SmartTool\\Inspiration\\EyeCatcherRepository'] ?? $this->getEyeCatcherRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Element\TranslationTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Element\TranslationTwigExtension
     */
    protected function getTranslationTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\Element\\TranslationTwigExtension'] = new \AppBundle\Twig\Element\TranslationTwigExtension(($this->privates['AppBundle\\Repository\\ElementRepository'] ?? $this->getElementRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\Feature\ConnectionTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\Feature\ConnectionTwigExtension
     */
    protected function getConnectionTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\Feature\\Connection\\MediacockpitService'] ?? $this->getMediacockpitServiceService());

        if (isset($this->privates['AppBundle\\Twig\\Feature\\ConnectionTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\Feature\\ConnectionTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\Feature\\ConnectionTwigExtension'] = new \AppBundle\Twig\Feature\ConnectionTwigExtension(($this->privates['AppBundle\\Repository\\ConnectionRepository'] ?? $this->getConnectionRepositoryService()), ($this->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\AssetRepository'] ?? $this->getAssetRepositoryService()), ($this->privates['AppBundle\\Repository\\Connection\\Mediacockpit\\CollectionRepository'] ?? $this->getCollectionRepositoryService()), $a, ($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\FileTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\FileTwigExtension
     */
    protected function getFileTwigExtension2Service()
    {
        $a = ($this->privates['AppBundle\\Repository\\FileRepository'] ?? $this->getFileRepositoryService());

        if (isset($this->privates['AppBundle\\Twig\\FileTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\FileTwigExtension'];
        }
        $b = ($this->privates['AppBundle\\Services\\FileService'] ?? $this->getFileServiceService());

        if (isset($this->privates['AppBundle\\Twig\\FileTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\FileTwigExtension'];
        }
        $c = ($this->privates['AppBundle\\Services\\File\\PathService'] ?? $this->getPathServiceService());

        if (isset($this->privates['AppBundle\\Twig\\FileTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\FileTwigExtension'];
        }
        $d = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Twig\\FileTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\FileTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\FileTwigExtension'] = new \AppBundle\Twig\FileTwigExtension(\dirname(__DIR__, 6), ($this->privates['AppBundle\\Repository\\File\\AttributeRepository'] ?? $this->getAttributeRepository2Service()), $a, ($this->privates['AppBundle\\Repository\\ChainFilePositionRepository'] ?? $this->getChainFilePositionRepositoryService()), $b, $c, ($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()), $d);
    }

    /**
     * Gets the private 'AppBundle\Twig\HelpTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\HelpTwigExtension
     */
    protected function getHelpTwigExtensionService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->privates['AppBundle\\Twig\\HelpTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\HelpTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\HelpTwigExtension'] = new \AppBundle\Twig\HelpTwigExtension(\dirname(__DIR__, 6), $a);
    }

    /**
     * Gets the private 'AppBundle\Twig\MenuTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\MenuTwigExtension
     */
    protected function getMenuTwigExtensionService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['AppBundle\\Twig\\MenuTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\MenuTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\MenuTwigExtension'] = new \AppBundle\Twig\MenuTwigExtension($a);
    }

    /**
     * Gets the private 'AppBundle\Twig\MetricsTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\MetricsTwigExtension
     */
    protected function getMetricsTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Repository\\Metrics\\CategoryByUserRepository'] ?? $this->getCategoryByUserRepositoryService());

        if (isset($this->privates['AppBundle\\Twig\\MetricsTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\MetricsTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\MetricsTwigExtension'] = new \AppBundle\Twig\MetricsTwigExtension($a, ($this->privates['AppBundle\\Repository\\Metrics\\CategoryGlobalRepository'] ?? $this->getCategoryGlobalRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\PhpTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\PhpTwigExtension
     */
    protected function getPhpTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\PhpTwigExtension'] = new \AppBundle\Twig\PhpTwigExtension();
    }

    /**
     * Gets the private 'AppBundle\Twig\RoutingTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\RoutingTwigExtension
     */
    protected function getRoutingTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\RoutingTwigExtension'] = new \AppBundle\Twig\RoutingTwigExtension(($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($this->services['router'] ?? $this->getRouterService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\SettingTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\SettingTwigExtension
     */
    protected function getSettingTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\SpaceService'] ?? $this->getSpaceServiceService());

        if (isset($this->privates['AppBundle\\Twig\\SettingTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\SettingTwigExtension'];
        }
        $b = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Twig\\SettingTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\SettingTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\SettingTwigExtension'] = new \AppBundle\Twig\SettingTwigExtension(($this->privates['AppBundle\\Repository\\Setting\\ColorRepository'] ?? $this->getColorRepositoryService()), ($this->privates['AppBundle\\Repository\\ConfigRepository'] ?? $this->getConfigRepositoryService()), ($this->privates['AppBundle\\Repository\\Setting\\LocaleRepository'] ?? $this->getLocaleRepositoryService()), ($this->privates['AppBundle\\Repository\\Setting\\ThemeRepository'] ?? $this->getThemeRepositoryService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a, $b);
    }

    /**
     * Gets the private 'AppBundle\Twig\SpaceTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\SpaceTwigExtension
     */
    protected function getSpaceTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\SpaceService'] ?? $this->getSpaceServiceService());

        if (isset($this->privates['AppBundle\\Twig\\SpaceTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\SpaceTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\SpaceTwigExtension'] = new \AppBundle\Twig\SpaceTwigExtension(($this->privates['AppBundle\\Router\\PersistentQueryRouter'] ?? $this->getPersistentQueryRouterService()), $a, ($this->privates['AppBundle\\Repository\\SpaceRepository'] ?? $this->getSpaceRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\StringTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\StringTwigExtension
     */
    protected function getStringTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\StringTwigExtension'] = new \AppBundle\Twig\StringTwigExtension();
    }

    /**
     * Gets the private 'AppBundle\Twig\SystemTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\SystemTwigExtension
     */
    protected function getSystemTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\System\\CronjobService'] ?? $this->getCronjobServiceService());

        if (isset($this->privates['AppBundle\\Twig\\SystemTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\SystemTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\SystemTwigExtension'] = new \AppBundle\Twig\SystemTwigExtension(\dirname(__DIR__, 6), $a);
    }

    /**
     * Gets the private 'AppBundle\Twig\UploadTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\UploadTwigExtension
     */
    protected function getUploadTwigExtensionService()
    {
        $a = ($this->privates['form.factory'] ?? $this->getForm_FactoryService());

        if (isset($this->privates['AppBundle\\Twig\\UploadTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\UploadTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\UploadTwigExtension'] = new \AppBundle\Twig\UploadTwigExtension($a);
    }

    /**
     * Gets the private 'AppBundle\Twig\UserTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\UserTwigExtension
     */
    protected function getUserTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Repository\\CategoryRepository'] ?? $this->getCategoryRepositoryService());

        if (isset($this->privates['AppBundle\\Twig\\UserTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\UserTwigExtension'];
        }
        $b = ($this->privates['AppBundle\\Services\\User\\SettingsService'] ?? $this->getSettingsServiceService());

        if (isset($this->privates['AppBundle\\Twig\\UserTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\UserTwigExtension'];
        }
        $c = ($this->privates['AppBundle\\Services\\SpaceService'] ?? $this->getSpaceServiceService());

        if (isset($this->privates['AppBundle\\Twig\\UserTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\UserTwigExtension'];
        }
        $d = ($this->privates['AppBundle\\Services\\UserService'] ?? $this->getUserServiceService());

        if (isset($this->privates['AppBundle\\Twig\\UserTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\UserTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\UserTwigExtension'] = new \AppBundle\Twig\UserTwigExtension($a, ($this->privates['AppBundle\\Repository\\User\\GroupRepository'] ?? $this->getGroupRepositoryService()), ($this->privates['AppBundle\\Repository\\UserRepository'] ?? $this->getUserRepositoryService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $b, $c, $d);
    }

    /**
     * Gets the private 'AppBundle\Twig\User\BookmarkTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\User\BookmarkTwigExtension
     */
    protected function getBookmarkTwigExtensionService()
    {
        $a = ($this->privates['AppBundle\\Services\\CategoryService'] ?? $this->getCategoryServiceService());

        if (isset($this->privates['AppBundle\\Twig\\User\\BookmarkTwigExtension'])) {
            return $this->privates['AppBundle\\Twig\\User\\BookmarkTwigExtension'];
        }

        return $this->privates['AppBundle\\Twig\\User\\BookmarkTwigExtension'] = new \AppBundle\Twig\User\BookmarkTwigExtension(($this->privates['AppBundle\\Repository\\User\\BookmarkRepository'] ?? $this->getBookmarkRepositoryService()), $a, ($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\User\ImportTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\User\ImportTwigExtension
     */
    protected function getImportTwigExtensionService()
    {
        return $this->privates['AppBundle\\Twig\\User\\ImportTwigExtension'] = new \AppBundle\Twig\User\ImportTwigExtension(($this->privates['AppBundle\\Repository\\UserRepository'] ?? $this->getUserRepositoryService()));
    }

    /**
     * Gets the private 'AppBundle\Twig\VendorTwigExtension' shared autowired service.
     *
     * @return \AppBundle\Twig\VendorTwigExtension
     */
    protected function getVendorTwigExtension2Service()
    {
        return $this->privates['AppBundle\\Twig\\VendorTwigExtension'] = new \AppBundle\Twig\VendorTwigExtension();
    }

    /**
     * Gets the private 'Http\Client\Common\PluginClientFactory' shared service.
     *
     * @return \Http\HttplugBundle\Collector\PluginClientFactory
     */
    protected function getPluginClientFactoryService()
    {
        return $this->privates['Http\\Client\\Common\\PluginClientFactory'] = new \Http\HttplugBundle\Collector\PluginClientFactory(($this->privates['httplug.collector.collector'] ??= new \Http\HttplugBundle\Collector\Collector(0)), ($this->privates['httplug.collector.formatter'] ?? $this->getHttplug_Collector_FormatterService()), ($this->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private 'Http\HttplugBundle\Collector\PluginClientFactoryListener' shared service.
     *
     * @return \Http\HttplugBundle\Collector\PluginClientFactoryListener
     */
    protected function getPluginClientFactoryListenerService()
    {
        return $this->privates['Http\\HttplugBundle\\Collector\\PluginClientFactoryListener'] = new \Http\HttplugBundle\Collector\PluginClientFactoryListener(($this->privates['Http\\Client\\Common\\PluginClientFactory'] ?? $this->getPluginClientFactoryService()));
    }

    /**
     * Gets the private 'annotations.cache_adapter' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\PhpArrayAdapter
     */
    protected function getAnnotations_CacheAdapterService()
    {
        return $this->privates['annotations.cache_adapter'] = \Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($this->targetDir.''.'/annotations.php'), ($this->privates['cache.annotations'] ?? $this->getCache_AnnotationsService()));
    }

    /**
     * Gets the private 'annotations.cached_reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\PsrCachedReader
     */
    protected function getAnnotations_CachedReaderService()
    {
        return $this->privates['annotations.cached_reader'] = new \Doctrine\Common\Annotations\PsrCachedReader(($this->privates['annotations.reader'] ?? $this->getAnnotations_ReaderService()), ($this->privates['annotations.cache_adapter'] ?? $this->getAnnotations_CacheAdapterService()), true);
    }

    /**
     * Gets the private 'annotations.reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\AnnotationReader
     */
    protected function getAnnotations_ReaderService()
    {
        $this->privates['annotations.reader'] = $instance = new \Doctrine\Common\Annotations\AnnotationReader();

        $instance->addGlobalIgnoredName('required', NULL);

        return $instance;
    }

    /**
     * Gets the private 'argument_metadata_factory' shared service.
     *
     * @return \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory
     */
    protected function getArgumentMetadataFactoryService()
    {
        return $this->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory();
    }

    /**
     * Gets the private 'assets._default_package' shared service.
     *
     * @return \Symfony\Component\Asset\PathPackage
     */
    protected function getAssets_DefaultPackageService()
    {
        return $this->privates['assets._default_package'] = new \Symfony\Component\Asset\PathPackage('', ($this->privates['assets.empty_version_strategy'] ??= new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy()), ($this->privates['assets.context'] ?? $this->getAssets_ContextService()));
    }

    /**
     * Gets the private 'assets.context' shared service.
     *
     * @return \Symfony\Component\Asset\Context\RequestStackContext
     */
    protected function getAssets_ContextService()
    {
        $a = ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService());

        return $this->privates['assets.context'] = new \Symfony\Component\Asset\Context\RequestStackContext(($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a->getBaseUrl(), $a->isSecure());
    }

    /**
     * Gets the private 'assets.empty_version_strategy' shared service.
     *
     * @return \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy
     */
    protected function getAssets_EmptyVersionStrategyService()
    {
        return $this->privates['assets.empty_version_strategy'] = new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy();
    }

    /**
     * Gets the private 'assets.packages' shared service.
     *
     * @return \Symfony\Component\Asset\Packages
     */
    protected function getAssets_PackagesService()
    {
        return $this->privates['assets.packages'] = new \Symfony\Component\Asset\Packages(($this->privates['assets._default_package'] ?? $this->getAssets_DefaultPackageService()), new RewindableGenerator(function () {
            return new \EmptyIterator();
        }, 0));
    }

    /**
     * Gets the private 'cache.annotations' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_AnnotationsService()
    {
        return $this->privates['cache.annotations'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(($this->privates['cache.annotations.recorder_inner'] ?? $this->getCache_Annotations_RecorderInnerService()));
    }

    /**
     * Gets the private 'cache.annotations.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Annotations_RecorderInnerService()
    {
        return $this->privates['cache.annotations.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('wtbwqaJV+N', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /**
     * Gets the private 'cache.app.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected function getCache_App_RecorderInnerService()
    {
        $this->privates['cache.app.recorder_inner'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('x9JHBQyWBd', 0, ($this->targetDir.''.'/pools/app'), ($this->privates['cache.default_marshaller'] ??= new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL, true)));

        $instance->setLogger(($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));

        return $instance;
    }

    /**
     * Gets the private 'cache.default_marshaller' shared service.
     *
     * @return \Symfony\Component\Cache\Marshaller\DefaultMarshaller
     */
    protected function getCache_DefaultMarshallerService()
    {
        return $this->privates['cache.default_marshaller'] = new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL, true);
    }

    /**
     * Gets the private 'cache.doctrine.orm.default.metadata' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected function getCache_Doctrine_Orm_Default_MetadataService()
    {
        return $this->privates['cache.doctrine.orm.default.metadata'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the private 'cache.doctrine.orm.default.query' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_Doctrine_Orm_Default_QueryService()
    {
        return $this->privates['cache.doctrine.orm.default.query'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(($this->privates['cache.doctrine.orm.default.query.recorder_inner'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
    }

    /**
     * Gets the private 'cache.doctrine.orm.default.query.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected function getCache_Doctrine_Orm_Default_Query_RecorderInnerService()
    {
        return $this->privates['cache.doctrine.orm.default.query.recorder_inner'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the private 'cache.doctrine.orm.default.result' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_Doctrine_Orm_Default_ResultService()
    {
        return $this->privates['cache.doctrine.orm.default.result'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(($this->privates['cache.doctrine.orm.default.result.recorder_inner'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
    }

    /**
     * Gets the private 'cache.doctrine.orm.default.result.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected function getCache_Doctrine_Orm_Default_Result_RecorderInnerService()
    {
        return $this->privates['cache.doctrine.orm.default.result.recorder_inner'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the private 'cache.property_info' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_PropertyInfoService()
    {
        return $this->privates['cache.property_info'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(($this->privates['cache.property_info.recorder_inner'] ?? $this->getCache_PropertyInfo_RecorderInnerService()));
    }

    /**
     * Gets the private 'cache.property_info.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_PropertyInfo_RecorderInnerService()
    {
        return $this->privates['cache.property_info.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('-05vgunuZM', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /**
     * Gets the private 'cache.security_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_SecurityExpressionLanguageService()
    {
        return $this->privates['cache.security_expression_language'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(($this->privates['cache.security_expression_language.recorder_inner'] ?? $this->getCache_SecurityExpressionLanguage_RecorderInnerService()));
    }

    /**
     * Gets the private 'cache.security_expression_language.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_SecurityExpressionLanguage_RecorderInnerService()
    {
        return $this->privates['cache.security_expression_language.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('B32pg9Z409', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /**
     * Gets the private 'cache.security_is_granted_attribute_expression_language.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_SecurityIsGrantedAttributeExpressionLanguage_RecorderInnerService()
    {
        return $this->privates['cache.security_is_granted_attribute_expression_language.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('gPqtUQ8pYo', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /**
     * Gets the private 'cache.serializer' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_SerializerService()
    {
        return $this->privates['cache.serializer'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(($this->privates['cache.serializer.recorder_inner'] ?? $this->getCache_Serializer_RecorderInnerService()));
    }

    /**
     * Gets the private 'cache.serializer.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Serializer_RecorderInnerService()
    {
        return $this->privates['cache.serializer.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('tleYvu2tB9', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /**
     * Gets the private 'cache.system.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_System_RecorderInnerService()
    {
        return $this->privates['cache.system.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('I9jcj6EK7-', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /**
     * Gets the private 'cache.validator' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_ValidatorService()
    {
        return $this->privates['cache.validator'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(($this->privates['cache.validator.recorder_inner'] ?? $this->getCache_Validator_RecorderInnerService()));
    }

    /**
     * Gets the private 'cache.validator.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Validator_RecorderInnerService()
    {
        return $this->privates['cache.validator.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('oftrlZCJ5U', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /**
     * Gets the private 'cache.validator_expression_language.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_ValidatorExpressionLanguage_RecorderInnerService()
    {
        return $this->privates['cache.validator_expression_language.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('0XStV3PpO+', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /**
     * Gets the private 'config_cache_factory' shared service.
     *
     * @return \Symfony\Component\Config\ResourceCheckerConfigCacheFactory
     */
    protected function getConfigCacheFactoryService()
    {
        return $this->privates['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory(new RewindableGenerator(function () {
            yield 0 => ($this->privates['dependency_injection.config.container_parameters_resource_checker'] ??= new \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker($this));
            yield 1 => ($this->privates['config.resource.self_checking_resource_checker'] ??= new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker());
        }, 2));
    }

    /**
     * Gets the private 'controller.cache_attribute_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener
     */
    protected function getController_CacheAttributeListenerService()
    {
        return $this->privates['controller.cache_attribute_listener'] = new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener();
    }

    /**
     * Gets the private 'controller.is_granted_attribute_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener
     */
    protected function getController_IsGrantedAttributeListenerService()
    {
        $a = ($this->services['jms_serializer.authorization_checker'] ?? $this->getJmsSerializer_AuthorizationCheckerService());

        if (isset($this->privates['controller.is_granted_attribute_listener'])) {
            return $this->privates['controller.is_granted_attribute_listener'];
        }

        return $this->privates['controller.is_granted_attribute_listener'] = new \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener($a, ($this->privates['security.is_granted_attribute_expression_language'] ?? $this->getSecurity_IsGrantedAttributeExpressionLanguageService()));
    }

    /**
     * Gets the private 'data_collector.ajax' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\AjaxDataCollector
     */
    protected function getDataCollector_AjaxService()
    {
        return $this->privates['data_collector.ajax'] = new \Symfony\Component\HttpKernel\DataCollector\AjaxDataCollector();
    }

    /**
     * Gets the private 'data_collector.cache' shared service.
     *
     * @return \Symfony\Component\Cache\DataCollector\CacheDataCollector
     */
    protected function getDataCollector_CacheService()
    {
        $this->privates['data_collector.cache'] = $instance = new \Symfony\Component\Cache\DataCollector\CacheDataCollector();

        $instance->addInstance('cache.app', ($this->services['cache.app'] ?? $this->getCache_AppService()));
        $instance->addInstance('cache.system', ($this->services['cache.system'] ?? $this->getCache_SystemService()));
        $instance->addInstance('cache.validator', ($this->privates['cache.validator'] ?? $this->getCache_ValidatorService()));
        $instance->addInstance('cache.serializer', ($this->privates['cache.serializer'] ?? $this->getCache_SerializerService()));
        $instance->addInstance('cache.annotations', ($this->privates['cache.annotations'] ?? $this->getCache_AnnotationsService()));
        $instance->addInstance('cache.property_info', ($this->privates['cache.property_info'] ?? $this->getCache_PropertyInfoService()));
        $instance->addInstance('cache.validator_expression_language', ($this->services['cache.validator_expression_language'] ?? $this->getCache_ValidatorExpressionLanguageService()));
        $instance->addInstance('cache.doctrine.orm.default.result', ($this->privates['cache.doctrine.orm.default.result'] ?? $this->getCache_Doctrine_Orm_Default_ResultService()));
        $instance->addInstance('cache.doctrine.orm.default.query', ($this->privates['cache.doctrine.orm.default.query'] ?? $this->getCache_Doctrine_Orm_Default_QueryService()));
        $instance->addInstance('cache.security_expression_language', ($this->privates['cache.security_expression_language'] ?? $this->getCache_SecurityExpressionLanguageService()));
        $instance->addInstance('cache.security_is_granted_attribute_expression_language', ($this->services['cache.security_is_granted_attribute_expression_language'] ?? $this->getCache_SecurityIsGrantedAttributeExpressionLanguageService()));

        return $instance;
    }

    /**
     * Gets the private 'data_collector.config' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector
     */
    protected function getDataCollector_ConfigService()
    {
        $this->privates['data_collector.config'] = $instance = new \Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector();

        if ($this->has('kernel')) {
            $instance->setKernel(($this->services['kernel'] ?? $this->get('kernel', 3)));
        }

        return $instance;
    }

    /**
     * Gets the private 'data_collector.doctrine' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector
     */
    protected function getDataCollector_DoctrineService()
    {
        return $this->privates['data_collector.doctrine'] = new \Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector(($this->services['doctrine'] ?? $this->getDoctrineService()), true, ($this->privates['doctrine.debug_data_holder'] ??= new \Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder([])));
    }

    /**
     * Gets the private 'data_collector.events' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\EventDataCollector
     */
    protected function getDataCollector_EventsService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['data_collector.events'])) {
            return $this->privates['data_collector.events'];
        }

        return $this->privates['data_collector.events'] = new \Symfony\Component\HttpKernel\DataCollector\EventDataCollector($a, ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'data_collector.exception' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector
     */
    protected function getDataCollector_ExceptionService()
    {
        return $this->privates['data_collector.exception'] = new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector();
    }

    /**
     * Gets the private 'data_collector.form' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataCollector
     */
    protected function getDataCollector_FormService()
    {
        return $this->privates['data_collector.form'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataCollector(($this->privates['data_collector.form.extractor'] ??= new \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor()));
    }

    /**
     * Gets the private 'data_collector.form.extractor' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor
     */
    protected function getDataCollector_Form_ExtractorService()
    {
        return $this->privates['data_collector.form.extractor'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor();
    }

    /**
     * Gets the private 'data_collector.http_client' shared service.
     *
     * @return \Symfony\Component\HttpClient\DataCollector\HttpClientDataCollector
     */
    protected function getDataCollector_HttpClientService()
    {
        $this->privates['data_collector.http_client'] = $instance = new \Symfony\Component\HttpClient\DataCollector\HttpClientDataCollector();

        $instance->registerClient('http_client', ($this->services['Symfony\\Contracts\\HttpClient\\HttpClientInterface'] ?? $this->getHttpClientInterfaceService()));
        $instance->registerClient('hwi_oauth.http_client', ($this->privates['.debug.hwi_oauth.http_client'] ?? $this->get_Debug_HwiOauth_HttpClientService()));

        return $instance;
    }

    /**
     * Gets the private 'data_collector.jms_serializer' shared service.
     *
     * @return \JMS\SerializerBundle\Debug\DataCollector
     */
    protected function getDataCollector_JmsSerializerService()
    {
        return $this->privates['data_collector.jms_serializer'] = new \JMS\SerializerBundle\Debug\DataCollector([], ($this->privates['jms_serializer.traceable_event_dispatcher'] ?? $this->getJmsSerializer_TraceableEventDispatcherService()), ($this->privates['jms_serializer.traceable_handler_registry'] ?? $this->getJmsSerializer_TraceableHandlerRegistryService()), ($this->privates['jms_serializer.traceable_metadata_factory'] ?? $this->getJmsSerializer_TraceableMetadataFactoryService()), ($this->privates['jms_serializer.metadata.traceable_file_locator'] ?? $this->getJmsSerializer_Metadata_TraceableFileLocatorService()), ($this->privates['jms_serializer.traceable_runs_listener'] ??= new \JMS\SerializerBundle\Debug\RunsListener()));
    }

    /**
     * Gets the private 'data_collector.logger' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector
     */
    protected function getDataCollector_LoggerService()
    {
        return $this->privates['data_collector.logger'] = new \Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector(($this->privates['monolog.logger.profiler'] ?? $this->getMonolog_Logger_ProfilerService()), ($this->targetDir.''.'/App_KernelTestDebugContainer'), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'data_collector.memory' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector
     */
    protected function getDataCollector_MemoryService()
    {
        return $this->privates['data_collector.memory'] = new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector();
    }

    /**
     * Gets the private 'data_collector.request' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector
     */
    protected function getDataCollector_RequestService()
    {
        return $this->privates['data_collector.request'] = new \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector(($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'data_collector.router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector
     */
    protected function getDataCollector_RouterService()
    {
        return $this->privates['data_collector.router'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector();
    }

    /**
     * Gets the private 'data_collector.security' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector
     */
    protected function getDataCollector_SecurityService()
    {
        $a = ($this->privates['debug.security.access.decision_manager'] ?? $this->getDebug_Security_Access_DecisionManagerService());

        if (isset($this->privates['data_collector.security'])) {
            return $this->privates['data_collector.security'];
        }
        $b = ($this->privates['security.firewall.map'] ?? $this->getSecurity_Firewall_MapService());

        if (isset($this->privates['data_collector.security'])) {
            return $this->privates['data_collector.security'];
        }
        $c = ($this->privates['debug.security.firewall'] ?? $this->getDebug_Security_FirewallService());

        if (isset($this->privates['data_collector.security'])) {
            return $this->privates['data_collector.security'];
        }

        return $this->privates['data_collector.security'] = new \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector(($this->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), ($this->privates['security.role_hierarchy'] ?? $this->getSecurity_RoleHierarchyService()), ($this->privates['security.logout_url_generator'] ?? $this->getSecurity_LogoutUrlGeneratorService()), $a, $b, $c);
    }

    /**
     * Gets the private 'data_collector.time' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\TimeDataCollector
     */
    protected function getDataCollector_TimeService()
    {
        return $this->privates['data_collector.time'] = new \Symfony\Component\HttpKernel\DataCollector\TimeDataCollector(($this->services['kernel'] ?? $this->get('kernel', 3)), ($this->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private 'data_collector.translation' shared service.
     *
     * @return \Symfony\Component\Translation\DataCollector\TranslationDataCollector
     */
    protected function getDataCollector_TranslationService()
    {
        return $this->privates['data_collector.translation'] = new \Symfony\Component\Translation\DataCollector\TranslationDataCollector(($this->services['translator'] ?? $this->getTranslatorService()));
    }

    /**
     * Gets the private 'data_collector.twig' shared service.
     *
     * @return \Symfony\Bridge\Twig\DataCollector\TwigDataCollector
     */
    protected function getDataCollector_TwigService()
    {
        $a = ($this->privates['twig'] ?? $this->getTwigService());

        if (isset($this->privates['data_collector.twig'])) {
            return $this->privates['data_collector.twig'];
        }

        return $this->privates['data_collector.twig'] = new \Symfony\Bridge\Twig\DataCollector\TwigDataCollector(($this->privates['twig.profile'] ??= new \Twig\Profiler\Profile()), $a);
    }

    /**
     * Gets the private 'data_collector.validator' shared service.
     *
     * @return \Symfony\Component\Validator\DataCollector\ValidatorDataCollector
     */
    protected function getDataCollector_ValidatorService()
    {
        $a = ($this->privates['debug.validator'] ?? $this->getDebug_ValidatorService());

        if (isset($this->privates['data_collector.validator'])) {
            return $this->privates['data_collector.validator'];
        }

        return $this->privates['data_collector.validator'] = new \Symfony\Component\Validator\DataCollector\ValidatorDataCollector($a);
    }

    /**
     * Gets the private 'debug.argument_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver
     */
    protected function getDebug_ArgumentResolverService()
    {
        $a = ($this->privates['debug.argument_resolver.inner'] ?? $this->getDebug_ArgumentResolver_InnerService());

        if (isset($this->privates['debug.argument_resolver'])) {
            return $this->privates['debug.argument_resolver'];
        }

        return $this->privates['debug.argument_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver($a, ($this->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private 'debug.argument_resolver.inner' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver
     */
    protected function getDebug_ArgumentResolver_InnerService()
    {
        return $this->privates['debug.argument_resolver.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(($this->privates['argument_metadata_factory'] ??= new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory()), new RewindableGenerator(function () {
            yield 0 => ($this->privates['debug.security.user_value_resolver'] ?? $this->load('getDebug_Security_UserValueResolverService'));
            yield 1 => ($this->privates['debug.doctrine.orm.entity_value_resolver'] ?? $this->load('getDebug_Doctrine_Orm_EntityValueResolverService'));
            yield 2 => ($this->privates['debug.argument_resolver.backed_enum_resolver'] ?? $this->load('getDebug_ArgumentResolver_BackedEnumResolverService'));
            yield 3 => ($this->privates['debug.argument_resolver.datetime'] ?? $this->load('getDebug_ArgumentResolver_DatetimeService'));
            yield 4 => ($this->privates['debug.argument_resolver.request_attribute'] ?? $this->load('getDebug_ArgumentResolver_RequestAttributeService'));
            yield 5 => ($this->privates['debug.argument_resolver.request'] ?? $this->load('getDebug_ArgumentResolver_RequestService'));
            yield 6 => ($this->privates['debug.argument_resolver.session'] ?? $this->load('getDebug_ArgumentResolver_SessionService'));
            yield 7 => ($this->privates['debug.argument_resolver.service'] ?? $this->load('getDebug_ArgumentResolver_ServiceService'));
            yield 8 => ($this->privates['debug.argument_resolver.default'] ?? $this->load('getDebug_ArgumentResolver_DefaultService'));
            yield 9 => ($this->privates['debug.argument_resolver.variadic'] ?? $this->load('getDebug_ArgumentResolver_VariadicService'));
            yield 10 => ($this->privates['debug.argument_resolver.not_tagged_controller'] ?? $this->load('getDebug_ArgumentResolver_NotTaggedControllerService'));
        }, 11));
    }

    /**
     * Gets the private 'debug.controller_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver
     */
    protected function getDebug_ControllerResolverService()
    {
        return $this->privates['debug.controller_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver(($this->privates['debug.controller_resolver.inner'] ?? $this->getDebug_ControllerResolver_InnerService()), ($this->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private 'debug.controller_resolver.inner' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver
     */
    protected function getDebug_ControllerResolver_InnerService()
    {
        return $this->privates['debug.controller_resolver.inner'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService()));
    }

    /**
     * Gets the private 'debug.debug_handlers_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        return $this->privates['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, ($this->privates['monolog.logger.php'] ?? $this->getMonolog_Logger_PhpService()), NULL, -1, true, true, ($this->services['monolog.logger.deprecation'] ?? $this->getMonolog_Logger_DeprecationService()));
    }

    /**
     * Gets the private 'debug.event_dispatcher.inner' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected function getDebug_EventDispatcher_InnerService()
    {
        return $this->privates['debug.event_dispatcher.inner'] = new \Symfony\Component\EventDispatcher\EventDispatcher();
    }

    /**
     * Gets the private 'debug.file_link_formatter' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\FileLinkFormatter
     */
    protected function getDebug_FileLinkFormatterService()
    {
        return $this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter($this->getEnv('default::SYMFONY_IDE'), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), \dirname(__DIR__, 6), #[\Closure(name: 'debug.file_link_formatter.url_format', class: 'string')] function () {
            return ($this->privates['debug.file_link_formatter.url_format'] ?? $this->load('getDebug_FileLinkFormatter_UrlFormatService'));
        });
    }

    /**
     * Gets the private 'debug.log_processor' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Processor\DebugProcessor
     */
    protected function getDebug_LogProcessorService()
    {
        return $this->privates['debug.log_processor'] = new \Symfony\Bridge\Monolog\Processor\DebugProcessor(($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'debug.security.access.decision_manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager
     */
    protected function getDebug_Security_Access_DecisionManagerService()
    {
        $a = ($this->privates['debug.security.access.decision_manager.inner'] ?? $this->getDebug_Security_Access_DecisionManager_InnerService());

        if (isset($this->privates['debug.security.access.decision_manager'])) {
            return $this->privates['debug.security.access.decision_manager'];
        }

        return $this->privates['debug.security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager($a);
    }

    /**
     * Gets the private 'debug.security.access.decision_manager.inner' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager
     */
    protected function getDebug_Security_Access_DecisionManager_InnerService()
    {
        return $this->privates['debug.security.access.decision_manager.inner'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(new RewindableGenerator(function () {
            yield 0 => ($this->privates['debug.security.voter.security.access.authenticated_voter'] ?? $this->load('getDebug_Security_Voter_Security_Access_AuthenticatedVoterService'));
            yield 1 => ($this->privates['debug.security.voter.security.access.role_hierarchy_voter'] ?? $this->load('getDebug_Security_Voter_Security_Access_RoleHierarchyVoterService'));
            yield 2 => ($this->privates['debug.security.voter.security.access.expression_voter'] ?? $this->load('getDebug_Security_Voter_Security_Access_ExpressionVoterService'));
            yield 3 => ($this->privates['debug.security.voter.AppBundle\\Security\\SwitchToDefaultUserVoter'] ?? $this->load('getSwitchToDefaultUserVoter2Service'));
        }, 4), new \Symfony\Component\Security\Core\Authorization\Strategy\AffirmativeStrategy(false));
    }

    /**
     * Gets the private 'debug.security.firewall' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener
     */
    protected function getDebug_Security_FirewallService()
    {
        $a = ($this->privates['security.firewall.map'] ?? $this->getSecurity_Firewall_MapService());

        if (isset($this->privates['debug.security.firewall'])) {
            return $this->privates['debug.security.firewall'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['debug.security.firewall'])) {
            return $this->privates['debug.security.firewall'];
        }

        return $this->privates['debug.security.firewall'] = new \Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener($a, $b, ($this->privates['security.logout_url_generator'] ?? $this->getSecurity_LogoutUrlGeneratorService()));
    }

    /**
     * Gets the private 'debug.stopwatch' shared service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch
     */
    protected function getDebug_StopwatchService()
    {
        return $this->privates['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true);
    }

    /**
     * Gets the private 'debug.validator' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\TraceableValidator
     */
    protected function getDebug_ValidatorService()
    {
        $a = ($this->privates['debug.validator.inner'] ?? $this->getDebug_Validator_InnerService());

        if (isset($this->privates['debug.validator'])) {
            return $this->privates['debug.validator'];
        }

        return $this->privates['debug.validator'] = new \Symfony\Component\Validator\Validator\TraceableValidator($a);
    }

    /**
     * Gets the private 'debug.validator.inner' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface
     */
    protected function getDebug_Validator_InnerService()
    {
        $a = ($this->privates['validator.builder'] ?? $this->getValidator_BuilderService());

        if (isset($this->privates['debug.validator.inner'])) {
            return $this->privates['debug.validator.inner'];
        }

        return $this->privates['debug.validator.inner'] = $a->getValidator();
    }

    /**
     * Gets the private 'disallow_search_engine_index_response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener
     */
    protected function getDisallowSearchEngineIndexResponseListenerService()
    {
        return $this->privates['disallow_search_engine_index_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener();
    }

    /**
     * Gets the private 'doctrine.dbal.connection_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this->privates['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory([]);
    }

    /**
     * Gets the private 'doctrine.dbal.default_connection.configuration' shared service.
     *
     * @return \Doctrine\DBAL\Configuration
     */
    protected function getDoctrine_Dbal_DefaultConnection_ConfigurationService()
    {
        $this->privates['doctrine.dbal.default_connection.configuration'] = $instance = new \Doctrine\DBAL\Configuration();

        $a = new \Doctrine\Bundle\DoctrineBundle\Middleware\DebugMiddleware(($this->privates['doctrine.debug_data_holder'] ??= new \Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder([])), ($this->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
        $a->setConnectionName('default');

        $instance->setSchemaManagerFactory(($this->privates['doctrine.dbal.legacy_schema_manager_factory'] ??= new \Doctrine\DBAL\Schema\LegacySchemaManagerFactory()));
        $instance->setMiddlewares([0 => new \Doctrine\DBAL\Logging\Middleware(($this->privates['monolog.logger.doctrine'] ?? $this->getMonolog_Logger_DoctrineService())), 1 => $a]);

        return $instance;
    }

    /**
     * Gets the private 'doctrine.dbal.default_connection.event_manager' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\ContainerAwareEventManager
     */
    protected function getDoctrine_Dbal_DefaultConnection_EventManagerService()
    {
        return $this->privates['doctrine.dbal.default_connection.event_manager'] = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'doctrine.orm.default_listeners.attach_entity_listeners' => ['privates', 'doctrine.orm.default_listeners.attach_entity_listeners', 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService', true],
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_subscriber' => ['privates', 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_subscriber', 'getDoctrine_Orm_Listeners_DoctrineDbalCacheAdapterSchemaSubscriberService', true],
            'doctrine.orm.listeners.doctrine_token_provider_schema_subscriber' => ['privates', 'doctrine.orm.listeners.doctrine_token_provider_schema_subscriber', 'getDoctrine_Orm_Listeners_DoctrineTokenProviderSchemaSubscriberService', true],
            'stof_doctrine_extensions.listener.loggable' => ['privates', 'stof_doctrine_extensions.listener.loggable', 'getStofDoctrineExtensions_Listener_LoggableService', false],
        ], [
            'doctrine.orm.default_listeners.attach_entity_listeners' => '?',
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_subscriber' => '?',
            'doctrine.orm.listeners.doctrine_token_provider_schema_subscriber' => '?',
            'stof_doctrine_extensions.listener.loggable' => '?',
        ]), [0 => 'stof_doctrine_extensions.listener.loggable', 1 => 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_subscriber', 2 => 'doctrine.orm.listeners.doctrine_token_provider_schema_subscriber', 3 => [0 => [0 => 'loadClassMetadata'], 1 => 'doctrine.orm.default_listeners.attach_entity_listeners']]);
    }

    /**
     * Gets the private 'doctrine.dbal.legacy_schema_manager_factory' shared service.
     *
     * @return \Doctrine\DBAL\Schema\LegacySchemaManagerFactory
     */
    protected function getDoctrine_Dbal_LegacySchemaManagerFactoryService()
    {
        return $this->privates['doctrine.dbal.legacy_schema_manager_factory'] = new \Doctrine\DBAL\Schema\LegacySchemaManagerFactory();
    }

    /**
     * Gets the private 'doctrine.debug_data_holder' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder
     */
    protected function getDoctrine_DebugDataHolderService()
    {
        return $this->privates['doctrine.debug_data_holder'] = new \Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder([]);
    }

    /**
     * Gets the private 'doctrine.orm.container_repository_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory
     */
    protected function getDoctrine_Orm_ContainerRepositoryFactoryService()
    {
        return $this->privates['doctrine.orm.container_repository_factory'] = new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'AppBundle\\Repository\\CategoryRepository' => ['privates', 'AppBundle\\Repository\\CategoryRepository', 'getCategoryRepositoryService', false],
            'AppBundle\\Repository\\Category\\ApprovalMessageRepository' => ['privates', 'AppBundle\\Repository\\Category\\ApprovalMessageRepository', 'getApprovalMessageRepositoryService', true],
            'AppBundle\\Repository\\Category\\ApprovalRepository' => ['privates', 'AppBundle\\Repository\\Category\\ApprovalRepository', 'getApprovalRepositoryService', true],
            'AppBundle\\Repository\\Category\\NotNewAnymoreRepository' => ['privates', 'AppBundle\\Repository\\Category\\NotNewAnymoreRepository', 'getNotNewAnymoreRepositoryService', false],
            'AppBundle\\Repository\\Component\\MenuAside\\CustomLinkRepository' => ['privates', 'AppBundle\\Repository\\Component\\MenuAside\\CustomLinkRepository', 'getCustomLinkRepositoryService', false],
            'AppBundle\\Repository\\ConfigRepository' => ['privates', 'AppBundle\\Repository\\ConfigRepository', 'getConfigRepositoryService', false],
            'AppBundle\\Repository\\ConnectionRepository' => ['privates', 'AppBundle\\Repository\\ConnectionRepository', 'getConnectionRepositoryService', false],
            'AppBundle\\Repository\\Connection\\Mediacockpit\\AssetRepository' => ['privates', 'AppBundle\\Repository\\Connection\\Mediacockpit\\AssetRepository', 'getAssetRepositoryService', false],
            'AppBundle\\Repository\\Connection\\Mediacockpit\\AttributeRepository' => ['privates', 'AppBundle\\Repository\\Connection\\Mediacockpit\\AttributeRepository', 'getAttributeRepositoryService', false],
            'AppBundle\\Repository\\Connection\\Mediacockpit\\AttributeStandardValueRepository' => ['privates', 'AppBundle\\Repository\\Connection\\Mediacockpit\\AttributeStandardValueRepository', 'getAttributeStandardValueRepositoryService', true],
            'AppBundle\\Repository\\Connection\\Mediacockpit\\CollectionRepository' => ['privates', 'AppBundle\\Repository\\Connection\\Mediacockpit\\CollectionRepository', 'getCollectionRepositoryService', false],
            'AppBundle\\Repository\\DashboardRepository' => ['privates', 'AppBundle\\Repository\\DashboardRepository', 'getDashboardRepositoryService', false],
            'AppBundle\\Repository\\Dashboard\\SettingRepository' => ['privates', 'AppBundle\\Repository\\Dashboard\\SettingRepository', 'getSettingRepositoryService', true],
            'AppBundle\\Repository\\ElementRepository' => ['privates', 'AppBundle\\Repository\\ElementRepository', 'getElementRepositoryService', false],
            'AppBundle\\Repository\\Element\\ElementCommentRepository' => ['privates', 'AppBundle\\Repository\\Element\\ElementCommentRepository', 'getElementCommentRepositoryService', false],
            'AppBundle\\Repository\\Element\\ElementFileRepository' => ['privates', 'AppBundle\\Repository\\Element\\ElementFileRepository', 'getElementFileRepositoryService', false],
            'AppBundle\\Repository\\FileRepository' => ['privates', 'AppBundle\\Repository\\FileRepository', 'getFileRepositoryService', false],
            'AppBundle\\Repository\\File\\AttributeRepository' => ['privates', 'AppBundle\\Repository\\File\\AttributeRepository', 'getAttributeRepository2Service', false],
            'AppBundle\\Repository\\File\\TagRepository' => ['privates', 'AppBundle\\Repository\\File\\TagRepository', 'getTagRepositoryService', true],
            'AppBundle\\Repository\\LogRepository' => ['privates', 'AppBundle\\Repository\\LogRepository', 'getLogRepositoryService', false],
            'AppBundle\\Repository\\Metrics\\CategoryByUserRepository' => ['privates', 'AppBundle\\Repository\\Metrics\\CategoryByUserRepository', 'getCategoryByUserRepositoryService', false],
            'AppBundle\\Repository\\Metrics\\CategoryDailyRepository' => ['privates', 'AppBundle\\Repository\\Metrics\\CategoryDailyRepository', 'getCategoryDailyRepositoryService', true],
            'AppBundle\\Repository\\Metrics\\CategoryGlobalRepository' => ['privates', 'AppBundle\\Repository\\Metrics\\CategoryGlobalRepository', 'getCategoryGlobalRepositoryService', false],
            'AppBundle\\Repository\\Metrics\\LoginDailyByUserRepository' => ['privates', 'AppBundle\\Repository\\Metrics\\LoginDailyByUserRepository', 'getLoginDailyByUserRepositoryService', true],
            'AppBundle\\Repository\\Metrics\\LoginRepository' => ['privates', 'AppBundle\\Repository\\Metrics\\LoginRepository', 'getLoginRepositoryService', true],
            'AppBundle\\Repository\\SearchedRepository' => ['privates', 'AppBundle\\Repository\\SearchedRepository', 'getSearchedRepositoryService', true],
            'AppBundle\\Repository\\Setting\\ColorRepository' => ['privates', 'AppBundle\\Repository\\Setting\\ColorRepository', 'getColorRepositoryService', false],
            'AppBundle\\Repository\\Setting\\DocumentationRepository' => ['privates', 'AppBundle\\Repository\\Setting\\DocumentationRepository', 'getDocumentationRepositoryService', true],
            'AppBundle\\Repository\\Setting\\Feature\\DownloadCenterTextRepository' => ['privates', 'AppBundle\\Repository\\Setting\\Feature\\DownloadCenterTextRepository', 'getDownloadCenterTextRepositoryService', true],
            'AppBundle\\Repository\\Setting\\Feature\\NewsCategoryRepository' => ['privates', 'AppBundle\\Repository\\Setting\\Feature\\NewsCategoryRepository', 'getNewsCategoryRepositoryService', false],
            'AppBundle\\Repository\\Setting\\Feature\\NewsRepository' => ['privates', 'AppBundle\\Repository\\Setting\\Feature\\NewsRepository', 'getNewsRepositoryService', false],
            'AppBundle\\Repository\\Setting\\Feature\\NewsTranslationRepository' => ['privates', 'AppBundle\\Repository\\Setting\\Feature\\NewsTranslationRepository', 'getNewsTranslationRepositoryService', true],
            'AppBundle\\Repository\\Setting\\FontRepository' => ['privates', 'AppBundle\\Repository\\Setting\\FontRepository', 'getFontRepositoryService', false],
            'AppBundle\\Repository\\Setting\\LocaleRepository' => ['privates', 'AppBundle\\Repository\\Setting\\LocaleRepository', 'getLocaleRepositoryService', false],
            'AppBundle\\Repository\\Setting\\SourceRepository' => ['privates', 'AppBundle\\Repository\\Setting\\SourceRepository', 'getSourceRepositoryService', false],
            'AppBundle\\Repository\\Setting\\StyleRepository' => ['privates', 'AppBundle\\Repository\\Setting\\StyleRepository', 'getStyleRepositoryService', true],
            'AppBundle\\Repository\\Setting\\TemplateRepository' => ['privates', 'AppBundle\\Repository\\Setting\\TemplateRepository', 'getTemplateRepositoryService', true],
            'AppBundle\\Repository\\Setting\\ThemeRepository' => ['privates', 'AppBundle\\Repository\\Setting\\ThemeRepository', 'getThemeRepositoryService', false],
            'AppBundle\\Repository\\ShareRepository' => ['privates', 'AppBundle\\Repository\\ShareRepository', 'getShareRepositoryService', true],
            'AppBundle\\Repository\\ShortLinkRepository' => ['privates', 'AppBundle\\Repository\\ShortLinkRepository', 'getShortLinkRepositoryService', true],
            'AppBundle\\Repository\\SmartBlock\\AnnotationRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\AnnotationRepository', 'getAnnotationRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\Attribute\\AttributeRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\Attribute\\AttributeRepository', 'getAttributeRepository3Service', true],
            'AppBundle\\Repository\\SmartBlock\\Attribute\\ChoiceRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\Attribute\\ChoiceRepository', 'getChoiceRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\Attribute\\ColorRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\Attribute\\ColorRepository', 'getColorRepository2Service', false],
            'AppBundle\\Repository\\SmartBlock\\Attribute\\TureOrFalseRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\Attribute\\TureOrFalseRepository', 'getTureOrFalseRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\Attribute\\UserRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\Attribute\\UserRepository', 'getUserRepository2Service', false],
            'AppBundle\\Repository\\SmartBlock\\ChapterTeaserItemRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\ChapterTeaserItemRepository', 'getChapterTeaserItemRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\DoDontRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\DoDontRepository', 'getDoDontRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\IconCategoryRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\IconCategoryRepository', 'getIconCategoryRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\IconCollectionRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\IconCollectionRepository', 'getIconCollectionRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\IconDownloadRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\IconDownloadRepository', 'getIconDownloadRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\IconList\\IconAttributeRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\IconList\\IconAttributeRepository', 'getIconAttributeRepositoryService', true],
            'AppBundle\\Repository\\SmartBlock\\IconList\\IconFileRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\IconList\\IconFileRepository', 'getIconFileRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\IconList\\IconRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\IconList\\IconRepository', 'getIconRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\IconTagRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\IconTagRepository', 'getIconTagRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\SearchedRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\SearchedRepository', 'getSearchedRepository2Service', true],
            'AppBundle\\Repository\\SmartBlock\\Slider\\SlideRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\Slider\\SlideRepository', 'getSlideRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\SpacesSpaceRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\SpacesSpaceRepository', 'getSpacesSpaceRepositoryService', false],
            'AppBundle\\Repository\\SmartBlock\\Table\\TableRowRepository' => ['privates', 'AppBundle\\Repository\\SmartBlock\\Table\\TableRowRepository', 'getTableRowRepositoryService', false],
            'AppBundle\\Repository\\SmartTool\\Framing\\FramingFormatRepository' => ['privates', 'AppBundle\\Repository\\SmartTool\\Framing\\FramingFormatRepository', 'getFramingFormatRepositoryService', true],
            'AppBundle\\Repository\\SmartTool\\Framing\\FramingGroupRepository' => ['privates', 'AppBundle\\Repository\\SmartTool\\Framing\\FramingGroupRepository', 'getFramingGroupRepositoryService', true],
            'AppBundle\\Repository\\SmartTool\\Framing\\FramingMediaRepository' => ['privates', 'AppBundle\\Repository\\SmartTool\\Framing\\FramingMediaRepository', 'getFramingMediaRepositoryService', false],
            'AppBundle\\Repository\\SmartTool\\Inspiration\\EyeCatcherRepository' => ['privates', 'AppBundle\\Repository\\SmartTool\\Inspiration\\EyeCatcherRepository', 'getEyeCatcherRepositoryService', false],
            'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationCommentRepository' => ['privates', 'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationCommentRepository', 'getInspirationCommentRepositoryService', true],
            'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationFileRepository' => ['privates', 'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationFileRepository', 'getInspirationFileRepositoryService', false],
            'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationRepository' => ['privates', 'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationRepository', 'getInspirationRepositoryService', false],
            'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagRepository' => ['privates', 'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagRepository', 'getInspirationTagRepositoryService', false],
            'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagTypeRepository' => ['privates', 'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagTypeRepository', 'getInspirationTagTypeRepositoryService', false],
            'AppBundle\\Repository\\SpaceRepository' => ['privates', 'AppBundle\\Repository\\SpaceRepository', 'getSpaceRepositoryService', false],
            'AppBundle\\Repository\\System\\CronjobRepository' => ['privates', 'AppBundle\\Repository\\System\\CronjobRepository', 'getCronjobRepositoryService', false],
            'AppBundle\\Repository\\TranslationRepository' => ['privates', 'AppBundle\\Repository\\TranslationRepository', 'getTranslationRepositoryService', false],
            'AppBundle\\Repository\\UserRepository' => ['privates', 'AppBundle\\Repository\\UserRepository', 'getUserRepositoryService', false],
            'AppBundle\\Repository\\User\\AccessTokenRepository' => ['privates', 'AppBundle\\Repository\\User\\AccessTokenRepository', 'getAccessTokenRepositoryService', true],
            'AppBundle\\Repository\\User\\ActivityRepository' => ['privates', 'AppBundle\\Repository\\User\\ActivityRepository', 'getActivityRepositoryService', true],
            'AppBundle\\Repository\\User\\BookmarkRepository' => ['privates', 'AppBundle\\Repository\\User\\BookmarkRepository', 'getBookmarkRepositoryService', false],
            'AppBundle\\Repository\\User\\GroupRepository' => ['privates', 'AppBundle\\Repository\\User\\GroupRepository', 'getGroupRepositoryService', false],
            'AppBundle\\Repository\\User\\SettingsRepository' => ['privates', 'AppBundle\\Repository\\User\\SettingsRepository', 'getSettingsRepositoryService', false],
            'AppBundle\\Repository\\myHub\\FileTransferFileRepository' => ['privates', 'AppBundle\\Repository\\myHub\\FileTransferFileRepository', 'getFileTransferFileRepositoryService', true],
            'AppBundle\\Repository\\myHub\\FileTransferRepository' => ['privates', 'AppBundle\\Repository\\myHub\\FileTransferRepository', 'getFileTransferRepositoryService', false],
            'AppBundle\\Repository\\myHub\\QrCodeRepository' => ['privates', 'AppBundle\\Repository\\myHub\\QrCodeRepository', 'getQrCodeRepositoryService', false],
        ], [
            'AppBundle\\Repository\\CategoryRepository' => '?',
            'AppBundle\\Repository\\Category\\ApprovalMessageRepository' => '?',
            'AppBundle\\Repository\\Category\\ApprovalRepository' => '?',
            'AppBundle\\Repository\\Category\\NotNewAnymoreRepository' => '?',
            'AppBundle\\Repository\\Component\\MenuAside\\CustomLinkRepository' => '?',
            'AppBundle\\Repository\\ConfigRepository' => '?',
            'AppBundle\\Repository\\ConnectionRepository' => '?',
            'AppBundle\\Repository\\Connection\\Mediacockpit\\AssetRepository' => '?',
            'AppBundle\\Repository\\Connection\\Mediacockpit\\AttributeRepository' => '?',
            'AppBundle\\Repository\\Connection\\Mediacockpit\\AttributeStandardValueRepository' => '?',
            'AppBundle\\Repository\\Connection\\Mediacockpit\\CollectionRepository' => '?',
            'AppBundle\\Repository\\DashboardRepository' => '?',
            'AppBundle\\Repository\\Dashboard\\SettingRepository' => '?',
            'AppBundle\\Repository\\ElementRepository' => '?',
            'AppBundle\\Repository\\Element\\ElementCommentRepository' => '?',
            'AppBundle\\Repository\\Element\\ElementFileRepository' => '?',
            'AppBundle\\Repository\\FileRepository' => '?',
            'AppBundle\\Repository\\File\\AttributeRepository' => '?',
            'AppBundle\\Repository\\File\\TagRepository' => '?',
            'AppBundle\\Repository\\LogRepository' => '?',
            'AppBundle\\Repository\\Metrics\\CategoryByUserRepository' => '?',
            'AppBundle\\Repository\\Metrics\\CategoryDailyRepository' => '?',
            'AppBundle\\Repository\\Metrics\\CategoryGlobalRepository' => '?',
            'AppBundle\\Repository\\Metrics\\LoginDailyByUserRepository' => '?',
            'AppBundle\\Repository\\Metrics\\LoginRepository' => '?',
            'AppBundle\\Repository\\SearchedRepository' => '?',
            'AppBundle\\Repository\\Setting\\ColorRepository' => '?',
            'AppBundle\\Repository\\Setting\\DocumentationRepository' => '?',
            'AppBundle\\Repository\\Setting\\Feature\\DownloadCenterTextRepository' => '?',
            'AppBundle\\Repository\\Setting\\Feature\\NewsCategoryRepository' => '?',
            'AppBundle\\Repository\\Setting\\Feature\\NewsRepository' => '?',
            'AppBundle\\Repository\\Setting\\Feature\\NewsTranslationRepository' => '?',
            'AppBundle\\Repository\\Setting\\FontRepository' => '?',
            'AppBundle\\Repository\\Setting\\LocaleRepository' => '?',
            'AppBundle\\Repository\\Setting\\SourceRepository' => '?',
            'AppBundle\\Repository\\Setting\\StyleRepository' => '?',
            'AppBundle\\Repository\\Setting\\TemplateRepository' => '?',
            'AppBundle\\Repository\\Setting\\ThemeRepository' => '?',
            'AppBundle\\Repository\\ShareRepository' => '?',
            'AppBundle\\Repository\\ShortLinkRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\AnnotationRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\Attribute\\AttributeRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\Attribute\\ChoiceRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\Attribute\\ColorRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\Attribute\\TureOrFalseRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\Attribute\\UserRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\ChapterTeaserItemRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\DoDontRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\IconCategoryRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\IconCollectionRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\IconDownloadRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\IconList\\IconAttributeRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\IconList\\IconFileRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\IconList\\IconRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\IconTagRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\SearchedRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\Slider\\SlideRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\SpacesSpaceRepository' => '?',
            'AppBundle\\Repository\\SmartBlock\\Table\\TableRowRepository' => '?',
            'AppBundle\\Repository\\SmartTool\\Framing\\FramingFormatRepository' => '?',
            'AppBundle\\Repository\\SmartTool\\Framing\\FramingGroupRepository' => '?',
            'AppBundle\\Repository\\SmartTool\\Framing\\FramingMediaRepository' => '?',
            'AppBundle\\Repository\\SmartTool\\Inspiration\\EyeCatcherRepository' => '?',
            'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationCommentRepository' => '?',
            'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationFileRepository' => '?',
            'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationRepository' => '?',
            'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagRepository' => '?',
            'AppBundle\\Repository\\SmartTool\\Inspiration\\InspirationTagTypeRepository' => '?',
            'AppBundle\\Repository\\SpaceRepository' => '?',
            'AppBundle\\Repository\\System\\CronjobRepository' => '?',
            'AppBundle\\Repository\\TranslationRepository' => '?',
            'AppBundle\\Repository\\UserRepository' => '?',
            'AppBundle\\Repository\\User\\AccessTokenRepository' => '?',
            'AppBundle\\Repository\\User\\ActivityRepository' => '?',
            'AppBundle\\Repository\\User\\BookmarkRepository' => '?',
            'AppBundle\\Repository\\User\\GroupRepository' => '?',
            'AppBundle\\Repository\\User\\SettingsRepository' => '?',
            'AppBundle\\Repository\\myHub\\FileTransferFileRepository' => '?',
            'AppBundle\\Repository\\myHub\\FileTransferRepository' => '?',
            'AppBundle\\Repository\\myHub\\QrCodeRepository' => '?',
        ]));
    }

    /**
     * Gets the private 'doctrine.orm.default_attribute_metadata_driver' shared service.
     *
     * @return \Doctrine\ORM\Mapping\Driver\AttributeDriver
     */
    protected function getDoctrine_Orm_DefaultAttributeMetadataDriverService()
    {
        return $this->privates['doctrine.orm.default_attribute_metadata_driver'] = new \Doctrine\ORM\Mapping\Driver\AttributeDriver([0 => (\dirname(__DIR__, 6).'/src/Entity'), 1 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Entity'), 2 => (\dirname(__DIR__, 6).'/vendor/gedmo/doctrine-extensions/src/Loggable/Entity')]);
    }

    /**
     * Gets the private 'doctrine.orm.default_configuration' shared service.
     *
     * @return \Doctrine\ORM\Configuration
     */
    protected function getDoctrine_Orm_DefaultConfigurationService()
    {
        $this->privates['doctrine.orm.default_configuration'] = $instance = new \Doctrine\ORM\Configuration();

        $instance->setEntityNamespaces(['App' => 'App\\Entity', 'AppBundle' => 'AppBundle\\Entity', 'GedmoLoggable' => 'Gedmo\\Loggable\\Entity']);
        $instance->setMetadataCache(($this->privates['cache.doctrine.orm.default.metadata'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $instance->setQueryCache(($this->privates['cache.doctrine.orm.default.query'] ?? $this->getCache_Doctrine_Orm_Default_QueryService()));
        $instance->setResultCache(($this->privates['cache.doctrine.orm.default.result'] ?? $this->getCache_Doctrine_Orm_Default_ResultService()));
        $instance->setMetadataDriverImpl(($this->privates['.doctrine.orm.default_metadata_driver'] ?? $this->get_Doctrine_Orm_DefaultMetadataDriverService()));
        $instance->setProxyDir(($this->targetDir.''.'/doctrine/orm/Proxies'));
        $instance->setProxyNamespace('Proxies');
        $instance->setAutoGenerateProxyClasses(true);
        $instance->setSchemaIgnoreClasses([]);
        $instance->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $instance->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $instance->setNamingStrategy(($this->privates['doctrine.orm.naming_strategy.underscore_number_aware'] ??= new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true)));
        $instance->setQuoteStrategy(($this->privates['doctrine.orm.quote_strategy.default'] ??= new \Doctrine\ORM\Mapping\DefaultQuoteStrategy()));
        $instance->setEntityListenerResolver(($this->privates['doctrine.orm.default_entity_listener_resolver'] ??= new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($this)));
        $instance->setLazyGhostObjectEnabled(true);
        $instance->setRepositoryFactory(($this->privates['doctrine.orm.container_repository_factory'] ?? $this->getDoctrine_Orm_ContainerRepositoryFactoryService()));
        $instance->addCustomStringFunction('MATCH_AGAINST', 'AppBundle\\Domain\\Doctrine\\MatchAgainst');

        return $instance;
    }

    /**
     * Gets the private 'doctrine.orm.default_entity_listener_resolver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver
     */
    protected function getDoctrine_Orm_DefaultEntityListenerResolverService()
    {
        return $this->privates['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($this);
    }

    /**
     * Gets the private 'doctrine.orm.default_entity_manager.validator_loader' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineLoader
     */
    protected function getDoctrine_Orm_DefaultEntityManager_ValidatorLoaderService()
    {
        $a = ($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService());

        if (isset($this->privates['doctrine.orm.default_entity_manager.validator_loader'])) {
            return $this->privates['doctrine.orm.default_entity_manager.validator_loader'];
        }

        return $this->privates['doctrine.orm.default_entity_manager.validator_loader'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineLoader($a, NULL);
    }

    /**
     * Gets the private 'doctrine.orm.default_manager_configurator' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator
     */
    protected function getDoctrine_Orm_DefaultManagerConfiguratorService()
    {
        return $this->privates['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []);
    }

    /**
     * Gets the private 'doctrine.orm.naming_strategy.underscore_number_aware' shared service.
     *
     * @return \Doctrine\ORM\Mapping\UnderscoreNamingStrategy
     */
    protected function getDoctrine_Orm_NamingStrategy_UnderscoreNumberAwareService()
    {
        return $this->privates['doctrine.orm.naming_strategy.underscore_number_aware'] = new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true);
    }

    /**
     * Gets the private 'doctrine.orm.quote_strategy.default' shared service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultQuoteStrategy
     */
    protected function getDoctrine_Orm_QuoteStrategy_DefaultService()
    {
        return $this->privates['doctrine.orm.quote_strategy.default'] = new \Doctrine\ORM\Mapping\DefaultQuoteStrategy();
    }

    /**
     * Gets the private 'doctrine.orm.validator_initializer' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer
     */
    protected function getDoctrine_Orm_ValidatorInitializerService()
    {
        return $this->privates['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer(($this->services['doctrine'] ?? $this->getDoctrineService()));
    }

    /**
     * Gets the private 'doctrine.twig.doctrine_extension' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension
     */
    protected function getDoctrine_Twig_DoctrineExtensionService()
    {
        return $this->privates['doctrine.twig.doctrine_extension'] = new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension();
    }

    /**
     * Gets the private 'exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorListener
     */
    protected function getExceptionListenerService()
    {
        return $this->privates['exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorListener('error_controller', ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService()), true, []);
    }

    /**
     * Gets the private 'form.extension' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension
     */
    protected function getForm_ExtensionService()
    {
        return $this->privates['form.extension'] = new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'AppBundle\\Form\\AccordionCollectionType' => ['privates', 'AppBundle\\Form\\AccordionCollectionType', 'getAccordionCollectionTypeService', true],
            'AppBundle\\Form\\Base64UploadFormType' => ['privates', 'AppBundle\\Form\\Base64UploadFormType', 'getBase64UploadFormTypeService', true],
            'AppBundle\\Form\\Base64UploadType' => ['privates', 'AppBundle\\Form\\Base64UploadType', 'getBase64UploadTypeService', true],
            'AppBundle\\Form\\BootstrapCollectionType' => ['privates', 'AppBundle\\Form\\BootstrapCollectionType', 'getBootstrapCollectionTypeService', true],
            'AppBundle\\Form\\Category\\ApprovalMessageFormType' => ['privates', 'AppBundle\\Form\\Category\\ApprovalMessageFormType', 'getApprovalMessageFormTypeService', true],
            'AppBundle\\Form\\Category\\ManageFormType' => ['privates', 'AppBundle\\Form\\Category\\ManageFormType', 'getManageFormTypeService', true],
            'AppBundle\\Form\\CollectionUploadType' => ['privates', 'AppBundle\\Form\\CollectionUploadType', 'getCollectionUploadTypeService', true],
            'AppBundle\\Form\\Component\\MenuAside\\CustomLinkType' => ['privates', 'AppBundle\\Form\\Component\\MenuAside\\CustomLinkType', 'getCustomLinkTypeService', true],
            'AppBundle\\Form\\Component\\MenuAside\\CustomLinksFormType' => ['privates', 'AppBundle\\Form\\Component\\MenuAside\\CustomLinksFormType', 'getCustomLinksFormTypeService', true],
            'AppBundle\\Form\\ConfigFormType' => ['privates', 'AppBundle\\Form\\ConfigFormType', 'getConfigFormTypeService', true],
            'AppBundle\\Form\\DashboardFormType' => ['privates', 'AppBundle\\Form\\DashboardFormType', 'getDashboardFormTypeService', true],
            'AppBundle\\Form\\DateRangeType' => ['privates', 'AppBundle\\Form\\DateRangeType', 'getDateRangeTypeService', true],
            'AppBundle\\Form\\DeleteFormType' => ['privates', 'AppBundle\\Form\\DeleteFormType', 'getDeleteFormTypeService', true],
            'AppBundle\\Form\\Element\\AliasRelationFormType' => ['privates', 'AppBundle\\Form\\Element\\AliasRelationFormType', 'getAliasRelationFormTypeService', true],
            'AppBundle\\Form\\Element\\CommentFormType' => ['privates', 'AppBundle\\Form\\Element\\CommentFormType', 'getCommentFormTypeService', true],
            'AppBundle\\Form\\Element\\ContactFormType' => ['privates', 'AppBundle\\Form\\Element\\ContactFormType', 'getContactFormTypeService', true],
            'AppBundle\\Form\\Element\\ContentFormType' => ['privates', 'AppBundle\\Form\\Element\\ContentFormType', 'getContentFormTypeService', true],
            'AppBundle\\Form\\Element\\ElementFormType' => ['privates', 'AppBundle\\Form\\Element\\ElementFormType', 'getElementFormTypeService', true],
            'AppBundle\\Form\\Element\\LinkFormType' => ['privates', 'AppBundle\\Form\\Element\\LinkFormType', 'getLinkFormTypeService', true],
            'AppBundle\\Form\\Element\\QuickEditFormType' => ['privates', 'AppBundle\\Form\\Element\\QuickEditFormType', 'getQuickEditFormTypeService', true],
            'AppBundle\\Form\\Element\\SimpleTranslateFormType' => ['privates', 'AppBundle\\Form\\Element\\SimpleTranslateFormType', 'getSimpleTranslateFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\AccordionFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\AccordionFormType', 'getAccordionFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\AccordionHeadlineFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\AccordionHeadlineFormType', 'getAccordionHeadlineFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\AnnotationEntryType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\AnnotationEntryType', 'getAnnotationEntryTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\AnnotationFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\AnnotationFormType', 'getAnnotationFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\AttachmentConfirmFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\AttachmentConfirmFormType', 'getAttachmentConfirmFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\AttachmentFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\AttachmentFormType', 'getAttachmentFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\AudioFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\AudioFormType', 'getAudioFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\ChapterTeaserItemFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\ChapterTeaserItemFormType', 'getChapterTeaserItemFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\CodeFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\CodeFormType', 'getCodeFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\ColorsEntryFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\ColorsEntryFormType', 'getColorsEntryFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\ColorsFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\ColorsFormType', 'getColorsFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\ColumnsFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\ColumnsFormType', 'getColumnsFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\ContactFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\ContactFormType', 'getContactFormType2Service', true],
            'AppBundle\\Form\\Element\\SmartBlock\\ContactPersonDataFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\ContactPersonDataFormType', 'getContactPersonDataFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\ContactPersonFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\ContactPersonFormType', 'getContactPersonFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\CtaButtonFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\CtaButtonFormType', 'getCtaButtonFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\DividerFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\DividerFormType', 'getDividerFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\DoDontItemFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\DoDontItemFormType', 'getDoDontItemFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\Framing\\DownloadEntryFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\Framing\\DownloadEntryFormType', 'getDownloadEntryFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\Framing\\DownloadFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\Framing\\DownloadFormType', 'getDownloadFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\Framing\\ToolFramingFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\Framing\\ToolFramingFormType', 'getToolFramingFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\Framing\\ToolFramingMediaFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\Framing\\ToolFramingMediaFormType', 'getToolFramingMediaFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\GalleryFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\GalleryFormType', 'getGalleryFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\HeadlineContentFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\HeadlineContentFormType', 'getHeadlineContentFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\HtmlFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\HtmlFormType', 'getHtmlFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\IconListFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\IconListFormType', 'getIconListFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\CategoryFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\IconList\\CategoryFormType', 'getCategoryFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\CollectionFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\IconList\\CollectionFormType', 'getCollectionFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\DownloadFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\IconList\\DownloadFormType', 'getDownloadFormType2Service', true],
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\IconAdditionalFilesFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\IconList\\IconAdditionalFilesFormType', 'getIconAdditionalFilesFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\IconFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\IconList\\IconFormType', 'getIconFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\TagFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\IconList\\TagFormType', 'getTagFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\ImageContentFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\ImageContentFormType', 'getImageContentFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\ImageConvertFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\ImageConvertFormType', 'getImageConvertFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\ImageFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\ImageFormType', 'getImageFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\Inspiration\\ToolInspirationItemFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\Inspiration\\ToolInspirationItemFormType', 'getToolInspirationItemFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\LottieFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\LottieFormType', 'getLottieFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\Mediacockpit\\AttributeFilterFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\Mediacockpit\\AttributeFilterFormType', 'getAttributeFilterFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\Mediacockpit\\AttributeFolderFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\Mediacockpit\\AttributeFolderFormType', 'getAttributeFolderFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\Mediacockpit\\AttributeListViewAvailabilityFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\Mediacockpit\\AttributeListViewAvailabilityFormType', 'getAttributeListViewAvailabilityFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\NoteFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\NoteFormType', 'getNoteFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\PatternFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\PatternFormType', 'getPatternFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\SliderFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\SliderFormType', 'getSliderFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\SliderSlideFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\SliderSlideFormType', 'getSliderSlideFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\SpacesFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\SpacesFormType', 'getSpacesFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\SpacesSpaceFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\SpacesSpaceFormType', 'getSpacesSpaceFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\TableFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\TableFormType', 'getTableFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\Table\\ColumnAdvancedFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\Table\\ColumnAdvancedFormType', 'getColumnAdvancedFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\Table\\ColumnInlineFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\Table\\ColumnInlineFormType', 'getColumnInlineFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\TeaserFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\TeaserFormType', 'getTeaserFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\TextFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\TextFormType', 'getTextFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\ToolInspirationFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\ToolInspirationFormType', 'getToolInspirationFormTypeService', true],
            'AppBundle\\Form\\Element\\SmartBlock\\VideoFormType' => ['privates', 'AppBundle\\Form\\Element\\SmartBlock\\VideoFormType', 'getVideoFormTypeService', true],
            'AppBundle\\Form\\Element\\TranslateFormType' => ['privates', 'AppBundle\\Form\\Element\\TranslateFormType', 'getTranslateFormTypeService', true],
            'AppBundle\\Form\\Feature\\Connection\\MediacockpitImageDialogFormType' => ['privates', 'AppBundle\\Form\\Feature\\Connection\\MediacockpitImageDialogFormType', 'getMediacockpitImageDialogFormTypeService', true],
            'AppBundle\\Form\\File\\ChunkedUploadType' => ['privates', 'AppBundle\\Form\\File\\ChunkedUploadType', 'getChunkedUploadTypeService', true],
            'AppBundle\\Form\\File\\DetachFormType' => ['privates', 'AppBundle\\Form\\File\\DetachFormType', 'getDetachFormTypeService', true],
            'AppBundle\\Form\\File\\EditFormType' => ['privates', 'AppBundle\\Form\\File\\EditFormType', 'getEditFormTypeService', true],
            'AppBundle\\Form\\File\\RenameFormType' => ['privates', 'AppBundle\\Form\\File\\RenameFormType', 'getRenameFormTypeService', true],
            'AppBundle\\Form\\InternalLinkFormType' => ['privates', 'AppBundle\\Form\\InternalLinkFormType', 'getInternalLinkFormTypeService', true],
            'AppBundle\\Form\\InvitationFormType' => ['privates', 'AppBundle\\Form\\InvitationFormType', 'getInvitationFormTypeService', true],
            'AppBundle\\Form\\Setting\\Analytics\\FilterFormType' => ['privates', 'AppBundle\\Form\\Setting\\Analytics\\FilterFormType', 'getFilterFormTypeService', true],
            'AppBundle\\Form\\Setting\\ColorFormType' => ['privates', 'AppBundle\\Form\\Setting\\ColorFormType', 'getColorFormTypeService', true],
            'AppBundle\\Form\\Setting\\Connection\\ManageFormType' => ['privates', 'AppBundle\\Form\\Setting\\Connection\\ManageFormType', 'getManageFormType2Service', true],
            'AppBundle\\Form\\Setting\\Connection\\MediacockpitAttributeFormType' => ['privates', 'AppBundle\\Form\\Setting\\Connection\\MediacockpitAttributeFormType', 'getMediacockpitAttributeFormTypeService', true],
            'AppBundle\\Form\\Setting\\Connection\\MediacockpitAttributesFormType' => ['privates', 'AppBundle\\Form\\Setting\\Connection\\MediacockpitAttributesFormType', 'getMediacockpitAttributesFormTypeService', true],
            'AppBundle\\Form\\Setting\\Feature\\ApprovalFormType' => ['privates', 'AppBundle\\Form\\Setting\\Feature\\ApprovalFormType', 'getApprovalFormTypeService', true],
            'AppBundle\\Form\\Setting\\Feature\\NewsCategoryFormType' => ['privates', 'AppBundle\\Form\\Setting\\Feature\\NewsCategoryFormType', 'getNewsCategoryFormTypeService', true],
            'AppBundle\\Form\\Setting\\Feature\\NewsFormType' => ['privates', 'AppBundle\\Form\\Setting\\Feature\\NewsFormType', 'getNewsFormTypeService', true],
            'AppBundle\\Form\\Setting\\Feature\\NewsSettingsFormType' => ['privates', 'AppBundle\\Form\\Setting\\Feature\\NewsSettingsFormType', 'getNewsSettingsFormTypeService', true],
            'AppBundle\\Form\\Setting\\Feature\\NewsTranslationFormType' => ['privates', 'AppBundle\\Form\\Setting\\Feature\\NewsTranslationFormType', 'getNewsTranslationFormTypeService', true],
            'AppBundle\\Form\\Setting\\FontFormType' => ['privates', 'AppBundle\\Form\\Setting\\FontFormType', 'getFontFormTypeService', true],
            'AppBundle\\Form\\Setting\\GlobalContactFormType' => ['privates', 'AppBundle\\Form\\Setting\\GlobalContactFormType', 'getGlobalContactFormTypeService', true],
            'AppBundle\\Form\\Setting\\LocaleExportFormType' => ['privates', 'AppBundle\\Form\\Setting\\LocaleExportFormType', 'getLocaleExportFormTypeService', true],
            'AppBundle\\Form\\Setting\\LocaleFormType' => ['privates', 'AppBundle\\Form\\Setting\\LocaleFormType', 'getLocaleFormTypeService', true],
            'AppBundle\\Form\\Setting\\LocaleImportFormType' => ['privates', 'AppBundle\\Form\\Setting\\LocaleImportFormType', 'getLocaleImportFormTypeService', true],
            'AppBundle\\Form\\Setting\\SmartTool\\Framing\\FormatFormType' => ['privates', 'AppBundle\\Form\\Setting\\SmartTool\\Framing\\FormatFormType', 'getFormatFormTypeService', true],
            'AppBundle\\Form\\Setting\\SmartTool\\Framing\\GroupFormType' => ['privates', 'AppBundle\\Form\\Setting\\SmartTool\\Framing\\GroupFormType', 'getGroupFormTypeService', true],
            'AppBundle\\Form\\Setting\\SmartTool\\Inspiration\\EyeCatcherFormType' => ['privates', 'AppBundle\\Form\\Setting\\SmartTool\\Inspiration\\EyeCatcherFormType', 'getEyeCatcherFormTypeService', true],
            'AppBundle\\Form\\Setting\\SourceFormType' => ['privates', 'AppBundle\\Form\\Setting\\SourceFormType', 'getSourceFormTypeService', true],
            'AppBundle\\Form\\Setting\\StyleFormType' => ['privates', 'AppBundle\\Form\\Setting\\StyleFormType', 'getStyleFormTypeService', true],
            'AppBundle\\Form\\Setting\\TemplateFormType' => ['privates', 'AppBundle\\Form\\Setting\\TemplateFormType', 'getTemplateFormTypeService', true],
            'AppBundle\\Form\\Setting\\ThemeFormType' => ['privates', 'AppBundle\\Form\\Setting\\ThemeFormType', 'getThemeFormTypeService', true],
            'AppBundle\\Form\\Setting\\ToolInspirationTagFormType' => ['privates', 'AppBundle\\Form\\Setting\\ToolInspirationTagFormType', 'getToolInspirationTagFormTypeService', true],
            'AppBundle\\Form\\Setting\\ToolInspirationTagTypeFormType' => ['privates', 'AppBundle\\Form\\Setting\\ToolInspirationTagTypeFormType', 'getToolInspirationTagTypeFormTypeService', true],
            'AppBundle\\Form\\Setting\\VendorFormType' => ['privates', 'AppBundle\\Form\\Setting\\VendorFormType', 'getVendorFormTypeService', true],
            'AppBundle\\Form\\ShareFormType' => ['privates', 'AppBundle\\Form\\ShareFormType', 'getShareFormTypeService', true],
            'AppBundle\\Form\\SpaceFormType' => ['privates', 'AppBundle\\Form\\SpaceFormType', 'getSpaceFormTypeService', true],
            'AppBundle\\Form\\UserFormType' => ['privates', 'AppBundle\\Form\\UserFormType', 'getUserFormTypeService', true],
            'AppBundle\\Form\\User\\ChangePasswordFormType' => ['privates', 'AppBundle\\Form\\User\\ChangePasswordFormType', 'getChangePasswordFormTypeService', true],
            'AppBundle\\Form\\User\\ExportFormType' => ['privates', 'AppBundle\\Form\\User\\ExportFormType', 'getExportFormTypeService', true],
            'AppBundle\\Form\\User\\GroupFormType' => ['privates', 'AppBundle\\Form\\User\\GroupFormType', 'getGroupFormType2Service', true],
            'AppBundle\\Form\\User\\GroupRemoveFormType' => ['privates', 'AppBundle\\Form\\User\\GroupRemoveFormType', 'getGroupRemoveFormTypeService', true],
            'AppBundle\\Form\\User\\ResettingFormType' => ['privates', 'AppBundle\\Form\\User\\ResettingFormType', 'getResettingFormTypeService', true],
            'AppBundle\\Form\\User\\UserImport\\MappingFormType' => ['privates', 'AppBundle\\Form\\User\\UserImport\\MappingFormType', 'getMappingFormTypeService', true],
            'AppBundle\\Form\\User\\UserImport\\RightsFormType' => ['privates', 'AppBundle\\Form\\User\\UserImport\\RightsFormType', 'getRightsFormTypeService', true],
            'AppBundle\\Form\\User\\UserImport\\UploadFileFormType' => ['privates', 'AppBundle\\Form\\User\\UserImport\\UploadFileFormType', 'getUploadFileFormTypeService', true],
            'AppBundle\\Form\\myHub\\FileTransferFormType' => ['privates', 'AppBundle\\Form\\myHub\\FileTransferFormType', 'getFileTransferFormTypeService', true],
            'AppBundle\\Form\\myHub\\QrCodeDownloadFormType' => ['privates', 'AppBundle\\Form\\myHub\\QrCodeDownloadFormType', 'getQrCodeDownloadFormTypeService', true],
            'AppBundle\\Form\\myHub\\QrCodeFormType' => ['privates', 'AppBundle\\Form\\myHub\\QrCodeFormType', 'getQrCodeFormTypeService', true],
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => ['privates', 'form.type.entity', 'getForm_Type_EntityService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => ['privates', 'form.type.choice', 'getForm_Type_ChoiceService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => ['privates', 'form.type.color', 'getForm_Type_ColorService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => ['privates', 'form.type.file', 'getForm_Type_FileService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => ['privates', 'form.type.form', 'getForm_Type_FormService', true],
        ], [
            'AppBundle\\Form\\AccordionCollectionType' => '?',
            'AppBundle\\Form\\Base64UploadFormType' => '?',
            'AppBundle\\Form\\Base64UploadType' => '?',
            'AppBundle\\Form\\BootstrapCollectionType' => '?',
            'AppBundle\\Form\\Category\\ApprovalMessageFormType' => '?',
            'AppBundle\\Form\\Category\\ManageFormType' => '?',
            'AppBundle\\Form\\CollectionUploadType' => '?',
            'AppBundle\\Form\\Component\\MenuAside\\CustomLinkType' => '?',
            'AppBundle\\Form\\Component\\MenuAside\\CustomLinksFormType' => '?',
            'AppBundle\\Form\\ConfigFormType' => '?',
            'AppBundle\\Form\\DashboardFormType' => '?',
            'AppBundle\\Form\\DateRangeType' => '?',
            'AppBundle\\Form\\DeleteFormType' => '?',
            'AppBundle\\Form\\Element\\AliasRelationFormType' => '?',
            'AppBundle\\Form\\Element\\CommentFormType' => '?',
            'AppBundle\\Form\\Element\\ContactFormType' => '?',
            'AppBundle\\Form\\Element\\ContentFormType' => '?',
            'AppBundle\\Form\\Element\\ElementFormType' => '?',
            'AppBundle\\Form\\Element\\LinkFormType' => '?',
            'AppBundle\\Form\\Element\\QuickEditFormType' => '?',
            'AppBundle\\Form\\Element\\SimpleTranslateFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\AccordionFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\AccordionHeadlineFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\AnnotationEntryType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\AnnotationFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\AttachmentConfirmFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\AttachmentFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\AudioFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\ChapterTeaserItemFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\CodeFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\ColorsEntryFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\ColorsFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\ColumnsFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\ContactFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\ContactPersonDataFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\ContactPersonFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\CtaButtonFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\DividerFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\DoDontItemFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\Framing\\DownloadEntryFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\Framing\\DownloadFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\Framing\\ToolFramingFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\Framing\\ToolFramingMediaFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\GalleryFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\HeadlineContentFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\HtmlFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\IconListFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\CategoryFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\CollectionFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\DownloadFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\IconAdditionalFilesFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\IconFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\IconList\\TagFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\ImageContentFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\ImageConvertFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\ImageFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\Inspiration\\ToolInspirationItemFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\LottieFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\Mediacockpit\\AttributeFilterFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\Mediacockpit\\AttributeFolderFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\Mediacockpit\\AttributeListViewAvailabilityFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\NoteFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\PatternFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\SliderFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\SliderSlideFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\SpacesFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\SpacesSpaceFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\TableFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\Table\\ColumnAdvancedFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\Table\\ColumnInlineFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\TeaserFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\TextFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\ToolInspirationFormType' => '?',
            'AppBundle\\Form\\Element\\SmartBlock\\VideoFormType' => '?',
            'AppBundle\\Form\\Element\\TranslateFormType' => '?',
            'AppBundle\\Form\\Feature\\Connection\\MediacockpitImageDialogFormType' => '?',
            'AppBundle\\Form\\File\\ChunkedUploadType' => '?',
            'AppBundle\\Form\\File\\DetachFormType' => '?',
            'AppBundle\\Form\\File\\EditFormType' => '?',
            'AppBundle\\Form\\File\\RenameFormType' => '?',
            'AppBundle\\Form\\InternalLinkFormType' => '?',
            'AppBundle\\Form\\InvitationFormType' => '?',
            'AppBundle\\Form\\Setting\\Analytics\\FilterFormType' => '?',
            'AppBundle\\Form\\Setting\\ColorFormType' => '?',
            'AppBundle\\Form\\Setting\\Connection\\ManageFormType' => '?',
            'AppBundle\\Form\\Setting\\Connection\\MediacockpitAttributeFormType' => '?',
            'AppBundle\\Form\\Setting\\Connection\\MediacockpitAttributesFormType' => '?',
            'AppBundle\\Form\\Setting\\Feature\\ApprovalFormType' => '?',
            'AppBundle\\Form\\Setting\\Feature\\NewsCategoryFormType' => '?',
            'AppBundle\\Form\\Setting\\Feature\\NewsFormType' => '?',
            'AppBundle\\Form\\Setting\\Feature\\NewsSettingsFormType' => '?',
            'AppBundle\\Form\\Setting\\Feature\\NewsTranslationFormType' => '?',
            'AppBundle\\Form\\Setting\\FontFormType' => '?',
            'AppBundle\\Form\\Setting\\GlobalContactFormType' => '?',
            'AppBundle\\Form\\Setting\\LocaleExportFormType' => '?',
            'AppBundle\\Form\\Setting\\LocaleFormType' => '?',
            'AppBundle\\Form\\Setting\\LocaleImportFormType' => '?',
            'AppBundle\\Form\\Setting\\SmartTool\\Framing\\FormatFormType' => '?',
            'AppBundle\\Form\\Setting\\SmartTool\\Framing\\GroupFormType' => '?',
            'AppBundle\\Form\\Setting\\SmartTool\\Inspiration\\EyeCatcherFormType' => '?',
            'AppBundle\\Form\\Setting\\SourceFormType' => '?',
            'AppBundle\\Form\\Setting\\StyleFormType' => '?',
            'AppBundle\\Form\\Setting\\TemplateFormType' => '?',
            'AppBundle\\Form\\Setting\\ThemeFormType' => '?',
            'AppBundle\\Form\\Setting\\ToolInspirationTagFormType' => '?',
            'AppBundle\\Form\\Setting\\ToolInspirationTagTypeFormType' => '?',
            'AppBundle\\Form\\Setting\\VendorFormType' => '?',
            'AppBundle\\Form\\ShareFormType' => '?',
            'AppBundle\\Form\\SpaceFormType' => '?',
            'AppBundle\\Form\\UserFormType' => '?',
            'AppBundle\\Form\\User\\ChangePasswordFormType' => '?',
            'AppBundle\\Form\\User\\ExportFormType' => '?',
            'AppBundle\\Form\\User\\GroupFormType' => '?',
            'AppBundle\\Form\\User\\GroupRemoveFormType' => '?',
            'AppBundle\\Form\\User\\ResettingFormType' => '?',
            'AppBundle\\Form\\User\\UserImport\\MappingFormType' => '?',
            'AppBundle\\Form\\User\\UserImport\\RightsFormType' => '?',
            'AppBundle\\Form\\User\\UserImport\\UploadFileFormType' => '?',
            'AppBundle\\Form\\myHub\\FileTransferFormType' => '?',
            'AppBundle\\Form\\myHub\\QrCodeDownloadFormType' => '?',
            'AppBundle\\Form\\myHub\\QrCodeFormType' => '?',
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => '?',
        ]), ['Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['form.type_extension.form.transformation_failure_handling'] ?? $this->load('getForm_TypeExtension_Form_TransformationFailureHandlingService'));
            yield 1 => ($this->privates['form.type_extension.form.http_foundation'] ?? $this->load('getForm_TypeExtension_Form_HttpFoundationService'));
            yield 2 => ($this->privates['form.type_extension.form.validator'] ?? $this->load('getForm_TypeExtension_Form_ValidatorService'));
            yield 3 => ($this->privates['form.type_extension.upload.validator'] ?? $this->load('getForm_TypeExtension_Upload_ValidatorService'));
            yield 4 => ($this->privates['form.type_extension.csrf'] ?? $this->load('getForm_TypeExtension_CsrfService'));
            yield 5 => ($this->privates['form.type_extension.form.data_collector'] ?? $this->load('getForm_TypeExtension_Form_DataCollectorService'));
            yield 6 => ($this->privates['form.type_extension.form.password_hasher'] ?? $this->load('getForm_TypeExtension_Form_PasswordHasherService'));
            yield 7 => ($this->privates['craue.form.flow.form_extension'] ??= new \Craue\FormFlowBundle\Form\Extension\FormFlowFormExtension());
        }, 8), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['form.type_extension.repeated.validator'] ??= new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension());
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['form.type_extension.submit.validator'] ??= new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension());
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\PasswordType' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['form.type_extension.password.password_hasher'] ?? $this->load('getForm_TypeExtension_Password_PasswordHasherService'));
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\HiddenType' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['craue.form.flow.hidden_field_extension'] ??= new \Craue\FormFlowBundle\Form\Extension\FormFlowHiddenFieldExtension());
        }, 1)], new RewindableGenerator(function () {
            yield 0 => ($this->privates['form.type_guesser.validator'] ?? $this->load('getForm_TypeGuesser_ValidatorService'));
            yield 1 => ($this->privates['form.type_guesser.doctrine'] ?? $this->load('getForm_TypeGuesser_DoctrineService'));
        }, 2));
    }

    /**
     * Gets the private 'form.factory' shared service.
     *
     * @return \Symfony\Component\Form\FormFactory
     */
    protected function getForm_FactoryService()
    {
        $a = ($this->privates['form.registry'] ?? $this->getForm_RegistryService());

        if (isset($this->privates['form.factory'])) {
            return $this->privates['form.factory'];
        }

        return $this->privates['form.factory'] = new \Symfony\Component\Form\FormFactory($a);
    }

    /**
     * Gets the private 'form.registry' shared service.
     *
     * @return \Symfony\Component\Form\FormRegistry
     */
    protected function getForm_RegistryService()
    {
        $a = ($this->privates['form.extension'] ?? $this->getForm_ExtensionService());

        if (isset($this->privates['form.registry'])) {
            return $this->privates['form.registry'];
        }

        return $this->privates['form.registry'] = new \Symfony\Component\Form\FormRegistry([0 => $a], ($this->privates['form.resolved_type_factory'] ?? $this->getForm_ResolvedTypeFactoryService()));
    }

    /**
     * Gets the private 'form.resolved_type_factory' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy
     */
    protected function getForm_ResolvedTypeFactoryService()
    {
        return $this->privates['form.resolved_type_factory'] = new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), ($this->privates['data_collector.form'] ?? $this->getDataCollector_FormService()));
    }

    /**
     * Gets the private 'framework_extra_bundle.argument_name_convertor' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter
     */
    protected function getFrameworkExtraBundle_ArgumentNameConvertorService()
    {
        return $this->privates['framework_extra_bundle.argument_name_convertor'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter(($this->privates['argument_metadata_factory'] ??= new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory()));
    }

    /**
     * Gets the private 'framework_extra_bundle.date_time_param_converter' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter
     */
    protected function getFrameworkExtraBundle_DateTimeParamConverterService()
    {
        return $this->privates['framework_extra_bundle.date_time_param_converter'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter();
    }

    /**
     * Gets the private 'framework_extra_bundle.event.is_granted' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener
     */
    protected function getFrameworkExtraBundle_Event_IsGrantedService()
    {
        $a = ($this->services['jms_serializer.authorization_checker'] ?? $this->getJmsSerializer_AuthorizationCheckerService());

        if (isset($this->privates['framework_extra_bundle.event.is_granted'])) {
            return $this->privates['framework_extra_bundle.event.is_granted'];
        }

        return $this->privates['framework_extra_bundle.event.is_granted'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener(($this->privates['framework_extra_bundle.argument_name_convertor'] ?? $this->getFrameworkExtraBundle_ArgumentNameConvertorService()), $a);
    }

    /**
     * Gets the private 'httplug.collector.collector' shared service.
     *
     * @return \Http\HttplugBundle\Collector\Collector
     */
    protected function getHttplug_Collector_CollectorService()
    {
        return $this->privates['httplug.collector.collector'] = new \Http\HttplugBundle\Collector\Collector(0);
    }

    /**
     * Gets the private 'httplug.collector.formatter' shared service.
     *
     * @return \Http\HttplugBundle\Collector\Formatter
     */
    protected function getHttplug_Collector_FormatterService()
    {
        return $this->privates['httplug.collector.formatter'] = new \Http\HttplugBundle\Collector\Formatter(($this->privates['httplug.formatter.full_http_message'] ??= new \Http\Message\Formatter\FullHttpMessageFormatter(0)), new \Http\Message\Formatter\CurlCommandFormatter());
    }

    /**
     * Gets the private 'httplug.collector.twig.http_message' shared service.
     *
     * @return \Http\HttplugBundle\Collector\Twig\HttpMessageMarkupExtension
     */
    protected function getHttplug_Collector_Twig_HttpMessageService()
    {
        return $this->privates['httplug.collector.twig.http_message'] = new \Http\HttplugBundle\Collector\Twig\HttpMessageMarkupExtension(NULL, NULL);
    }

    /**
     * Gets the private 'httplug.formatter.full_http_message' shared service.
     *
     * @return \Http\Message\Formatter\FullHttpMessageFormatter
     */
    protected function getHttplug_Formatter_FullHttpMessageService()
    {
        return $this->privates['httplug.formatter.full_http_message'] = new \Http\Message\Formatter\FullHttpMessageFormatter(0);
    }

    /**
     * Gets the private 'httplug.strategy_listener' shared service.
     *
     * @return \Http\HttplugBundle\Discovery\ConfiguredClientsStrategyListener
     */
    protected function getHttplug_StrategyListenerService()
    {
        return $this->privates['httplug.strategy_listener'] = new \Http\HttplugBundle\Discovery\ConfiguredClientsStrategyListener();
    }

    /**
     * Gets the private 'hwi_oauth.twig.extension.oauth' shared service.
     *
     * @return \HWI\Bundle\OAuthBundle\Twig\Extension\OAuthExtension
     */
    protected function getHwiOauth_Twig_Extension_OauthService()
    {
        return $this->privates['hwi_oauth.twig.extension.oauth'] = new \HWI\Bundle\OAuthBundle\Twig\Extension\OAuthExtension();
    }

    /**
     * Gets the private 'identity_translator' shared service.
     *
     * @return \Symfony\Component\Translation\IdentityTranslator
     */
    protected function getIdentityTranslatorService()
    {
        return $this->privates['identity_translator'] = new \Symfony\Component\Translation\IdentityTranslator();
    }

    /**
     * Gets the private 'jms_serializer.event_dispatcher.service_locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getJmsSerializer_EventDispatcher_ServiceLocatorService()
    {
        return $this->privates['jms_serializer.event_dispatcher.service_locator'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'jms_serializer.stopwatch_subscriber' => ['privates', 'jms_serializer.stopwatch_subscriber', 'getJmsSerializer_StopwatchSubscriberService', true],
            'jms_serializer.traceable_runs_listener' => ['privates', 'jms_serializer.traceable_runs_listener', 'getJmsSerializer_TraceableRunsListenerService', false],
            'jms_serializer.doctrine_proxy_subscriber' => ['privates', 'jms_serializer.doctrine_proxy_subscriber', 'getJmsSerializer_DoctrineProxySubscriberService', true],
        ], [
            'jms_serializer.stopwatch_subscriber' => '?',
            'jms_serializer.traceable_runs_listener' => '?',
            'jms_serializer.doctrine_proxy_subscriber' => '?',
        ]);
    }

    /**
     * Gets the private 'jms_serializer.handler_registry.service_locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getJmsSerializer_HandlerRegistry_ServiceLocatorService()
    {
        return $this->privates['jms_serializer.handler_registry.service_locator'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'jms_serializer.array_collection_handler' => ['privates', 'jms_serializer.array_collection_handler', 'getJmsSerializer_ArrayCollectionHandlerService', true],
            'jms_serializer.constraint_violation_handler' => ['privates', 'jms_serializer.constraint_violation_handler', 'getJmsSerializer_ConstraintViolationHandlerService', true],
            'jms_serializer.datetime_handler' => ['privates', 'jms_serializer.datetime_handler', 'getJmsSerializer_DatetimeHandlerService', true],
            'jms_serializer.form_error_handler' => ['privates', 'jms_serializer.form_error_handler', 'getJmsSerializer_FormErrorHandlerService', true],
            'jms_serializer.iterator_handler' => ['privates', 'jms_serializer.iterator_handler', 'getJmsSerializer_IteratorHandlerService', true],
        ], [
            'jms_serializer.array_collection_handler' => '?',
            'jms_serializer.constraint_violation_handler' => '?',
            'jms_serializer.datetime_handler' => '?',
            'jms_serializer.form_error_handler' => '?',
            'jms_serializer.iterator_handler' => '?',
        ]);
    }

    /**
     * Gets the private 'jms_serializer.metadata.cache.file_cache' shared service.
     *
     * @return \Metadata\Cache\FileCache
     */
    protected function getJmsSerializer_Metadata_Cache_FileCacheService()
    {
        return $this->privates['jms_serializer.metadata.cache.file_cache'] = new \Metadata\Cache\FileCache(($this->targetDir.''.'/jms_serializer'));
    }

    /**
     * Gets the private 'jms_serializer.metadata.lazy_loading_driver' shared service.
     *
     * @return \Metadata\Driver\LazyLoadingDriver
     */
    protected function getJmsSerializer_Metadata_LazyLoadingDriverService()
    {
        return $this->privates['jms_serializer.metadata.lazy_loading_driver'] = new \Metadata\Driver\LazyLoadingDriver(($this->privates['jms_serializer.metadata.service_locator'] ?? $this->getJmsSerializer_Metadata_ServiceLocatorService()), 'metadata_driver');
    }

    /**
     * Gets the private 'jms_serializer.metadata.service_locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getJmsSerializer_Metadata_ServiceLocatorService()
    {
        return $this->privates['jms_serializer.metadata.service_locator'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'metadata_driver' => ['services', 'jms_serializer.metadata_driver', 'getJmsSerializer_MetadataDriverService', true],
        ], [
            'metadata_driver' => '?',
        ]);
    }

    /**
     * Gets the private 'jms_serializer.metadata.traceable_file_locator' shared service.
     *
     * @return \JMS\SerializerBundle\Debug\TraceableFileLocator
     */
    protected function getJmsSerializer_Metadata_TraceableFileLocatorService()
    {
        return $this->privates['jms_serializer.metadata.traceable_file_locator'] = new \JMS\SerializerBundle\Debug\TraceableFileLocator(($this->privates['jms_serializer.metadata.traceable_file_locator.inner'] ??= new \Metadata\Driver\FileLocator([])));
    }

    /**
     * Gets the private 'jms_serializer.metadata.traceable_file_locator.inner' shared service.
     *
     * @return \Metadata\Driver\FileLocator
     */
    protected function getJmsSerializer_Metadata_TraceableFileLocator_InnerService()
    {
        return $this->privates['jms_serializer.metadata.traceable_file_locator.inner'] = new \Metadata\Driver\FileLocator([]);
    }

    /**
     * Gets the private 'jms_serializer.traceable_event_dispatcher' shared service.
     *
     * @return \JMS\SerializerBundle\Debug\TraceableEventDispatcher
     */
    protected function getJmsSerializer_TraceableEventDispatcherService()
    {
        $this->privates['jms_serializer.traceable_event_dispatcher'] = $instance = new \JMS\SerializerBundle\Debug\TraceableEventDispatcher(($this->privates['jms_serializer.event_dispatcher.service_locator'] ?? $this->getJmsSerializer_EventDispatcher_ServiceLocatorService()));

        $instance->addListener('serializer.pre_serialize', [0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPreSerialize'], NULL, NULL, NULL);
        $instance->addListener('serializer.pre_serialize', [0 => 'jms_serializer.traceable_runs_listener', 1 => 'saveRunInfo'], NULL, NULL, NULL);
        $instance->addListener('serializer.pre_serialize', [0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerializeTypedProxy'], NULL, NULL, 'Doctrine\\Persistence\\Proxy');
        $instance->addListener('serializer.pre_serialize', [0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerializeTypedProxy'], NULL, NULL, 'Doctrine\\Common\\Persistence\\Proxy');
        $instance->addListener('serializer.pre_serialize', [0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'], NULL, NULL, 'Doctrine\\ORM\\PersistentCollection');
        $instance->addListener('serializer.pre_serialize', [0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'], NULL, NULL, 'Doctrine\\ODM\\MongoDB\\PersistentCollection');
        $instance->addListener('serializer.pre_serialize', [0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'], NULL, NULL, 'Doctrine\\ODM\\PHPCR\\PersistentCollection');
        $instance->addListener('serializer.pre_serialize', [0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'], NULL, NULL, 'Doctrine\\Persistence\\Proxy');
        $instance->addListener('serializer.pre_serialize', [0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'], NULL, NULL, 'Doctrine\\Common\\Persistence\\Proxy');
        $instance->addListener('serializer.pre_serialize', [0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'], NULL, NULL, 'ProxyManager\\Proxy\\LazyLoadingInterface');
        $instance->addListener('serializer.pre_deserialize', [0 => 'jms_serializer.traceable_runs_listener', 1 => 'saveRunInfo'], NULL, NULL, NULL);
        $instance->addListener('serializer.post_serialize', [0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPostSerialize'], NULL, NULL, NULL);

        return $instance;
    }

    /**
     * Gets the private 'jms_serializer.traceable_handler_registry' shared service.
     *
     * @return \JMS\SerializerBundle\Debug\TraceableHandlerRegistry
     */
    protected function getJmsSerializer_TraceableHandlerRegistryService()
    {
        $this->privates['jms_serializer.traceable_handler_registry'] = $instance = new \JMS\SerializerBundle\Debug\TraceableHandlerRegistry(($this->privates['jms_serializer.traceable_handler_registry.inner'] ?? $this->getJmsSerializer_TraceableHandlerRegistry_InnerService()));

        $instance->registerHandler(1, 'ArrayCollection', 'json', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'ArrayCollection', 'xml', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'ArrayCollection', 'yml', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\Common\\Collections\\ArrayCollection', 'json', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\Common\\Collections\\ArrayCollection', 'xml', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\Common\\Collections\\ArrayCollection', 'yml', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\ORM\\PersistentCollection', 'json', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\ORM\\PersistentCollection', 'xml', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\ORM\\PersistentCollection', 'yml', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\ODM\\MongoDB\\PersistentCollection', 'json', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\ODM\\MongoDB\\PersistentCollection', 'xml', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\ODM\\MongoDB\\PersistentCollection', 'yml', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\ODM\\PHPCR\\PersistentCollection', 'json', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\ODM\\PHPCR\\PersistentCollection', 'xml', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Doctrine\\ODM\\PHPCR\\PersistentCollection', 'yml', [0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection']);
        $instance->registerHandler(1, 'Symfony\\Component\\Validator\\ConstraintViolationList', 'xml', [0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToxml']);
        $instance->registerHandler(1, 'Symfony\\Component\\Validator\\ConstraintViolationList', 'json', [0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListTojson']);
        $instance->registerHandler(1, 'Symfony\\Component\\Validator\\ConstraintViolation', 'xml', [0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToxml']);
        $instance->registerHandler(1, 'Symfony\\Component\\Validator\\ConstraintViolation', 'json', [0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationTojson']);
        $instance->registerHandler(1, 'DateTime', 'json', [0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime']);
        $instance->registerHandler(1, 'DateTime', 'xml', [0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime']);
        $instance->registerHandler(1, 'DateTimeImmutable', 'json', [0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable']);
        $instance->registerHandler(1, 'DateTimeImmutable', 'xml', [0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable']);
        $instance->registerHandler(1, 'DateInterval', 'json', [0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval']);
        $instance->registerHandler(1, 'DateInterval', 'xml', [0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval']);
        $instance->registerHandler(1, 'DateTimeInterface', 'json', [0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeInterface']);
        $instance->registerHandler(1, 'DateTimeInterface', 'xml', [0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeInterface']);
        $instance->registerHandler(1, 'Symfony\\Component\\Form\\Form', 'xml', [0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToxml']);
        $instance->registerHandler(1, 'Symfony\\Component\\Form\\Form', 'json', [0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormTojson']);
        $instance->registerHandler(1, 'Symfony\\Component\\Form\\FormInterface', 'xml', [0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToXml']);
        $instance->registerHandler(1, 'Symfony\\Component\\Form\\FormInterface', 'json', [0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToJson']);
        $instance->registerHandler(1, 'Symfony\\Component\\Form\\FormError', 'xml', [0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToxml']);
        $instance->registerHandler(1, 'Symfony\\Component\\Form\\FormError', 'json', [0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorTojson']);
        $instance->registerHandler(1, 'Iterator', 'json', [0 => 'jms_serializer.iterator_handler', 1 => 'serializeIterable']);
        $instance->registerHandler(1, 'Iterator', 'xml', [0 => 'jms_serializer.iterator_handler', 1 => 'serializeIterable']);
        $instance->registerHandler(1, 'ArrayIterator', 'json', [0 => 'jms_serializer.iterator_handler', 1 => 'serializeIterable']);
        $instance->registerHandler(1, 'ArrayIterator', 'xml', [0 => 'jms_serializer.iterator_handler', 1 => 'serializeIterable']);
        $instance->registerHandler(1, 'Generator', 'json', [0 => 'jms_serializer.iterator_handler', 1 => 'serializeIterable']);
        $instance->registerHandler(1, 'Generator', 'xml', [0 => 'jms_serializer.iterator_handler', 1 => 'serializeIterable']);
        $instance->registerHandler(2, 'ArrayCollection', 'json', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'ArrayCollection', 'xml', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'ArrayCollection', 'yml', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\Common\\Collections\\ArrayCollection', 'json', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\Common\\Collections\\ArrayCollection', 'xml', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\Common\\Collections\\ArrayCollection', 'yml', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\ORM\\PersistentCollection', 'json', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\ORM\\PersistentCollection', 'xml', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\ORM\\PersistentCollection', 'yml', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\ODM\\MongoDB\\PersistentCollection', 'json', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\ODM\\MongoDB\\PersistentCollection', 'xml', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\ODM\\MongoDB\\PersistentCollection', 'yml', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\ODM\\PHPCR\\PersistentCollection', 'json', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\ODM\\PHPCR\\PersistentCollection', 'xml', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'Doctrine\\ODM\\PHPCR\\PersistentCollection', 'yml', [0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection']);
        $instance->registerHandler(2, 'DateTime', 'json', [0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromjson']);
        $instance->registerHandler(2, 'DateTime', 'xml', [0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromxml']);
        $instance->registerHandler(2, 'DateTimeImmutable', 'json', [0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromjson']);
        $instance->registerHandler(2, 'DateTimeImmutable', 'xml', [0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromxml']);
        $instance->registerHandler(2, 'DateInterval', 'json', [0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromjson']);
        $instance->registerHandler(2, 'DateInterval', 'xml', [0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromxml']);
        $instance->registerHandler(2, 'DateTimeInterface', 'json', [0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromJson']);
        $instance->registerHandler(2, 'DateTimeInterface', 'xml', [0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromXml']);
        $instance->registerHandler(2, 'Iterator', 'json', [0 => 'jms_serializer.iterator_handler', 1 => 'deserializeIterator']);
        $instance->registerHandler(2, 'Iterator', 'xml', [0 => 'jms_serializer.iterator_handler', 1 => 'deserializeIterator']);
        $instance->registerHandler(2, 'ArrayIterator', 'json', [0 => 'jms_serializer.iterator_handler', 1 => 'deserializeIterator']);
        $instance->registerHandler(2, 'ArrayIterator', 'xml', [0 => 'jms_serializer.iterator_handler', 1 => 'deserializeIterator']);
        $instance->registerHandler(2, 'Generator', 'json', [0 => 'jms_serializer.iterator_handler', 1 => 'deserializeGenerator']);
        $instance->registerHandler(2, 'Generator', 'xml', [0 => 'jms_serializer.iterator_handler', 1 => 'deserializeGenerator']);

        return $instance;
    }

    /**
     * Gets the private 'jms_serializer.traceable_handler_registry.inner' shared service.
     *
     * @return \JMS\Serializer\Handler\LazyHandlerRegistry
     */
    protected function getJmsSerializer_TraceableHandlerRegistry_InnerService()
    {
        return $this->privates['jms_serializer.traceable_handler_registry.inner'] = new \JMS\Serializer\Handler\LazyHandlerRegistry(($this->privates['jms_serializer.handler_registry.service_locator'] ?? $this->getJmsSerializer_HandlerRegistry_ServiceLocatorService()));
    }

    /**
     * Gets the private 'jms_serializer.traceable_metadata_factory' shared service.
     *
     * @return \JMS\SerializerBundle\Debug\TraceableMetadataFactory
     */
    protected function getJmsSerializer_TraceableMetadataFactoryService()
    {
        return $this->privates['jms_serializer.traceable_metadata_factory'] = new \JMS\SerializerBundle\Debug\TraceableMetadataFactory(($this->privates['jms_serializer.traceable_metadata_factory.inner'] ?? $this->getJmsSerializer_TraceableMetadataFactory_InnerService()));
    }

    /**
     * Gets the private 'jms_serializer.traceable_metadata_factory.inner' shared service.
     *
     * @return \Metadata\MetadataFactory
     */
    protected function getJmsSerializer_TraceableMetadataFactory_InnerService()
    {
        $this->privates['jms_serializer.traceable_metadata_factory.inner'] = $instance = new \Metadata\MetadataFactory(($this->privates['jms_serializer.metadata.lazy_loading_driver'] ?? $this->getJmsSerializer_Metadata_LazyLoadingDriverService()), 'Metadata\\ClassHierarchyMetadata', true);

        $instance->setCache(($this->privates['jms_serializer.metadata.cache.file_cache'] ??= new \Metadata\Cache\FileCache(($this->targetDir.''.'/jms_serializer'))));
        $instance->setIncludeInterfaces(false);

        return $instance;
    }

    /**
     * Gets the private 'jms_serializer.traceable_runs_listener' shared service.
     *
     * @return \JMS\SerializerBundle\Debug\RunsListener
     */
    protected function getJmsSerializer_TraceableRunsListenerService()
    {
        return $this->privates['jms_serializer.traceable_runs_listener'] = new \JMS\SerializerBundle\Debug\RunsListener();
    }

    /**
     * Gets the private 'jms_serializer.twig_extension.runtime_serializer' shared service.
     *
     * @return \JMS\Serializer\Twig\SerializerRuntimeExtension
     */
    protected function getJmsSerializer_TwigExtension_RuntimeSerializerService()
    {
        return $this->privates['jms_serializer.twig_extension.runtime_serializer'] = new \JMS\Serializer\Twig\SerializerRuntimeExtension('jms_');
    }

    /**
     * Gets the private 'knp_menu.helper' shared service.
     *
     * @return \Knp\Menu\Twig\Helper
     */
    protected function getKnpMenu_HelperService()
    {
        $a = ($this->privates['knp_menu.renderer_provider'] ?? $this->getKnpMenu_RendererProviderService());

        if (isset($this->privates['knp_menu.helper'])) {
            return $this->privates['knp_menu.helper'];
        }
        $b = ($this->privates['knp_menu.menu_provider.chain'] ?? $this->getKnpMenu_MenuProvider_ChainService());

        if (isset($this->privates['knp_menu.helper'])) {
            return $this->privates['knp_menu.helper'];
        }

        return $this->privates['knp_menu.helper'] = new \Knp\Menu\Twig\Helper($a, $b, ($this->privates['knp_menu.manipulator'] ??= new \Knp\Menu\Util\MenuManipulator()), ($this->services['knp_menu.matcher'] ?? $this->getKnpMenu_MatcherService()));
    }

    /**
     * Gets the private 'knp_menu.manipulator' shared service.
     *
     * @return \Knp\Menu\Util\MenuManipulator
     */
    protected function getKnpMenu_ManipulatorService()
    {
        return $this->privates['knp_menu.manipulator'] = new \Knp\Menu\Util\MenuManipulator();
    }

    /**
     * Gets the private 'knp_menu.menu_provider.chain' shared service.
     *
     * @return \Knp\Menu\Provider\ChainProvider
     */
    protected function getKnpMenu_MenuProvider_ChainService()
    {
        return $this->privates['knp_menu.menu_provider.chain'] = new \Knp\Menu\Provider\ChainProvider(new RewindableGenerator(function () {
            yield 0 => ($this->privates['knp_menu.menu_provider.lazy'] ?? $this->load('getKnpMenu_MenuProvider_LazyService'));
            yield 1 => ($this->privates['knp_menu.menu_provider.builder_alias'] ?? $this->load('getKnpMenu_MenuProvider_BuilderAliasService'));
        }, 2));
    }

    /**
     * Gets the private 'knp_menu.renderer_provider' shared service.
     *
     * @return \Knp\Menu\Renderer\PsrProvider
     */
    protected function getKnpMenu_RendererProviderService()
    {
        return $this->privates['knp_menu.renderer_provider'] = new \Knp\Menu\Renderer\PsrProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'custom' => ['privates', 'Knp\\Menu\\Renderer\\TwigRenderer', 'getTwigRendererService', true],
            'list' => ['privates', 'knp_menu.renderer.list', 'getKnpMenu_Renderer_ListService', true],
            'twig' => ['privates', 'knp_menu.renderer.twig', 'getKnpMenu_Renderer_TwigService', true],
        ], [
            'custom' => '?',
            'list' => '?',
            'twig' => '?',
        ]), 'twig', [], false);
    }

    /**
     * Gets the private 'knp_menu.twig.extension' shared service.
     *
     * @return \Knp\Menu\Twig\MenuExtension
     */
    protected function getKnpMenu_Twig_ExtensionService()
    {
        $a = ($this->privates['knp_menu.helper'] ?? $this->getKnpMenu_HelperService());

        if (isset($this->privates['knp_menu.twig.extension'])) {
            return $this->privates['knp_menu.twig.extension'];
        }

        return $this->privates['knp_menu.twig.extension'] = new \Knp\Menu\Twig\MenuExtension($a, ($this->services['knp_menu.matcher'] ?? $this->getKnpMenu_MatcherService()), ($this->privates['knp_menu.manipulator'] ??= new \Knp\Menu\Util\MenuManipulator()));
    }

    /**
     * Gets the private 'knp_paginator.helper.processor' shared service.
     *
     * @return \Knp\Bundle\PaginatorBundle\Helper\Processor
     */
    protected function getKnpPaginator_Helper_ProcessorService()
    {
        return $this->privates['knp_paginator.helper.processor'] = new \Knp\Bundle\PaginatorBundle\Helper\Processor(($this->services['router'] ?? $this->getRouterService()), ($this->services['translator'] ?? $this->getTranslatorService()));
    }

    /**
     * Gets the private 'knp_paginator.subscriber.sliding_pagination' shared service.
     *
     * @return \Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber
     */
    protected function getKnpPaginator_Subscriber_SlidingPaginationService()
    {
        return $this->privates['knp_paginator.subscriber.sliding_pagination'] = new \Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber(['defaultPaginationTemplate' => '@KnpPaginator/Pagination/twitter_bootstrap_v4_pagination.html.twig', 'defaultSortableTemplate' => '@KnpPaginator/Pagination/sortable_link.html.twig', 'defaultFiltrationTemplate' => '@KnpPaginator/Pagination/filtration.html.twig', 'defaultPageRange' => 5, 'defaultPageLimit' => NULL]);
    }

    /**
     * Gets the private 'knp_paginator.twig.extension.pagination' shared service.
     *
     * @return \Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension
     */
    protected function getKnpPaginator_Twig_Extension_PaginationService()
    {
        return $this->privates['knp_paginator.twig.extension.pagination'] = new \Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension(($this->privates['knp_paginator.helper.processor'] ?? $this->getKnpPaginator_Helper_ProcessorService()));
    }

    /**
     * Gets the private 'locale_aware_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener
     */
    protected function getLocaleAwareListenerService()
    {
        return $this->privates['locale_aware_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener(new RewindableGenerator(function () {
            yield 0 => ($this->privates['slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger($this->getEnv('string:APP_LOCALE')));
            yield 1 => ($this->privates['translator.default'] ?? $this->getTranslator_DefaultService());
            yield 2 => ($this->privates['translation.locale_switcher'] ?? $this->load('getTranslation_LocaleSwitcherService'));
        }, 3), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected function getLocaleListenerService()
    {
        return $this->privates['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $this->getEnv('string:APP_LOCALE'), ($this->services['router'] ?? $this->getRouterService()), false, []);
    }

    /**
     * Gets the private 'mailer.data_collector' shared service.
     *
     * @return \Symfony\Component\Mailer\DataCollector\MessageDataCollector
     */
    protected function getMailer_DataCollectorService()
    {
        return $this->privates['mailer.data_collector'] = new \Symfony\Component\Mailer\DataCollector\MessageDataCollector(($this->privates['mailer.message_logger_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessageLoggerListener()));
    }

    /**
     * Gets the private 'mailer.message_logger_listener' shared service.
     *
     * @return \Symfony\Component\Mailer\EventListener\MessageLoggerListener
     */
    protected function getMailer_MessageLoggerListenerService()
    {
        return $this->privates['mailer.message_logger_listener'] = new \Symfony\Component\Mailer\EventListener\MessageLoggerListener();
    }

    /**
     * Gets the private 'monolog.handler.main' shared service.
     *
     * @return \Monolog\Handler\FingersCrossedHandler
     */
    protected function getMonolog_Handler_MainService()
    {
        return $this->privates['monolog.handler.main'] = new \Monolog\Handler\FingersCrossedHandler(($this->privates['monolog.handler.nested'] ?? $this->getMonolog_Handler_NestedService()), ($this->privates['monolog.handler.main.http_code_strategy'] ?? $this->getMonolog_Handler_Main_HttpCodeStrategyService()), 0, true, true, NULL);
    }

    /**
     * Gets the private 'monolog.handler.main.http_code_strategy' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\FingersCrossed\HttpCodeActivationStrategy
     */
    protected function getMonolog_Handler_Main_HttpCodeStrategyService()
    {
        return $this->privates['monolog.handler.main.http_code_strategy'] = new \Symfony\Bridge\Monolog\Handler\FingersCrossed\HttpCodeActivationStrategy(($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), [0 => ['code' => 404, 'urls' => []], 1 => ['code' => 405, 'urls' => []]], new \Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy(400));
    }

    /**
     * Gets the private 'monolog.handler.nested' shared service.
     *
     * @return \Monolog\Handler\StreamHandler
     */
    protected function getMonolog_Handler_NestedService()
    {
        $this->privates['monolog.handler.nested'] = $instance = new \Monolog\Handler\StreamHandler((\dirname(__DIR__, 6).'/var/log/test.log'), 100, true, NULL, false);

        $instance->pushProcessor(($this->privates['monolog.processor.psr_log_message'] ??= new \Monolog\Processor\PsrLogMessageProcessor()));

        return $instance;
    }

    /**
     * Gets the private 'monolog.handler.null_internal' shared service.
     *
     * @return \Monolog\Handler\NullHandler
     */
    protected function getMonolog_Handler_NullInternalService()
    {
        return $this->privates['monolog.handler.null_internal'] = new \Monolog\Handler\NullHandler();
    }

    /**
     * Gets the private 'monolog.logger' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_LoggerService()
    {
        $this->privates['monolog.logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->pushProcessor(($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService()));
        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($instance);

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.cache' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_CacheService()
    {
        $this->privates['monolog.logger.cache'] = $instance = new \Symfony\Bridge\Monolog\Logger('cache');

        $instance->pushProcessor(($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($instance);

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.doctrine' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_DoctrineService()
    {
        $this->privates['monolog.logger.doctrine'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine');

        $instance->pushProcessor(($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($instance);

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.event' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_EventService()
    {
        $this->privates['monolog.logger.event'] = $instance = new \Symfony\Bridge\Monolog\Logger('event');

        $instance->pushProcessor(($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService()));
        $instance->pushHandler(($this->privates['monolog.handler.null_internal'] ??= new \Monolog\Handler\NullHandler()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($instance);

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.http_client' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_HttpClientService()
    {
        $this->privates['monolog.logger.http_client'] = $instance = new \Symfony\Bridge\Monolog\Logger('http_client');

        $instance->pushProcessor(($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($instance);

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.php' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_PhpService()
    {
        $this->privates['monolog.logger.php'] = $instance = new \Symfony\Bridge\Monolog\Logger('php');

        $instance->pushProcessor(($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($instance);

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.profiler' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_ProfilerService()
    {
        $this->privates['monolog.logger.profiler'] = $instance = new \Symfony\Bridge\Monolog\Logger('profiler');

        $instance->pushProcessor(($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($instance);

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.request' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->privates['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushProcessor(($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($instance);

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.router' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_RouterService()
    {
        $this->privates['monolog.logger.router'] = $instance = new \Symfony\Bridge\Monolog\Logger('router');

        $instance->pushProcessor(($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($instance);

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.security' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_SecurityService()
    {
        $this->privates['monolog.logger.security'] = $instance = new \Symfony\Bridge\Monolog\Logger('security');

        $instance->pushProcessor(($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService()));
        $instance->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));
        \Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass::configureLogger($instance);

        return $instance;
    }

    /**
     * Gets the private 'monolog.processor.psr_log_message' shared service.
     *
     * @return \Monolog\Processor\PsrLogMessageProcessor
     */
    protected function getMonolog_Processor_PsrLogMessageService()
    {
        return $this->privates['monolog.processor.psr_log_message'] = new \Monolog\Processor\PsrLogMessageProcessor();
    }

    /**
     * Gets the private 'parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag
     */
    protected function getParameterBagService()
    {
        return $this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this);
    }

    /**
     * Gets the private 'profiler.storage' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage
     */
    protected function getProfiler_StorageService()
    {
        return $this->privates['profiler.storage'] = new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage(('file:'.$this->targetDir.''.'/profiler'));
    }

    /**
     * Gets the private 'profiler_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ProfilerListener
     */
    protected function getProfilerListenerService()
    {
        $a = ($this->services['.container.private.profiler'] ?? $this->get_Container_Private_ProfilerService());

        if (isset($this->privates['profiler_listener'])) {
            return $this->privates['profiler_listener'];
        }

        return $this->privates['profiler_listener'] = new \Symfony\Component\HttpKernel\EventListener\ProfilerListener($a, ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), NULL, false, false, NULL);
    }

    /**
     * Gets the private 'property_info' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\PropertyInfoExtractor
     */
    protected function getPropertyInfoService()
    {
        return $this->privates['property_info'] = new \Symfony\Component\PropertyInfo\PropertyInfoExtractor(new RewindableGenerator(function () {
            yield 0 => ($this->privates['property_info.serializer_extractor'] ?? $this->load('getPropertyInfo_SerializerExtractorService'));
            yield 1 => ($this->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
            yield 2 => ($this->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $this->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
        }, 3), new RewindableGenerator(function () {
            yield 0 => ($this->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $this->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 1 => ($this->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 2), new RewindableGenerator(function () {
            return new \EmptyIterator();
        }, 0), new RewindableGenerator(function () {
            yield 0 => ($this->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $this->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 1 => ($this->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 2), new RewindableGenerator(function () {
            yield 0 => ($this->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 1));
    }

    /**
     * Gets the private 'response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener
     */
    protected function getResponseListenerService()
    {
        return $this->privates['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false);
    }

    /**
     * Gets the private 'router.expression_language_provider' shared service.
     *
     * @return \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider
     */
    protected function getRouter_ExpressionLanguageProviderService()
    {
        return $this->privates['router.expression_language_provider'] = new \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'env' => ['privates', 'container.getenv', 'getContainer_GetenvService', true],
            'service' => ['services', 'container.get_routing_condition_service', 'getContainer_GetRoutingConditionServiceService', true],
        ], [
            'env' => 'Closure',
            'service' => 'Closure',
        ]));
    }

    /**
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected function getRouter_RequestContextService()
    {
        $this->privates['router.request_context'] = $instance = \Symfony\Component\Routing\RequestContext::fromUri('', 'localhost', 'http', 80, 443);

        $instance->setParameter('_functions', ($this->privates['router.expression_language_provider'] ?? $this->getRouter_ExpressionLanguageProviderService()));

        return $instance;
    }

    /**
     * Gets the private 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected function getRouterListenerService()
    {
        return $this->privates['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener(($this->services['router'] ?? $this->getRouterService()), ($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService()), ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService()), \dirname(__DIR__, 6), true);
    }

    /**
     * Gets the private 'security.authentication.trust_resolver' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver
     */
    protected function getSecurity_Authentication_TrustResolverService()
    {
        return $this->privates['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver();
    }

    /**
     * Gets the private 'security.context_listener.0' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ContextListener
     */
    protected function getSecurity_ContextListener_0Service()
    {
        $a = ($this->privates['security.event_dispatcher.main'] ?? $this->getSecurity_EventDispatcher_MainService());

        if (isset($this->privates['security.context_listener.0'])) {
            return $this->privates['security.context_listener.0'];
        }

        return $this->privates['security.context_listener.0'] = new \Symfony\Component\Security\Http\Firewall\ContextListener(($this->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new RewindableGenerator(function () {
            yield 0 => ($this->privates['security.user.provider.concrete.users_in_memory'] ??= new \Symfony\Component\Security\Core\User\InMemoryUserProvider([]));
            yield 1 => ($this->privates['AppBundle\\Security\\UserProvider'] ?? $this->load('getUserProviderService'));
        }, 2), 'main', ($this->privates['monolog.logger.security'] ?? $this->getMonolog_Logger_SecurityService()), $a, ($this->privates['security.authentication.trust_resolver'] ??= new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver()), [0 => ($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()), 1 => 'enableUsageTracking']);
    }

    /**
     * Gets the private 'security.event_dispatcher.main' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected function getSecurity_EventDispatcher_MainService()
    {
        $this->privates['security.event_dispatcher.main'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [0 => #[\Closure(name: 'security.listener.main.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] function () {
            return ($this->privates['security.listener.main.user_provider'] ?? $this->load('getSecurity_Listener_Main_UserProviderService'));
        }, 1 => 'checkPassport'], 2048);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [0 => #[\Closure(name: 'security.listener.session.main', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionStrategyListener')] function () {
            return ($this->privates['security.listener.session.main'] ?? $this->load('getSecurity_Listener_Session_MainService'));
        }, 1 => 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => #[\Closure(name: 'security.logout.listener.default.main', class: 'Symfony\\Component\\Security\\Http\\EventListener\\DefaultLogoutListener')] function () {
            return ($this->privates['security.logout.listener.default.main'] ?? $this->load('getSecurity_Logout_Listener_Default_MainService'));
        }, 1 => 'onLogout'], 64);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => #[\Closure(name: 'security.logout.listener.session.main', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionLogoutListener')] function () {
            return ($this->privates['security.logout.listener.session.main'] ??= new \Symfony\Component\Security\Http\EventListener\SessionLogoutListener());
        }, 1 => 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [0 => #[\Closure(name: 'security.listener.user_checker.main', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] function () {
            return ($this->privates['security.listener.user_checker.main'] ?? $this->load('getSecurity_Listener_UserChecker_MainService'));
        }, 1 => 'preCheckCredentials'], 256);
        $instance->addListener('security.authentication.success', [0 => #[\Closure(name: 'security.listener.user_checker.main', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] function () {
            return ($this->privates['security.listener.user_checker.main'] ?? $this->load('getSecurity_Listener_UserChecker_MainService'));
        }, 1 => 'postCheckCredentials'], 256);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [0 => #[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] function () {
            return ($this->privates['security.listener.user_provider'] ?? $this->load('getSecurity_Listener_UserProviderService'));
        }, 1 => 'checkPassport'], 1024);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [0 => #[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] function () {
            return ($this->privates['security.listener.check_authenticator_credentials'] ?? $this->load('getSecurity_Listener_CheckAuthenticatorCredentialsService'));
        }, 1 => 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [0 => #[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] function () {
            return ($this->privates['security.listener.password_migrating'] ?? $this->load('getSecurity_Listener_PasswordMigratingService'));
        }, 1 => 'onLoginSuccess'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\AccessTokenEventSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\AccessTokenEventSubscriber'] ?? $this->getAccessTokenEventSubscriberService());
        }, 1 => 'removeCookie'], 0);
        $instance->addListener('security.authentication.success', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\UserSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'countAndRememberLastLogin'], 0);
        $instance->addListener('security.interactive_login', [0 => #[\Closure(name: 'AppBundle\\EventSubscriber\\UserSubscriber')] function () {
            return ($this->privates['AppBundle\\EventSubscriber\\UserSubscriber'] ?? $this->load('getUserSubscriberService'));
        }, 1 => 'localeOnLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [0 => #[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] function () {
            return ($this->privates['security.listener.csrf_protection'] ?? $this->load('getSecurity_Listener_CsrfProtectionService'));
        }, 1 => 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => #[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] function () {
            return ($this->privates['security.logout.listener.csrf_token_clearing'] ?? $this->load('getSecurity_Logout_Listener_CsrfTokenClearingService'));
        }, 1 => 'onLogout'], 0);

        return $instance;
    }

    /**
     * Gets the private 'security.firewall.map' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallMap
     */
    protected function getSecurity_Firewall_MapService()
    {
        $a = ($this->privates['.service_locator.a1R7fuj'] ?? $this->get_ServiceLocator_A1R7fujService());

        if (isset($this->privates['security.firewall.map'])) {
            return $this->privates['security.firewall.map'];
        }

        return $this->privates['security.firewall.map'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($a, new RewindableGenerator(function () {
            yield 'security.firewall.map.context.public' => ($this->privates['.security.request_matcher.3HbYdvl'] ?? $this->load('get_Security_RequestMatcher_3HbYdvlService'));
            yield 'security.firewall.map.context.main' => NULL;
            yield 'security.firewall.map.context.login' => ($this->privates['.security.request_matcher.jfD.f33'] ?? $this->load('get_Security_RequestMatcher_JfD_F33Service'));
        }, 3));
    }

    /**
     * Gets the private 'security.helper' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security
     */
    protected function getSecurity_HelperService()
    {
        return $this->privates['security.helper'] = new \Symfony\Bundle\SecurityBundle\Security(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'security.authenticator.managers_locator' => ['privates', 'security.authenticator.managers_locator', 'getSecurity_Authenticator_ManagersLocatorService', true],
            'security.authorization_checker' => ['services', 'jms_serializer.authorization_checker', 'getJmsSerializer_AuthorizationCheckerService', false],
            'security.csrf.token_manager' => ['privates', 'security.csrf.token_manager', 'getSecurity_Csrf_TokenManagerService', true],
            'security.firewall.event_dispatcher_locator' => ['privates', 'security.firewall.event_dispatcher_locator', 'getSecurity_Firewall_EventDispatcherLocatorService', true],
            'security.firewall.map' => ['privates', 'security.firewall.map', 'getSecurity_Firewall_MapService', false],
            'security.token_storage' => ['privates', 'security.token_storage', 'getSecurity_TokenStorageService', false],
            'security.user_checker' => ['services', 'hwi_oauth.user_checker', 'getHwiOauth_UserCheckerService', true],
        ], [
            'request_stack' => '?',
            'security.authenticator.managers_locator' => '?',
            'security.authorization_checker' => '?',
            'security.csrf.token_manager' => '?',
            'security.firewall.event_dispatcher_locator' => '?',
            'security.firewall.map' => '?',
            'security.token_storage' => '?',
            'security.user_checker' => '?',
        ]), ['public' => NULL, 'main' => new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'security.authenticator.access_token.main' => ['privates', 'security.authenticator.access_token.main', 'getSecurity_Authenticator_AccessToken_MainService', true],
            'security.authenticator.form_login.main' => ['privates', 'security.authenticator.form_login.main', 'getSecurity_Authenticator_FormLogin_MainService', true],
            'security.authenticator.oauth.main' => ['privates', 'security.authenticator.oauth.main', 'getSecurity_Authenticator_Oauth_MainService', true],
        ], [
            'security.authenticator.access_token.main' => '?',
            'security.authenticator.form_login.main' => '?',
            'security.authenticator.oauth.main' => '?',
        ]), 'login' => NULL]);
    }

    /**
     * Gets the private 'security.impersonate_url_generator' shared service.
     *
     * @return \Symfony\Component\Security\Http\Impersonate\ImpersonateUrlGenerator
     */
    protected function getSecurity_ImpersonateUrlGeneratorService()
    {
        $a = ($this->privates['security.firewall.map'] ?? $this->getSecurity_Firewall_MapService());

        if (isset($this->privates['security.impersonate_url_generator'])) {
            return $this->privates['security.impersonate_url_generator'];
        }

        return $this->privates['security.impersonate_url_generator'] = new \Symfony\Component\Security\Http\Impersonate\ImpersonateUrlGenerator(($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a, ($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()));
    }

    /**
     * Gets the private 'security.is_granted_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\ExpressionLanguage\ExpressionLanguage
     */
    protected function getSecurity_IsGrantedAttributeExpressionLanguageService()
    {
        return $this->privates['security.is_granted_attribute_expression_language'] = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage(($this->services['cache.security_is_granted_attribute_expression_language'] ?? $this->getCache_SecurityIsGrantedAttributeExpressionLanguageService()));
    }

    /**
     * Gets the private 'security.logout_url_generator' shared service.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator
     */
    protected function getSecurity_LogoutUrlGeneratorService()
    {
        $this->privates['security.logout_url_generator'] = $instance = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator(($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($this->services['router'] ?? $this->getRouterService()), ($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()));

        $instance->registerListener('main', 'app_user_security_logout', 'logout', '_csrf_token', NULL, NULL);

        return $instance;
    }

    /**
     * Gets the private 'security.password_hasher_factory' shared service.
     *
     * @return \Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactory
     */
    protected function getSecurity_PasswordHasherFactoryService()
    {
        return $this->privates['security.password_hasher_factory'] = new \Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactory(['Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface' => ['algorithm' => 'auto', 'migrate_from' => [0 => 'sha512'], 'hash_algorithm' => 'sha512', 'key_length' => 40, 'ignore_case' => false, 'encode_as_base64' => true, 'iterations' => 5000, 'cost' => NULL, 'memory_cost' => NULL, 'time_cost' => NULL]]);
    }

    /**
     * Gets the private 'security.role_hierarchy' shared service.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this->privates['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy($this->parameters['security.role_hierarchy.roles']);
    }

    /**
     * Gets the private 'security.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage
     */
    protected function getSecurity_TokenStorageService()
    {
        return $this->privates['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage(($this->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
        ], [
            'request_stack' => '?',
        ]));
    }

    /**
     * Gets the private 'security.untracked_token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage
     */
    protected function getSecurity_UntrackedTokenStorageService()
    {
        return $this->privates['security.untracked_token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage();
    }

    /**
     * Gets the private 'security.user_password_hasher' shared service.
     *
     * @return \Symfony\Component\PasswordHasher\Hasher\UserPasswordHasher
     */
    protected function getSecurity_UserPasswordHasherService()
    {
        return $this->privates['security.user_password_hasher'] = new \Symfony\Component\PasswordHasher\Hasher\UserPasswordHasher(($this->privates['security.password_hasher_factory'] ?? $this->getSecurity_PasswordHasherFactoryService()));
    }

    /**
     * Gets the private 'sensio_framework_extra.cache.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener
     */
    protected function getSensioFrameworkExtra_Cache_ListenerService()
    {
        return $this->privates['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener();
    }

    /**
     * Gets the private 'sensio_framework_extra.controller.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->privates['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()));
    }

    /**
     * Gets the private 'sensio_framework_extra.converter.doctrine.orm' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter
     */
    protected function getSensioFrameworkExtra_Converter_Doctrine_OrmService()
    {
        return $this->privates['sensio_framework_extra.converter.doctrine.orm'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter(($this->services['doctrine'] ?? $this->getDoctrineService()), ($this->privates['sensio_framework_extra.converter.doctrine.orm.expression_language.default'] ??= new \Symfony\Component\ExpressionLanguage\ExpressionLanguage()));
    }

    /**
     * Gets the private 'sensio_framework_extra.converter.doctrine.orm.expression_language.default' shared service.
     *
     * @return \Symfony\Component\ExpressionLanguage\ExpressionLanguage
     */
    protected function getSensioFrameworkExtra_Converter_Doctrine_Orm_ExpressionLanguage_DefaultService()
    {
        return $this->privates['sensio_framework_extra.converter.doctrine.orm.expression_language.default'] = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage();
    }

    /**
     * Gets the private 'sensio_framework_extra.converter.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        return $this->privates['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener(($this->privates['sensio_framework_extra.converter.manager'] ?? $this->getSensioFrameworkExtra_Converter_ManagerService()), true);
    }

    /**
     * Gets the private 'sensio_framework_extra.converter.manager' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager
     */
    protected function getSensioFrameworkExtra_Converter_ManagerService()
    {
        $this->privates['sensio_framework_extra.converter.manager'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();

        $instance->add(($this->privates['sensio_framework_extra.converter.doctrine.orm'] ?? $this->getSensioFrameworkExtra_Converter_Doctrine_OrmService()), 0, 'doctrine.orm');
        $instance->add(($this->privates['framework_extra_bundle.date_time_param_converter'] ??= new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter()), 0, 'datetime');

        return $instance;
    }

    /**
     * Gets the private 'sensio_framework_extra.security.expression_language.default' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage
     */
    protected function getSensioFrameworkExtra_Security_ExpressionLanguage_DefaultService()
    {
        return $this->privates['sensio_framework_extra.security.expression_language.default'] = new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage();
    }

    /**
     * Gets the private 'sensio_framework_extra.security.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener
     */
    protected function getSensioFrameworkExtra_Security_ListenerService()
    {
        $a = ($this->services['jms_serializer.authorization_checker'] ?? $this->getJmsSerializer_AuthorizationCheckerService());

        if (isset($this->privates['sensio_framework_extra.security.listener'])) {
            return $this->privates['sensio_framework_extra.security.listener'];
        }

        return $this->privates['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(($this->privates['framework_extra_bundle.argument_name_convertor'] ?? $this->getFrameworkExtraBundle_ArgumentNameConvertorService()), ($this->privates['sensio_framework_extra.security.expression_language.default'] ??= new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage()), ($this->privates['security.authentication.trust_resolver'] ??= new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver()), ($this->privates['security.role_hierarchy'] ?? $this->getSecurity_RoleHierarchyService()), ($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()), $a, ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));
    }

    /**
     * Gets the private 'sensio_framework_extra.view.guesser' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser
     */
    protected function getSensioFrameworkExtra_View_GuesserService()
    {
        return $this->privates['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser(($this->services['kernel'] ?? $this->get('kernel', 1)));
    }

    /**
     * Gets the private 'sensio_framework_extra.view.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        $this->privates['sensio_framework_extra.view.listener'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener(($this->privates['sensio_framework_extra.view.guesser'] ??= new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser(($this->services['kernel'] ?? $this->get('kernel', 1)))));

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'twig' => ['privates', 'twig', 'getTwigService', false],
        ], [
            'twig' => 'Twig\\Environment',
        ]))->withContext('sensio_framework_extra.view.listener', $this));

        return $instance;
    }

    /**
     * Gets the private 'stof_doctrine_extensions.event_listener.logger' shared service.
     *
     * @return \Stof\DoctrineExtensionsBundle\EventListener\LoggerListener
     */
    protected function getStofDoctrineExtensions_EventListener_LoggerService()
    {
        $a = ($this->services['jms_serializer.authorization_checker'] ?? $this->getJmsSerializer_AuthorizationCheckerService());

        if (isset($this->privates['stof_doctrine_extensions.event_listener.logger'])) {
            return $this->privates['stof_doctrine_extensions.event_listener.logger'];
        }

        return $this->privates['stof_doctrine_extensions.event_listener.logger'] = new \Stof\DoctrineExtensionsBundle\EventListener\LoggerListener(($this->privates['stof_doctrine_extensions.listener.loggable'] ?? $this->getStofDoctrineExtensions_Listener_LoggableService()), ($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()), $a);
    }

    /**
     * Gets the private 'stof_doctrine_extensions.listener.loggable' shared service.
     *
     * @return \Gedmo\Loggable\LoggableListener
     */
    protected function getStofDoctrineExtensions_Listener_LoggableService()
    {
        $this->privates['stof_doctrine_extensions.listener.loggable'] = $instance = new \Gedmo\Loggable\LoggableListener();

        $instance->setAnnotationReader(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()));

        return $instance;
    }

    /**
     * Gets the private 'test.session.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected function getTest_Session_ListenerService()
    {
        return $this->privates['test.session.listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'session_factory' => ['privates', 'session.factory', 'getSession_FactoryService', true],
        ], [
            'session_factory' => '?',
        ]), true, $this->parameters['session.storage.options']);
    }

    /**
     * Gets the private 'translator.default' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator
     */
    protected function getTranslator_DefaultService()
    {
        $this->privates['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'translation.loader.csv' => ['privates', 'translation.loader.csv', 'getTranslation_Loader_CsvService', true],
            'translation.loader.dat' => ['privates', 'translation.loader.dat', 'getTranslation_Loader_DatService', true],
            'translation.loader.ini' => ['privates', 'translation.loader.ini', 'getTranslation_Loader_IniService', true],
            'translation.loader.json' => ['privates', 'translation.loader.json', 'getTranslation_Loader_JsonService', true],
            'translation.loader.mo' => ['privates', 'translation.loader.mo', 'getTranslation_Loader_MoService', true],
            'translation.loader.php' => ['privates', 'translation.loader.php', 'getTranslation_Loader_PhpService', true],
            'translation.loader.po' => ['privates', 'translation.loader.po', 'getTranslation_Loader_PoService', true],
            'translation.loader.qt' => ['privates', 'translation.loader.qt', 'getTranslation_Loader_QtService', true],
            'translation.loader.res' => ['privates', 'translation.loader.res', 'getTranslation_Loader_ResService', true],
            'translation.loader.xliff' => ['privates', 'translation.loader.xliff', 'getTranslation_Loader_XliffService', true],
            'translation.loader.yml' => ['privates', 'translation.loader.yml', 'getTranslation_Loader_YmlService', true],
        ], [
            'translation.loader.csv' => '?',
            'translation.loader.dat' => '?',
            'translation.loader.ini' => '?',
            'translation.loader.json' => '?',
            'translation.loader.mo' => '?',
            'translation.loader.php' => '?',
            'translation.loader.po' => '?',
            'translation.loader.qt' => '?',
            'translation.loader.res' => '?',
            'translation.loader.xliff' => '?',
            'translation.loader.yml' => '?',
        ]), ($this->privates['translator.formatter.default'] ?? $this->getTranslator_Formatter_DefaultService()), $this->getEnv('string:APP_LOCALE'), ['translation.loader.php' => [0 => 'php'], 'translation.loader.yml' => [0 => 'yaml', 1 => 'yml'], 'translation.loader.xliff' => [0 => 'xlf', 1 => 'xliff'], 'translation.loader.po' => [0 => 'po'], 'translation.loader.mo' => [0 => 'mo'], 'translation.loader.qt' => [0 => 'ts'], 'translation.loader.csv' => [0 => 'csv'], 'translation.loader.res' => [0 => 'res'], 'translation.loader.dat' => [0 => 'dat'], 'translation.loader.ini' => [0 => 'ini'], 'translation.loader.json' => [0 => 'json']], ['cache_dir' => ($this->targetDir.''.'/translations'), 'debug' => true, 'resource_files' => ['af' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.af.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.af.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.af.xlf')], 'ar' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ar.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ar.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ar.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ar.xliff')], 'az' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.az.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.az.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.az.xlf')], 'be' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.be.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.be.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.be.xlf')], 'bg' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.bg.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.bg.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.bg.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.bg.xliff')], 'bs' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.bs.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.bs.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.bs.xlf')], 'ca' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ca.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ca.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ca.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ca.xliff')], 'cs' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.cs.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.cs.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.cs.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.cs.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.cs.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.cs.yml')], 'cy' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.cy.xlf')], 'da' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.da.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.da.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.da.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.da.xliff')], 'de' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.de.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.de.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.de.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.de.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.de.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.de.yml'), 6 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.de.yml'), 7 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/translations/KnpPaginatorBundle.de.yml'), 8 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/translations/activities.de.yml'), 9 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/translations/messages.de.yml'), 10 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/translations/security.de.yml'), 11 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/translations/validators.de.yml')], 'el' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.el.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.el.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.el.xlf')], 'en' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.en.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.en.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.en.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.en.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.en.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.en.yml'), 6 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.en.yml'), 7 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/translations/KnpPaginatorBundle.en.yml'), 8 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/translations/activities.en.yml'), 9 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/translations/messages.en.yml'), 10 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/translations/security.en.yml'), 11 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/translations/validators.en.yml')], 'es' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.es.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.es.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.es.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.es.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.es.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.es.yml'), 6 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.es.yml')], 'et' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.et.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.et.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.et.xlf')], 'eu' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.eu.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.eu.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.eu.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.eu.xliff')], 'fa' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.fa.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.fa.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.fa.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.fa.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.fa.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.fa.yml'), 6 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.fa.yml')], 'fi' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.fi.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.fi.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.fi.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.fi.xliff')], 'fr' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.fr.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.fr.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.fr.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.fr.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.fr.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.fr.yml'), 6 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.fr.yml')], 'gl' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.gl.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.gl.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.gl.xlf')], 'he' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.he.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.he.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.he.xlf')], 'hr' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.hr.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.hr.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.hr.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.hr.xliff')], 'hu' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.hu.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.hu.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.hu.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.hu.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.hu.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.hu.yml'), 6 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.hu.yml')], 'hy' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.hy.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.hy.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.hy.xlf')], 'id' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.id.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.id.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.id.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.id.xliff')], 'it' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.it.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.it.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.it.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.it.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.it.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.it.yml'), 6 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.it.yml')], 'ja' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ja.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ja.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ja.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ja.xliff')], 'lb' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.lb.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.lb.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.lb.xlf')], 'lt' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.lt.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.lt.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.lt.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.lt.xliff')], 'lv' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.lv.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.lv.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.lv.xlf')], 'mn' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.mn.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.mn.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.mn.xlf')], 'my' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.my.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.my.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.my.xlf')], 'nb' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.nb.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.nb.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.nb.xlf')], 'nl' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.nl.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.nl.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.nl.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.nl.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.nl.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.nl.yml'), 6 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.nl.yml')], 'nn' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.nn.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.nn.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.nn.xlf')], 'no' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.no.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.no.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.no.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.no.xliff')], 'pl' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.pl.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.pl.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.pl.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.pl.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.pl.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.pl.yml'), 6 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.pl.yml')], 'pt' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.pt.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.pt.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.pt.xlf')], 'pt_BR' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.pt_BR.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.pt_BR.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.pt_BR.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.pt_BR.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.pt_BR.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.pt_BR.yml')], 'ro' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ro.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ro.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ro.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ro.xliff')], 'ru' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ru.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ru.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ru.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ru.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.ru.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.ru.yml'), 6 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.ru.yml')], 'sk' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sk.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sk.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sk.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.sk.yml'), 4 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.sk.yml')], 'sl' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sl.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sl.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sl.xlf')], 'sq' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sq.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sq.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sq.xlf')], 'sr_Cyrl' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sr_Cyrl.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sr_Cyrl.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sr_Cyrl.xlf')], 'sr_Latn' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sr_Latn.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sr_Latn.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sr_Latn.xlf')], 'sv' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.sv.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.sv.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.sv.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.sv.xliff')], 'th' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.th.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.th.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.th.xlf')], 'tl' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.tl.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.tl.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.tl.xlf')], 'tr' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.tr.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.tr.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.tr.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.tr.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.tr.yml')], 'uk' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.uk.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.uk.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.uk.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.uk.xliff'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.uk.yml'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.uk.yml'), 6 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.uk.yml')], 'ur' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.ur.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.ur.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.ur.xlf')], 'uz' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.uz.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.uz.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.uz.xlf')], 'vi' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.vi.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.vi.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.vi.xlf')], 'zh_CN' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.zh_CN.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.zh_CN.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.zh_CN.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.zh_CN.yml'), 4 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.zh_CN.yml')], 'zh_TW' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations/validators.zh_TW.xlf'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations/validators.zh_TW.xlf'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations/security.zh_TW.xlf'), 3 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/CraueFormFlowBundle.zh_TW.yml'), 4 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations/validators.zh_TW.yml')], 'ky' => [0 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ky.xliff')], 'sw' => [0 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.sw.xliff')], 'zh' => [0 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations/HWIOAuthBundle.zh.yml')]], 'scanned_directories' => [0 => (\dirname(__DIR__, 6).'/vendor/symfony/validator/Resources/translations'), 1 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/translations'), 2 => (\dirname(__DIR__, 6).'/vendor/symfony/security-core/Resources/translations'), 3 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/translations'), 4 => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/translations'), 5 => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/translations'), 6 => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/translations'), 7 => (\dirname(__DIR__, 6).'/translations'), 8 => (\dirname(__DIR__, 6).'/vendor/symfony/framework-bundle/translations'), 9 => (\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/translations'), 10 => (\dirname(__DIR__, 6).'/vendor/symfony/security-bundle/translations'), 11 => (\dirname(__DIR__, 6).'/vendor/symfony/twig-bundle/translations'), 12 => (\dirname(__DIR__, 6).'/vendor/twig/extra-bundle/translations'), 13 => (\dirname(__DIR__, 6).'/vendor/symfony/monolog-bundle/translations'), 14 => (\dirname(__DIR__, 6).'/vendor/stof/doctrine-extensions-bundle/src/translations'), 15 => (\dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src/translations'), 16 => (\dirname(__DIR__, 6).'/vendor/php-http/httplug-bundle/src/translations'), 17 => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-menu-bundle/src/translations'), 18 => (\dirname(__DIR__, 6).'/vendor/jms/serializer-bundle/translations'), 19 => (\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-migrations-bundle/translations'), 20 => (\dirname(__DIR__, 6).'/vendor/symfony/web-profiler-bundle/translations'), 21 => (\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-fixtures-bundle/translations'), 22 => (\dirname(__DIR__, 6).'/vendor/liip/test-fixtures-bundle/src/translations')], 'cache_vary' => ['scanned_directories' => [0 => 'vendor/symfony/validator/Resources/translations', 1 => 'vendor/symfony/form/Resources/translations', 2 => 'vendor/symfony/security-core/Resources/translations', 3 => 'vendor/knplabs/knp-paginator-bundle/translations', 4 => 'vendor/hwi/oauth-bundle/src/Resources/translations', 5 => 'vendor/craue/formflow-bundle/Resources/translations', 6 => 'vendor/wirdesign-communication-ag/wirhub/translations', 7 => 'translations', 8 => 'vendor/symfony/framework-bundle/translations', 9 => 'vendor/doctrine/doctrine-bundle/translations', 10 => 'vendor/symfony/security-bundle/translations', 11 => 'vendor/symfony/twig-bundle/translations', 12 => 'vendor/twig/extra-bundle/translations', 13 => 'vendor/symfony/monolog-bundle/translations', 14 => 'vendor/stof/doctrine-extensions-bundle/src/translations', 15 => 'vendor/sensio/framework-extra-bundle/src/translations', 16 => 'vendor/php-http/httplug-bundle/src/translations', 17 => 'vendor/knplabs/knp-menu-bundle/src/translations', 18 => 'vendor/jms/serializer-bundle/translations', 19 => 'vendor/doctrine/doctrine-migrations-bundle/translations', 20 => 'vendor/symfony/web-profiler-bundle/translations', 21 => 'vendor/doctrine/doctrine-fixtures-bundle/translations', 22 => 'vendor/liip/test-fixtures-bundle/src/translations']]], []);

        $instance->setConfigCacheFactory(($this->privates['config_cache_factory'] ?? $this->getConfigCacheFactoryService()));
        $instance->setFallbackLocales([0 => 'en']);

        return $instance;
    }

    /**
     * Gets the private 'translator.formatter.default' shared service.
     *
     * @return \Symfony\Component\Translation\Formatter\MessageFormatter
     */
    protected function getTranslator_Formatter_DefaultService()
    {
        return $this->privates['translator.formatter.default'] = new \Symfony\Component\Translation\Formatter\MessageFormatter(($this->privates['identity_translator'] ??= new \Symfony\Component\Translation\IdentityTranslator()));
    }

    /**
     * Gets the private 'twig' shared service.
     *
     * @return \Twig\Environment
     */
    protected function getTwigService()
    {
        $this->privates['twig'] = $instance = new \Twig\Environment(($this->privates['twig.loader.native_filesystem'] ?? $this->getTwig_Loader_NativeFilesystemService()), ['strict_variables' => true, 'autoescape' => 'name', 'cache' => ($this->targetDir.''.'/twig'), 'charset' => 'UTF-8', 'debug' => true]);

        $a = ($this->privates['twig.missing_extension_suggestor'] ??= new \Twig\Extra\TwigExtraBundle\MissingExtensionSuggestor());

        $instance->addExtension(($this->privates['twig.extension.security_csrf'] ??= new \Symfony\Bridge\Twig\Extension\CsrfExtension()));
        $instance->addExtension(($this->privates['twig.extension.logout_url'] ?? $this->getTwig_Extension_LogoutUrlService()));
        $instance->addExtension(($this->privates['twig.extension.security'] ?? $this->getTwig_Extension_SecurityService()));
        $instance->addExtension(($this->privates['twig.extension.profiler'] ?? $this->getTwig_Extension_ProfilerService()));
        $instance->addExtension(($this->privates['twig.extension.trans'] ?? $this->getTwig_Extension_TransService()));
        $instance->addExtension(($this->privates['twig.extension.assets'] ?? $this->getTwig_Extension_AssetsService()));
        $instance->addExtension(($this->privates['twig.extension.code'] ?? $this->getTwig_Extension_CodeService()));
        $instance->addExtension(($this->privates['twig.extension.routing'] ?? $this->getTwig_Extension_RoutingService()));
        $instance->addExtension(($this->privates['twig.extension.yaml'] ??= new \Symfony\Bridge\Twig\Extension\YamlExtension()));
        $instance->addExtension(($this->privates['twig.extension.debug.stopwatch'] ?? $this->getTwig_Extension_Debug_StopwatchService()));
        $instance->addExtension(($this->privates['twig.extension.expression'] ??= new \Symfony\Bridge\Twig\Extension\ExpressionExtension()));
        $instance->addExtension(($this->privates['twig.extension.httpkernel'] ??= new \Symfony\Bridge\Twig\Extension\HttpKernelExtension()));
        $instance->addExtension(($this->privates['twig.extension.httpfoundation'] ?? $this->getTwig_Extension_HttpfoundationService()));
        $instance->addExtension(($this->privates['twig.extension.serializer'] ??= new \Symfony\Bridge\Twig\Extension\SerializerExtension()));
        $instance->addExtension(($this->privates['twig.extension.form'] ?? $this->getTwig_Extension_FormService()));
        $instance->addExtension(($this->privates['doctrine.twig.doctrine_extension'] ??= new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension()));
        $instance->addExtension(($this->privates['twig.extension.debug'] ??= new \Twig\Extension\DebugExtension()));
        $instance->addExtension(($this->privates['twig.extension.intl'] ??= new \Twig\Extra\Intl\IntlExtension()));
        $instance->addExtension(($this->privates['twig.extension.string'] ??= new \Twig\Extra\String\StringExtension()));
        $instance->addExtension(($this->privates['httplug.collector.twig.http_message'] ??= new \Http\HttplugBundle\Collector\Twig\HttpMessageMarkupExtension(NULL, NULL)));
        $instance->addExtension(($this->privates['knp_paginator.twig.extension.pagination'] ?? $this->getKnpPaginator_Twig_Extension_PaginationService()));
        $instance->addExtension(($this->privates['knp_menu.twig.extension'] ?? $this->getKnpMenu_Twig_ExtensionService()));
        $instance->addExtension(($this->privates['jms_serializer.twig_extension.runtime_serializer'] ??= new \JMS\Serializer\Twig\SerializerRuntimeExtension('jms_')));
        $instance->addExtension(($this->privates['hwi_oauth.twig.extension.oauth'] ??= new \HWI\Bundle\OAuthBundle\Twig\Extension\OAuthExtension()));
        $instance->addExtension(($this->privates['twig.extension.craue_formflow'] ?? $this->getTwig_Extension_CraueFormflowService()));
        $instance->addExtension(($this->privates['AppBundle\\Services\\Twig\\ActivityTwigExtension'] ?? $this->getActivityTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Services\\Twig\\ConfigTwigExtension'] ?? $this->getConfigTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Services\\Twig\\DashboardTwigExtension'] ?? $this->getDashboardTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Services\\Twig\\HelperTwigExtension'] ??= new \AppBundle\Services\Twig\HelperTwigExtension()));
        $instance->addExtension(($this->privates['AppBundle\\Services\\Twig\\LocaleTwigExtension'] ?? $this->getLocaleTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Services\\Twig\\LogTwigExtension'] ?? $this->getLogTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Services\\Twig\\NewsTwigExtension'] ?? $this->getNewsTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Services\\Twig\\VendorTwigExtension'] ?? $this->getVendorTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\CategoryTwigExtension'] ?? $this->getCategoryTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\CommentTwigExtension'] ?? $this->getCommentTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Component\\MenuAsideTwigExtension'] ?? $this->getMenuAsideTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\CoreTwigExtension'] ?? $this->getCoreTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\CustomerTwigExtension'] ?? $this->getCustomerTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\DashboardTwigExtension'] ?? $this->getDashboardTwigExtension2Service()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\AttributeTwigExtension'] ?? $this->getAttributeTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\FileTwigExtension'] ?? $this->getFileTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\AccordionTwigService'] ?? $this->getAccordionTwigServiceService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\AliasTwigExtension'] ?? $this->getAliasTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\AnnotationTwigExtension'] ?? $this->getAnnotationTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\AttachmentTwigExtension'] ??= new \AppBundle\Twig\Element\SmartBlock\AttachmentTwigExtension()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\ChapterTeaserTwigExtension'] ?? $this->getChapterTeaserTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\ColorsTwigExtension'] ??= new \AppBundle\Twig\Element\SmartBlock\ColorsTwigExtension()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\ColumnsTwigExtension'] ??= new \AppBundle\Twig\Element\SmartBlock\ColumnsTwigExtension()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\DoDontTwigExtension'] ?? $this->getDoDontTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\FileTransferTwigExtension'] ?? $this->getFileTransferTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\GalleryTwigExtension'] ?? $this->getGalleryTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\HtmlTwigExtension'] ?? $this->getHtmlTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\IconListTwigExtension'] ?? $this->getIconListTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\MediacockpitTwigExtension'] ?? $this->getMediacockpitTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\PatternTwigExtension'] ?? $this->getPatternTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\QrGeneratorTwigExtension'] ?? $this->getQrGeneratorTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\SliderTwigExtension'] ?? $this->getSliderTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\SpacesTwigExtension'] ?? $this->getSpacesTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlock\\TableTwigExtension'] ?? $this->getTableTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartBlockTwigExtension'] ?? $this->getSmartBlockTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartTool\\FramingTwigExtension'] ?? $this->getFramingTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\SmartTool\\InspirationTwigExtension'] ?? $this->getInspirationTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Element\\TranslationTwigExtension'] ?? $this->getTranslationTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\ElementTwigExtension'] ?? $this->getElementTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\Feature\\ConnectionTwigExtension'] ?? $this->getConnectionTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\FileTwigExtension'] ?? $this->getFileTwigExtension2Service()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\HelpTwigExtension'] ?? $this->getHelpTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\MenuTwigExtension'] ?? $this->getMenuTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\MetricsTwigExtension'] ?? $this->getMetricsTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\PhpTwigExtension'] ??= new \AppBundle\Twig\PhpTwigExtension()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\RoutingTwigExtension'] ?? $this->getRoutingTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\SettingTwigExtension'] ?? $this->getSettingTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\SpaceTwigExtension'] ?? $this->getSpaceTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\StringTwigExtension'] ??= new \AppBundle\Twig\StringTwigExtension()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\SystemTwigExtension'] ?? $this->getSystemTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\UploadTwigExtension'] ?? $this->getUploadTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\User\\BookmarkTwigExtension'] ?? $this->getBookmarkTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\User\\ImportTwigExtension'] ?? $this->getImportTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\UserTwigExtension'] ?? $this->getUserTwigExtensionService()));
        $instance->addExtension(($this->privates['AppBundle\\Twig\\VendorTwigExtension'] ??= new \AppBundle\Twig\VendorTwigExtension()));
        $instance->addExtension(($this->privates['twig.extension.webprofiler'] ?? $this->getTwig_Extension_WebprofilerService()));
        $instance->addGlobal('app', ($this->privates['twig.app_variable'] ?? $this->getTwig_AppVariableService()));
        $instance->addRuntimeLoader(($this->privates['twig.runtime_loader'] ?? $this->getTwig_RuntimeLoaderService()));
        $instance->addGlobal('debug_javascript', $this->getEnv('bool:APP_DEBUG_JAVASCRIPT'));
        $instance->registerUndefinedFilterCallback([0 => $a, 1 => 'suggestFilter']);
        $instance->registerUndefinedFunctionCallback([0 => $a, 1 => 'suggestFunction']);
        $instance->registerUndefinedTokenParserCallback([0 => $a, 1 => 'suggestTag']);
        ($this->privates['twig.configurator.environment'] ?? $this->getTwig_Configurator_EnvironmentService())->configure($instance);

        return $instance;
    }

    /**
     * Gets the private 'twig.app_variable' shared service.
     *
     * @return \Symfony\Bridge\Twig\AppVariable
     */
    protected function getTwig_AppVariableService()
    {
        $this->privates['twig.app_variable'] = $instance = new \Symfony\Bridge\Twig\AppVariable();

        $instance->setEnvironment('test');
        $instance->setDebug(true);
        $instance->setTokenStorage(($this->privates['security.token_storage'] ?? $this->getSecurity_TokenStorageService()));
        if ($this->has('request_stack')) {
            $instance->setRequestStack(($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
        }

        return $instance;
    }

    /**
     * Gets the private 'twig.configurator.environment' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator
     */
    protected function getTwig_Configurator_EnvironmentService()
    {
        return $this->privates['twig.configurator.environment'] = new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ',');
    }

    /**
     * Gets the private 'twig.extension.assets' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\AssetExtension
     */
    protected function getTwig_Extension_AssetsService()
    {
        return $this->privates['twig.extension.assets'] = new \Symfony\Bridge\Twig\Extension\AssetExtension(($this->privates['assets.packages'] ?? $this->getAssets_PackagesService()));
    }

    /**
     * Gets the private 'twig.extension.code' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\CodeExtension
     */
    protected function getTwig_Extension_CodeService()
    {
        return $this->privates['twig.extension.code'] = new \Symfony\Bridge\Twig\Extension\CodeExtension(($this->privates['debug.file_link_formatter'] ?? $this->getDebug_FileLinkFormatterService()), \dirname(__DIR__, 6), 'UTF-8');
    }

    /**
     * Gets the private 'twig.extension.craue_formflow' shared service.
     *
     * @return \Craue\FormFlowBundle\Twig\Extension\FormFlowExtension
     */
    protected function getTwig_Extension_CraueFormflowService()
    {
        $this->privates['twig.extension.craue_formflow'] = $instance = new \Craue\FormFlowBundle\Twig\Extension\FormFlowExtension();

        $instance->setFormFlowUtil(($this->services['craue_formflow_util'] ??= new \Craue\FormFlowBundle\Util\FormFlowUtil()));

        return $instance;
    }

    /**
     * Gets the private 'twig.extension.debug' shared service.
     *
     * @return \Twig\Extension\DebugExtension
     */
    protected function getTwig_Extension_DebugService()
    {
        return $this->privates['twig.extension.debug'] = new \Twig\Extension\DebugExtension();
    }

    /**
     * Gets the private 'twig.extension.debug.stopwatch' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\StopwatchExtension
     */
    protected function getTwig_Extension_Debug_StopwatchService()
    {
        return $this->privates['twig.extension.debug.stopwatch'] = new \Symfony\Bridge\Twig\Extension\StopwatchExtension(($this->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)), true);
    }

    /**
     * Gets the private 'twig.extension.expression' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\ExpressionExtension
     */
    protected function getTwig_Extension_ExpressionService()
    {
        return $this->privates['twig.extension.expression'] = new \Symfony\Bridge\Twig\Extension\ExpressionExtension();
    }

    /**
     * Gets the private 'twig.extension.form' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\FormExtension
     */
    protected function getTwig_Extension_FormService()
    {
        return $this->privates['twig.extension.form'] = new \Symfony\Bridge\Twig\Extension\FormExtension(($this->services['translator'] ?? $this->getTranslatorService()));
    }

    /**
     * Gets the private 'twig.extension.httpfoundation' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\HttpFoundationExtension
     */
    protected function getTwig_Extension_HttpfoundationService()
    {
        return $this->privates['twig.extension.httpfoundation'] = new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension(($this->privates['url_helper'] ?? $this->getUrlHelperService()));
    }

    /**
     * Gets the private 'twig.extension.httpkernel' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\HttpKernelExtension
     */
    protected function getTwig_Extension_HttpkernelService()
    {
        return $this->privates['twig.extension.httpkernel'] = new \Symfony\Bridge\Twig\Extension\HttpKernelExtension();
    }

    /**
     * Gets the private 'twig.extension.intl' shared service.
     *
     * @return \Twig\Extra\Intl\IntlExtension
     */
    protected function getTwig_Extension_IntlService()
    {
        return $this->privates['twig.extension.intl'] = new \Twig\Extra\Intl\IntlExtension();
    }

    /**
     * Gets the private 'twig.extension.logout_url' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\LogoutUrlExtension
     */
    protected function getTwig_Extension_LogoutUrlService()
    {
        return $this->privates['twig.extension.logout_url'] = new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension(($this->privates['security.logout_url_generator'] ?? $this->getSecurity_LogoutUrlGeneratorService()));
    }

    /**
     * Gets the private 'twig.extension.profiler' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\ProfilerExtension
     */
    protected function getTwig_Extension_ProfilerService()
    {
        return $this->privates['twig.extension.profiler'] = new \Symfony\Bridge\Twig\Extension\ProfilerExtension(($this->privates['twig.profile'] ??= new \Twig\Profiler\Profile()), ($this->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private 'twig.extension.routing' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\RoutingExtension
     */
    protected function getTwig_Extension_RoutingService()
    {
        return $this->privates['twig.extension.routing'] = new \Symfony\Bridge\Twig\Extension\RoutingExtension(($this->services['router'] ?? $this->getRouterService()));
    }

    /**
     * Gets the private 'twig.extension.security' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\SecurityExtension
     */
    protected function getTwig_Extension_SecurityService()
    {
        $a = ($this->services['jms_serializer.authorization_checker'] ?? $this->getJmsSerializer_AuthorizationCheckerService());

        if (isset($this->privates['twig.extension.security'])) {
            return $this->privates['twig.extension.security'];
        }
        $b = ($this->privates['security.impersonate_url_generator'] ?? $this->getSecurity_ImpersonateUrlGeneratorService());

        if (isset($this->privates['twig.extension.security'])) {
            return $this->privates['twig.extension.security'];
        }

        return $this->privates['twig.extension.security'] = new \Symfony\Bridge\Twig\Extension\SecurityExtension($a, $b);
    }

    /**
     * Gets the private 'twig.extension.security_csrf' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\CsrfExtension
     */
    protected function getTwig_Extension_SecurityCsrfService()
    {
        return $this->privates['twig.extension.security_csrf'] = new \Symfony\Bridge\Twig\Extension\CsrfExtension();
    }

    /**
     * Gets the private 'twig.extension.serializer' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\SerializerExtension
     */
    protected function getTwig_Extension_SerializerService()
    {
        return $this->privates['twig.extension.serializer'] = new \Symfony\Bridge\Twig\Extension\SerializerExtension();
    }

    /**
     * Gets the private 'twig.extension.string' shared service.
     *
     * @return \Twig\Extra\String\StringExtension
     */
    protected function getTwig_Extension_StringService()
    {
        return $this->privates['twig.extension.string'] = new \Twig\Extra\String\StringExtension();
    }

    /**
     * Gets the private 'twig.extension.trans' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\TranslationExtension
     */
    protected function getTwig_Extension_TransService()
    {
        return $this->privates['twig.extension.trans'] = new \Symfony\Bridge\Twig\Extension\TranslationExtension(($this->services['translator'] ?? $this->getTranslatorService()));
    }

    /**
     * Gets the private 'twig.extension.webprofiler' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Twig\WebProfilerExtension
     */
    protected function getTwig_Extension_WebprofilerService()
    {
        $a = new \Symfony\Component\VarDumper\Dumper\HtmlDumper(NULL, 'UTF-8', 1);
        $a->setDisplayOptions(['maxStringLength' => 4096, 'fileLinkFormat' => ($this->privates['debug.file_link_formatter'] ?? $this->getDebug_FileLinkFormatterService())]);

        return $this->privates['twig.extension.webprofiler'] = new \Symfony\Bundle\WebProfilerBundle\Twig\WebProfilerExtension($a);
    }

    /**
     * Gets the private 'twig.extension.yaml' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\YamlExtension
     */
    protected function getTwig_Extension_YamlService()
    {
        return $this->privates['twig.extension.yaml'] = new \Symfony\Bridge\Twig\Extension\YamlExtension();
    }

    /**
     * Gets the private 'twig.loader.native_filesystem' shared service.
     *
     * @return \Twig\Loader\FilesystemLoader
     */
    protected function getTwig_Loader_NativeFilesystemService()
    {
        $this->privates['twig.loader.native_filesystem'] = $instance = new \Twig\Loader\FilesystemLoader([], \dirname(__DIR__, 6));

        $instance->addPath((\dirname(__DIR__, 6).'/vendor/knplabs/knp-menu/src/Knp/Menu/Resources/views'));
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Resources/views'), 'Doctrine');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle/Resources/views'), '!Doctrine');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/symfony/security-bundle/Resources/views'), 'Security');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/symfony/security-bundle/Resources/views'), '!Security');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/php-http/httplug-bundle/src/Resources/views'), 'Httplug');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/php-http/httplug-bundle/src/Resources/views'), '!Httplug');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/templates'), 'KnpPaginator');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle/templates'), '!KnpPaginator');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/knplabs/knp-menu-bundle/src/Resources/views'), 'KnpMenu');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/knplabs/knp-menu-bundle/src/Resources/views'), '!KnpMenu');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/jms/serializer-bundle/Resources/views'), 'JMSSerializer');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/jms/serializer-bundle/Resources/views'), '!JMSSerializer');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/views'), 'HWIOAuth');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src/Resources/views'), '!HWIOAuth');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-migrations-bundle/Resources/views'), 'DoctrineMigrations');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-migrations-bundle/Resources/views'), '!DoctrineMigrations');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/views'), 'CraueFormFlow');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle/Resources/views'), '!CraueFormFlow');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Resources/views'), 'App');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub/Resources/views'), '!App');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/symfony/web-profiler-bundle/Resources/views'), 'WebProfiler');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/symfony/web-profiler-bundle/Resources/views'), '!WebProfiler');
        $instance->addPath((\dirname(__DIR__, 6).'/templates'));
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Resources/views/Email'), 'email');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Resources/views/Email'), '!email');
        $instance->addPath((\dirname(__DIR__, 6).'/vendor/symfony/twig-bridge/Resources/views/Form'));

        return $instance;
    }

    /**
     * Gets the private 'twig.missing_extension_suggestor' shared service.
     *
     * @return \Twig\Extra\TwigExtraBundle\MissingExtensionSuggestor
     */
    protected function getTwig_MissingExtensionSuggestorService()
    {
        return $this->privates['twig.missing_extension_suggestor'] = new \Twig\Extra\TwigExtraBundle\MissingExtensionSuggestor();
    }

    /**
     * Gets the private 'twig.profile' shared service.
     *
     * @return \Twig\Profiler\Profile
     */
    protected function getTwig_ProfileService()
    {
        return $this->privates['twig.profile'] = new \Twig\Profiler\Profile();
    }

    /**
     * Gets the private 'twig.runtime_loader' shared service.
     *
     * @return \Twig\RuntimeLoader\ContainerRuntimeLoader
     */
    protected function getTwig_RuntimeLoaderService()
    {
        return $this->privates['twig.runtime_loader'] = new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => ['privates', 'twig.runtime.security_csrf', 'getTwig_Runtime_SecurityCsrfService', true],
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => ['privates', 'twig.runtime.httpkernel', 'getTwig_Runtime_HttpkernelService', true],
            'Symfony\\Bridge\\Twig\\Extension\\SerializerRuntime' => ['privates', 'twig.runtime.serializer', 'getTwig_Runtime_SerializerService', true],
            'Symfony\\Component\\Form\\FormRenderer' => ['privates', 'twig.form.renderer', 'getTwig_Form_RendererService', true],
            'JMS\\Serializer\\Twig\\SerializerRuntimeHelper' => ['privates', 'jms_serializer.twig_extension.serializer_runtime_helper', 'getJmsSerializer_TwigExtension_SerializerRuntimeHelperService', true],
            'HWI\\Bundle\\OAuthBundle\\Twig\\Extension\\OAuthRuntime' => ['privates', 'hwi_oauth.twig.extension.oauth.runtime', 'getHwiOauth_Twig_Extension_Oauth_RuntimeService', true],
        ], [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => '?',
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => '?',
            'Symfony\\Bridge\\Twig\\Extension\\SerializerRuntime' => '?',
            'Symfony\\Component\\Form\\FormRenderer' => '?',
            'JMS\\Serializer\\Twig\\SerializerRuntimeHelper' => '?',
            'HWI\\Bundle\\OAuthBundle\\Twig\\Extension\\OAuthRuntime' => '?',
        ]));
    }

    /**
     * Gets the private 'url_helper' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\UrlHelper
     */
    protected function getUrlHelperService()
    {
        return $this->privates['url_helper'] = new \Symfony\Component\HttpFoundation\UrlHelper(($this->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService()));
    }

    /**
     * Gets the private 'validate_request_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener
     */
    protected function getValidateRequestListenerService()
    {
        return $this->privates['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener();
    }

    /**
     * Gets the private 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilder
     */
    protected function getValidator_BuilderService()
    {
        $this->privates['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(($this->privates['validator.validator_factory'] ?? $this->getValidator_ValidatorFactoryService()));
        if ($this->has('translator')) {
            $instance->setTranslator(($this->services['translator'] ?? $this->getTranslatorService()));
        }
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings([0 => (\dirname(__DIR__, 6).'/vendor/symfony/form/Resources/config/validation.xml')]);
        $instance->enableAnnotationMapping(true);
        $instance->setDoctrineAnnotationReader(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()));
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers([0 => ($this->privates['doctrine.orm.validator_initializer'] ?? $this->getDoctrine_Orm_ValidatorInitializerService())]);
        $instance->addLoader(($this->privates['validator.property_info_loader'] ?? $this->getValidator_PropertyInfoLoaderService()));
        $instance->addLoader(($this->privates['doctrine.orm.default_entity_manager.validator_loader'] ?? $this->getDoctrine_Orm_DefaultEntityManager_ValidatorLoaderService()));

        return $instance;
    }

    /**
     * Gets the private 'validator.property_info_loader' shared service.
     *
     * @return \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader
     */
    protected function getValidator_PropertyInfoLoaderService()
    {
        $a = ($this->privates['property_info'] ?? $this->getPropertyInfoService());

        if (isset($this->privates['validator.property_info_loader'])) {
            return $this->privates['validator.property_info_loader'];
        }

        return $this->privates['validator.property_info_loader'] = new \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader($a, $a, $a, NULL);
    }

    /**
     * Gets the private 'validator.validator_factory' shared service.
     *
     * @return \Symfony\Component\Validator\ContainerConstraintValidatorFactory
     */
    protected function getValidator_ValidatorFactoryService()
    {
        return $this->privates['validator.validator_factory'] = new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => ['privates', 'validator.email', 'getValidator_EmailService', true],
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => ['privates', 'validator.not_compromised_password', 'getValidator_NotCompromisedPasswordService', true],
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => ['privates', 'validator.when', 'getValidator_WhenService', true],
            'doctrine.orm.validator.unique' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
            'security.validator.user_password' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
            'validator.expression' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
        ], [
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => '?',
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => '?',
            'doctrine.orm.validator.unique' => '?',
            'security.validator.user_password' => '?',
            'validator.expression' => '?',
        ]));
    }

    /**
     * Gets the public 'profiler' alias.
     *
     * @return object The ".container.private.profiler" service.
     */
    protected function getProfilerService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.4', 'Accessing the "profiler" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.profiler');
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [
        'kernel.runtime_environment' => false,
        'kernel.build_dir' => false,
        'kernel.cache_dir' => false,
        'kernel.secret' => false,
        'kernel.default_locale' => false,
        'debug.file_link_format' => false,
        'debug.container.dump' => false,
        'router.cache_dir' => false,
        'serializer.mapping.cache.file' => false,
        'validator.mapping.cache.file' => false,
        'profiler.storage.dsn' => false,
        'doctrine.orm.proxy_dir' => false,
    ];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        $value = match ($name) {
            'kernel.runtime_environment' => $this->getEnv('default:kernel.environment:APP_RUNTIME_ENV'),
            'kernel.build_dir' => $this->targetDir.'',
            'kernel.cache_dir' => $this->targetDir.'',
            'kernel.secret' => $this->getEnv('APP_SECRET'),
            'kernel.default_locale' => $this->getEnv('string:APP_LOCALE'),
            'debug.file_link_format' => $this->getEnv('default::SYMFONY_IDE'),
            'debug.container.dump' => ($this->targetDir.''.'/App_KernelTestDebugContainer.xml'),
            'router.cache_dir' => $this->targetDir.'',
            'serializer.mapping.cache.file' => ($this->targetDir.''.'/serialization.php'),
            'validator.mapping.cache.file' => ($this->targetDir.''.'/validation.php'),
            'profiler.storage.dsn' => ('file:'.$this->targetDir.''.'/profiler'),
            'doctrine.orm.proxy_dir' => ($this->targetDir.''.'/doctrine/orm/Proxies'),
            default => throw new ParameterNotFoundException($name),
        };
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => \dirname(__DIR__, 6),
            'kernel.environment' => 'test',
            'kernel.debug' => true,
            'kernel.logs_dir' => (\dirname(__DIR__, 6).'/var/log'),
            'kernel.bundles' => [
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'TwigExtraBundle' => 'Twig\\Extra\\TwigExtraBundle\\TwigExtraBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'HttplugBundle' => 'Http\\HttplugBundle\\HttplugBundle',
                'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle',
                'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'HWIOAuthBundle' => 'HWI\\Bundle\\OAuthBundle\\HWIOAuthBundle',
                'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle',
                'CraueFormFlowBundle' => 'Craue\\FormFlowBundle\\CraueFormFlowBundle',
                'AppBundle' => 'AppBundle\\AppBundle',
                'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle',
                'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle',
                'LiipTestFixturesBundle' => 'Liip\\TestFixturesBundle\\LiipTestFixturesBundle',
            ],
            'kernel.bundles_metadata' => [
                'FrameworkBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/symfony/framework-bundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ],
                'DoctrineBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ],
                'SecurityBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/symfony/security-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SecurityBundle',
                ],
                'TwigBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/symfony/twig-bundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ],
                'TwigExtraBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/twig/extra-bundle'),
                    'namespace' => 'Twig\\Extra\\TwigExtraBundle',
                ],
                'MonologBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/symfony/monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ],
                'StofDoctrineExtensionsBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/stof/doctrine-extensions-bundle/src'),
                    'namespace' => 'Stof\\DoctrineExtensionsBundle',
                ],
                'SensioFrameworkExtraBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/sensio/framework-extra-bundle/src'),
                    'namespace' => 'Sensio\\Bundle\\FrameworkExtraBundle',
                ],
                'HttplugBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/php-http/httplug-bundle/src'),
                    'namespace' => 'Http\\HttplugBundle',
                ],
                'KnpPaginatorBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-paginator-bundle'),
                    'namespace' => 'Knp\\Bundle\\PaginatorBundle',
                ],
                'KnpMenuBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/knplabs/knp-menu-bundle/src'),
                    'namespace' => 'Knp\\Bundle\\MenuBundle',
                ],
                'JMSSerializerBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/jms/serializer-bundle'),
                    'namespace' => 'JMS\\SerializerBundle',
                ],
                'HWIOAuthBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/hwi/oauth-bundle/src'),
                    'namespace' => 'HWI\\Bundle\\OAuthBundle',
                ],
                'DoctrineMigrationsBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-migrations-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\MigrationsBundle',
                ],
                'CraueFormFlowBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/craue/formflow-bundle'),
                    'namespace' => 'Craue\\FormFlowBundle',
                ],
                'AppBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/wirdesign-communication-ag/wirhub'),
                    'namespace' => 'AppBundle',
                ],
                'WebProfilerBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/symfony/web-profiler-bundle'),
                    'namespace' => 'Symfony\\Bundle\\WebProfilerBundle',
                ],
                'DoctrineFixturesBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/doctrine/doctrine-fixtures-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\FixturesBundle',
                ],
                'LiipTestFixturesBundle' => [
                    'path' => (\dirname(__DIR__, 6).'/vendor/liip/test-fixtures-bundle/src'),
                    'namespace' => 'Liip\\TestFixturesBundle',
                ],
            ],
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'App_KernelTestDebugContainer',
            'hwi_oauth.connect.registration_form' => '',
            'locale' => 'de',
            'event_dispatcher.event_aliases' => [
                'Symfony\\Component\\Console\\Event\\ConsoleCommandEvent' => 'console.command',
                'Symfony\\Component\\Console\\Event\\ConsoleErrorEvent' => 'console.error',
                'Symfony\\Component\\Console\\Event\\ConsoleSignalEvent' => 'console.signal',
                'Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent' => 'console.terminate',
                'Symfony\\Component\\Form\\Event\\PreSubmitEvent' => 'form.pre_submit',
                'Symfony\\Component\\Form\\Event\\SubmitEvent' => 'form.submit',
                'Symfony\\Component\\Form\\Event\\PostSubmitEvent' => 'form.post_submit',
                'Symfony\\Component\\Form\\Event\\PreSetDataEvent' => 'form.pre_set_data',
                'Symfony\\Component\\Form\\Event\\PostSetDataEvent' => 'form.post_set_data',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent' => 'kernel.controller_arguments',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerEvent' => 'kernel.controller',
                'Symfony\\Component\\HttpKernel\\Event\\ResponseEvent' => 'kernel.response',
                'Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent' => 'kernel.finish_request',
                'Symfony\\Component\\HttpKernel\\Event\\RequestEvent' => 'kernel.request',
                'Symfony\\Component\\HttpKernel\\Event\\ViewEvent' => 'kernel.view',
                'Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent' => 'kernel.exception',
                'Symfony\\Component\\HttpKernel\\Event\\TerminateEvent' => 'kernel.terminate',
                'Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent' => 'security.authentication.success',
                'Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent' => 'security.interactive_login',
                'Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent' => 'security.switch_user',
            ],
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.http_method_override' => false,
            'kernel.trust_x_sendfile_type_header' => false,
            'kernel.trusted_hosts' => [

            ],
            'kernel.enabled_locales' => [

            ],
            'kernel.error_controller' => 'error_controller',
            'test.client.parameters' => [

            ],
            'asset.request_context.base_path' => NULL,
            'asset.request_context.secure' => NULL,
            'translator.logging' => false,
            'translator.default_path' => (\dirname(__DIR__, 6).'/translations'),
            'debug.error_handler.throw_at' => -1,
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => 'kernel::loadRoutes',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => [
                'cache_limiter' => '0',
                'cookie_secure' => 'auto',
                'cookie_httponly' => true,
                'cookie_samesite' => 'lax',
                'gc_probability' => 1,
            ],
            'session.save_path' => (\dirname(__DIR__, 6).'/var/sessions/test'),
            'session.metadata.update_threshold' => 0,
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'validator.translation_domain' => 'validators',
            'profiler_listener.only_exceptions' => false,
            'profiler_listener.only_main_requests' => false,
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => [
                'default' => 'doctrine.orm.default_entity_manager',
            ],
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => [

            ],
            'doctrine.connections' => [
                'default' => 'doctrine.dbal.default_connection',
            ],
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.metadata.attribute.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AttributeDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => true,
            'doctrine.orm.enable_lazy_ghost_objects' => true,
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'security.role_hierarchy.roles' => [
                'ROLE_EDITOR' => [
                    0 => 'ROLE_USER',
                ],
                'ROLE_ADMIN' => [
                    0 => 'ROLE_USER',
                    1 => 'ROLE_EDITOR',
                ],
            ],
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.authentication.hide_user_not_found' => true,
            'security.firewalls' => [
                0 => 'public',
                1 => 'main',
                2 => 'login',
            ],
            'hwi_oauth.resource_ownermap.configured.main' => [
                'oauth' => '/login/check-oauth',
                'azure' => '/login/check-azure',
                'okta' => '/login/check-okta',
            ],
            'twig.form.resources' => [
                0 => 'form_div_layout.html.twig',
                1 => '@App/_components/form/default.html.twig',
            ],
            'twig.default_path' => (\dirname(__DIR__, 6).'/templates'),
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => [

            ],
            'monolog.handlers_to_channels' => [
                'monolog.handler.main' => [
                    'type' => 'exclusive',
                    'elements' => [
                        0 => 'event',
                    ],
                ],
            ],
            'stof_doctrine_extensions.listener.loggable.class' => 'Gedmo\\Loggable\\LoggableListener',
            'stof_doctrine_extensions.event_listener.logger.class' => 'Stof\\DoctrineExtensionsBundle\\EventListener\\LoggerListener',
            'stof_doctrine_extensions.default_locale' => 'en_US',
            'stof_doctrine_extensions.translation_fallback' => false,
            'stof_doctrine_extensions.persist_default_translation' => false,
            'stof_doctrine_extensions.skip_translation_on_load' => false,
            'stof_doctrine_extensions.listener.translatable.class' => 'Gedmo\\Translatable\\TranslatableListener',
            'stof_doctrine_extensions.listener.timestampable.class' => 'Gedmo\\Timestampable\\TimestampableListener',
            'stof_doctrine_extensions.listener.blameable.class' => 'Gedmo\\Blameable\\BlameableListener',
            'stof_doctrine_extensions.listener.sluggable.class' => 'Gedmo\\Sluggable\\SluggableListener',
            'stof_doctrine_extensions.listener.tree.class' => 'Gedmo\\Tree\\TreeListener',
            'stof_doctrine_extensions.listener.sortable.class' => 'Gedmo\\Sortable\\SortableListener',
            'stof_doctrine_extensions.listener.softdeleteable.class' => 'Gedmo\\SoftDeleteable\\SoftDeleteableListener',
            'stof_doctrine_extensions.listener.uploadable.class' => 'Gedmo\\Uploadable\\UploadableListener',
            'stof_doctrine_extensions.listener.reference_integrity.class' => 'Gedmo\\ReferenceIntegrity\\ReferenceIntegrityListener',
            'knp_paginator.template.pagination' => '@KnpPaginator/Pagination/twitter_bootstrap_v4_pagination.html.twig',
            'knp_paginator.template.filtration' => '@KnpPaginator/Pagination/filtration.html.twig',
            'knp_paginator.template.sortable' => '@KnpPaginator/Pagination/sortable_link.html.twig',
            'knp_paginator.page_range' => 5,
            'knp_paginator.page_limit' => NULL,
            'knp_menu.renderer.list.options' => [

            ],
            'knp_menu.twig.extension.class' => 'Knp\\Menu\\Twig\\MenuExtension',
            'knp_menu.renderer.twig.class' => 'Knp\\Menu\\Renderer\\TwigRenderer',
            'knp_menu.renderer.twig.options' => [

            ],
            'knp_menu.renderer.twig.template' => '@App/menu.html.twig',
            'knp_menu.default_renderer' => 'twig',
            'hwi_oauth.resource_owner.oauth1.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GenericOAuth1ResourceOwner',
            'hwi_oauth.resource_owner.oauth2.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GenericOAuth2ResourceOwner',
            'hwi_oauth.resource_owner.amazon.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\AmazonResourceOwner',
            'hwi_oauth.resource_owner.apple.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\AppleResourceOwner',
            'hwi_oauth.resource_owner.asana.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\AsanaResourceOwner',
            'hwi_oauth.resource_owner.auth0.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\Auth0ResourceOwner',
            'hwi_oauth.resource_owner.azure.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\AzureResourceOwner',
            'hwi_oauth.resource_owner.bitbucket.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BitbucketResourceOwner',
            'hwi_oauth.resource_owner.bitbucket2.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\Bitbucket2ResourceOwner',
            'hwi_oauth.resource_owner.bitly.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BitlyResourceOwner',
            'hwi_oauth.resource_owner.box.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BoxResourceOwner',
            'hwi_oauth.resource_owner.bufferapp.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BufferAppResourceOwner',
            'hwi_oauth.resource_owner.clever.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\CleverResourceOwner',
            'hwi_oauth.resource_owner.dailymotion.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DailymotionResourceOwner',
            'hwi_oauth.resource_owner.deviantart.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DeviantartResourceOwner',
            'hwi_oauth.resource_owner.deezer.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DeezerResourceOwner',
            'hwi_oauth.resource_owner.discogs.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DiscogsResourceOwner',
            'hwi_oauth.resource_owner.disqus.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DisqusResourceOwner',
            'hwi_oauth.resource_owner.dropbox.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DropboxResourceOwner',
            'hwi_oauth.resource_owner.eve_online.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\EveOnlineResourceOwner',
            'hwi_oauth.resource_owner.eventbrite.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\EventbriteResourceOwner',
            'hwi_oauth.resource_owner.facebook.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FacebookResourceOwner',
            'hwi_oauth.resource_owner.fiware.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FiwareResourceOwner',
            'hwi_oauth.resource_owner.flickr.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FlickrResourceOwner',
            'hwi_oauth.resource_owner.foursquare.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FoursquareResourceOwner',
            'hwi_oauth.resource_owner.genius.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GeniusResourceOwner',
            'hwi_oauth.resource_owner.github.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GitHubResourceOwner',
            'hwi_oauth.resource_owner.gitlab.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GitLabResourceOwner',
            'hwi_oauth.resource_owner.google.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GoogleResourceOwner',
            'hwi_oauth.resource_owner.youtube.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\YoutubeResourceOwner',
            'hwi_oauth.resource_owner.hubic.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\HubicResourceOwner',
            'hwi_oauth.resource_owner.instagram.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\InstagramResourceOwner',
            'hwi_oauth.resource_owner.jawbone.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\JawboneResourceOwner',
            'hwi_oauth.resource_owner.jira.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\JiraResourceOwner',
            'hwi_oauth.resource_owner.keycloak.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\KeycloakResourceOwner',
            'hwi_oauth.resource_owner.linkedin.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\LinkedinResourceOwner',
            'hwi_oauth.resource_owner.mailru.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\MailRuResourceOwner',
            'hwi_oauth.resource_owner.office365.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\Office365ResourceOwner',
            'hwi_oauth.resource_owner.paypal.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\PaypalResourceOwner',
            'hwi_oauth.resource_owner.qq.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\QQResourceOwner',
            'hwi_oauth.resource_owner.reddit.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\RedditResourceOwner',
            'hwi_oauth.resource_owner.runkeeper.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\RunKeeperResourceOwner',
            'hwi_oauth.resource_owner.salesforce.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SalesforceResourceOwner',
            'hwi_oauth.resource_owner.sensio_connect.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SensioConnectResourceOwner',
            'hwi_oauth.resource_owner.sina_weibo.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SinaWeiboResourceOwner',
            'hwi_oauth.resource_owner.slack.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SlackResourceOwner',
            'hwi_oauth.resource_owner.spotify.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SpotifyResourceOwner',
            'hwi_oauth.resource_owner.soundcloud.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SoundcloudResourceOwner',
            'hwi_oauth.resource_owner.stack_exchange.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\StackExchangeResourceOwner',
            'hwi_oauth.resource_owner.stereomood.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\StereomoodResourceOwner',
            'hwi_oauth.resource_owner.strava.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\StravaResourceOwner',
            'hwi_oauth.resource_owner.toshl.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\ToshlResourceOwner',
            'hwi_oauth.resource_owner.trakt.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TraktResourceOwner',
            'hwi_oauth.resource_owner.trello.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TrelloResourceOwner',
            'hwi_oauth.resource_owner.twitch.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TwitchResourceOwner',
            'hwi_oauth.resource_owner.twitter.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TwitterResourceOwner',
            'hwi_oauth.resource_owner.vkontakte.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\VkontakteResourceOwner',
            'hwi_oauth.resource_owner.windows_live.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\WindowsLiveResourceOwner',
            'hwi_oauth.resource_owner.wordpress.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\WordpressResourceOwner',
            'hwi_oauth.resource_owner.xing.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\XingResourceOwner',
            'hwi_oauth.resource_owner.yahoo.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\YahooResourceOwner',
            'hwi_oauth.resource_owner.yandex.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\YandexResourceOwner',
            'hwi_oauth.resource_owner.odnoklassniki.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\OdnoklassnikiResourceOwner',
            'hwi_oauth.resource_owner.37signals.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\ThirtySevenSignalsResourceOwner',
            'hwi_oauth.resource_owner.itembase.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\ItembaseResourceOwner',
            'hwi_oauth.target_path_parameter' => NULL,
            'hwi_oauth.target_path_domains_whitelist' => [

            ],
            'hwi_oauth.use_referer' => false,
            'hwi_oauth.failed_use_referer' => false,
            'hwi_oauth.failed_auth_path' => 'hwi_oauth_connect',
            'hwi_oauth.grant_rule' => 'IS_AUTHENTICATED_REMEMBERED',
            'hwi_oauth.resource_owners' => [
                'facebook' => 'facebook',
                'oauth' => 'oauth',
                'azure' => 'azure',
                'okta' => 'okta',
            ],
            'hwi_oauth.connect' => true,
            'hwi_oauth.connect.confirmation' => false,
            'doctrine.migrations.preferred_em' => NULL,
            'doctrine.migrations.preferred_connection' => NULL,
            'craue.form.flow.class' => 'Craue\\FormFlowBundle\\Form\\FormFlow',
            'craue.form.flow.storage.class' => 'Craue\\FormFlowBundle\\Storage\\SessionStorage',
            'craue.form.flow.event_listener.previous_step_invalid.class' => 'Craue\\FormFlowBundle\\EventListener\\PreviousStepInvalidEventListener',
            'craue.form.flow.event_listener.previous_step_invalid.event' => 'flow.previous_step_invalid',
            'craue.form.flow.event_listener.flow_expired.class' => 'Craue\\FormFlowBundle\\EventListener\\FlowExpiredEventListener',
            'craue.form.flow.event_listener.flow_expired.event' => 'flow.flow_expired',
            'craue_twig_extensions.formflow.class' => 'Craue\\FormFlowBundle\\Twig\\Extension\\FormFlowExtension',
            'craue_formflow.util.class' => 'Craue\\FormFlowBundle\\Util\\FormFlowUtil',
            'liip_test_fixtures.cache_db.sqlite' => NULL,
            'liip_test_fixtures.keep_database_and_schema' => false,
            'liip_test_fixtures.cache_metadata' => true,
            'data_collector.templates' => [
                'data_collector.request' => [
                    0 => 'request',
                    1 => '@WebProfiler/Collector/request.html.twig',
                ],
                'data_collector.time' => [
                    0 => 'time',
                    1 => '@WebProfiler/Collector/time.html.twig',
                ],
                'data_collector.memory' => [
                    0 => 'memory',
                    1 => '@WebProfiler/Collector/memory.html.twig',
                ],
                'data_collector.validator' => [
                    0 => 'validator',
                    1 => '@WebProfiler/Collector/validator.html.twig',
                ],
                'data_collector.ajax' => [
                    0 => 'ajax',
                    1 => '@WebProfiler/Collector/ajax.html.twig',
                ],
                'data_collector.form' => [
                    0 => 'form',
                    1 => '@WebProfiler/Collector/form.html.twig',
                ],
                'data_collector.exception' => [
                    0 => 'exception',
                    1 => '@WebProfiler/Collector/exception.html.twig',
                ],
                'data_collector.logger' => [
                    0 => 'logger',
                    1 => '@WebProfiler/Collector/logger.html.twig',
                ],
                'data_collector.events' => [
                    0 => 'events',
                    1 => '@WebProfiler/Collector/events.html.twig',
                ],
                'data_collector.router' => [
                    0 => 'router',
                    1 => '@WebProfiler/Collector/router.html.twig',
                ],
                'data_collector.cache' => [
                    0 => 'cache',
                    1 => '@WebProfiler/Collector/cache.html.twig',
                ],
                'data_collector.translation' => [
                    0 => 'translation',
                    1 => '@WebProfiler/Collector/translation.html.twig',
                ],
                'data_collector.security' => [
                    0 => 'security',
                    1 => '@Security/Collector/security.html.twig',
                ],
                'data_collector.twig' => [
                    0 => 'twig',
                    1 => '@WebProfiler/Collector/twig.html.twig',
                ],
                'data_collector.http_client' => [
                    0 => 'http_client',
                    1 => '@WebProfiler/Collector/http_client.html.twig',
                ],
                'data_collector.doctrine' => [
                    0 => 'db',
                    1 => '@Doctrine/Collector/db.html.twig',
                ],
                'httplug.collector.collector' => [
                    0 => 'httplug',
                    1 => '@Httplug/webprofiler.html.twig',
                ],
                'mailer.data_collector' => [
                    0 => 'mailer',
                    1 => '@WebProfiler/Collector/mailer.html.twig',
                ],
                'data_collector.jms_serializer' => [
                    0 => 'jms_serializer',
                    1 => '@JMSSerializer/Collector/panel.html.twig',
                ],
                'data_collector.config' => [
                    0 => 'config',
                    1 => '@WebProfiler/Collector/config.html.twig',
                ],
            ],
            'console.command.ids' => [

            ],
        ];
    }
}
